VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "WebDriver"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_Description = "This class provides the main mechanism to control/automate a browser application"
'@ModuleDescription "This class provides the main mechanism to control/automate a browser application"
'@Exposed
'@folder("SeleniumVBA.Source")
' ==========================================================================
' SeleniumVBA v6.6
'
' A Selenium wrapper for browser automation developed for MS Office VBA
'
' https://github.com/GCuser99/SeleniumVBA/tree/main
'
' Contact Info:
'
' https://github.com/6DiegoDiego9
' https://github.com/GCUser99
'
' Based originally on uezo's TinySeleniumVBA with extensive changes/additions
' ==========================================================================
' MIT License
'
' Copyright (c) 2023-2025, GCUser99 and 6DiegoDiego9 (https://github.com/GCuser99/SeleniumVBA)
' Copyright (c) 2021, uezo (https://github.com/uezo/TinySeleniumVBA)
'
' Permission is hereby granted, free of charge, to any person obtaining a copy
' of this software and associated documentation files (the "Software"), to deal
' in the Software without restriction, including without limitation the rights
' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
' copies of the Software, and to permit persons to whom the Software is
' furnished to do so, subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included in all
' copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
' SOFTWARE.
' ==========================================================================

Option Explicit

'holds whether or not WebDriver auto-check-and-install is turned on or not
Private checkDriverBrowserVersionAlignment As Boolean

'controls frequency of auto-check-and-install - threshhold when to trigger
Private minDriverBrowserCompatibilityLevel As Long

'desired lower bound of returned arrays
Private Const baseArrayIdx As Integer = 1

'change baseDomIdx to 0 if zero-based Dom (de)selection is desired
'with baseDomIdx=1: SelectByIndex 1 gets first element
'with baseDomIdx=0: SelectByIndex 0 gets first element
Private Const baseDomIdx As Integer = 1

'WebDriver-related globals
Private sessionId_ As String
Private driverUrl_ As String
Private browser_ As svbaBrowser

'holds defaults for command window style, default io folder, and default driver folder
Private appWinStyle As VbAppWinStyle
Private defaultIOFolder_ As String
Private defaultDriverFolder_ As String

'paths to json capabilities files to load each time OpenBrowser is called (if specified in settings file)
Private preloadChromeCapabilitiesFilePath As String
Private preloadEdgeCapabilitiesFilePath As String
Private preloadFirefoxCapabilitiesFilePath As String

'holds default driver ports
Private driverDefaultPortChrome As Long
Private driverDefaultPortEdge As Long
Private driverDefaultPortFirefox As Long

'track current timeout states
Private curImplicitWait As Long
Private curPageLoadTimeout As Long
Private curScriptTimeout As Long

'system default timeouts
Private Const sysImplicitWait As Long = 0
Private Const sysPageLoadTimeout As Long = 300000
Private Const sysScriptTimeout As Long = 30000

'flag for whether to clean up (on class terminate) temp files generated by SendKeysToOS
Private cleanupTempFiles As Boolean

'flag to track state of modifier keys - used in SendKeys, Click, and ActionChain methods
Private modifierKeyStateDown As Boolean

'store original style of Highlighted elements to be able to UnHighlight them at a future time
Private SetHighlight_ElemsOrigStyle As Dictionary

'see HighLight method
Public Enum VBAcolors
    Unchanged = -1
    Black = VBA.ColorConstants.vbBlack
    Blue = VBA.ColorConstants.vbBlue
    Cyan = VBA.ColorConstants.vbCyan
    Green = VBA.ColorConstants.vbGreen
    Magenta = VBA.ColorConstants.vbMagenta
    Red = VBA.ColorConstants.vbRed
    Yellow = VBA.ColorConstants.vbYellow
    'other custom fine-tuned colors can be added, for example: "Brown = VBA.RGB(128, 0, 0)"
End Enum

'Highlighting globals:
Private setHightlightFoundElems_Settings As Collection
Private lastElems As WebElements

'save processID for Firefox shutdown
Private processID As String

'system constants for identifing web elements
Private Const ELEMENT_KEY As String = "element-6066-11e4-a52e-4f735466cecf"
Private Const SHADOWROOT_KEY As String = "shadow-6066-11e4-a52e-4f735466cecf"

Private Type typCMD
    CMD_STATUS As Variant
    CMD_NEW_SESSION As Variant
    CMD_GET_ALL_SESSIONS As Variant
    CMD_QUIT As Variant
    CMD_GET_CURRENT_WINDOW_HANDLE As Variant
    CMD_GET_WINDOW_HANDLES As Variant
    CMD_GET As Variant
    CMD_GO_FORWARD As Variant
    CMD_GO_BACK As Variant
    CMD_REFRESH As Variant
    CMD_EXECUTE_SCRIPT As Variant
    CMD_EXECUTE_SCRIPT_ASYNC As Variant
    CMD_GET_CURRENT_URL As Variant
    CMD_GET_TITLE As Variant
    CMD_GET_PAGE_SOURCE As Variant
    CMD_SCREENSHOT As Variant
    CMD_ELEMENT_SCREENSHOT As Variant
    CMD_FIND_ELEMENT As Variant
    CMD_FIND_ELEMENTS As Variant
    CMD_GET_ACTIVE_ELEMENT As Variant
    CMD_FIND_ELEMENT_FROM_ELEMENT As Variant
    CMD_FIND_ELEMENTS_FROM_ELEMENT As Variant
    CMD_CLICK_ELEMENT As Variant
    CMD_CLEAR_ELEMENT As Variant
    CMD_CLEAR_ACTIONS As Variant
    CMD_GET_ELEMENT_TEXT As Variant
    CMD_SEND_KEYS_TO_ELEMENT As Variant
    CMD_GET_ELEMENT_TAG_NAME As Variant
    CMD_IS_ELEMENT_SELECTED As Variant
    CMD_IS_ELEMENT_ENABLED As Variant
    CMD_IS_ELEMENT_DISPLAYED As Variant
    CMD_GET_ELEMENT_RECT As Variant
    CMD_GET_ELEMENT_ATTRIBUTE As Variant
    CMD_GET_ELEMENT_PROPERTY As Variant
    CMD_GET_ALL_COOKIES As Variant
    CMD_ADD_COOKIE As Variant
    CMD_GET_COOKIE As Variant
    CMD_DELETE_ALL_COOKIES As Variant
    CMD_DELETE_COOKIE As Variant
    CMD_SWITCH_TO_FRAME As Variant
    CMD_SWITCH_TO_PARENT_FRAME As Variant
    CMD_SWITCH_TO_WINDOW As Variant
    CMD_NEW_WINDOW As Variant
    CMD_CLOSE As Variant
    CMD_GET_ELEMENT_VALUE_OF_CSS_PROPERTY As Variant
    CMD_SET_TIMEOUTS As Variant
    CMD_GET_TIMEOUTS As Variant
    CMD_DISMISS_ALERT As Variant
    CMD_ACCEPT_ALERT As Variant
    CMD_SET_ALERT_TEXT As Variant
    CMD_GET_ALERT_TEXT As Variant
    CMD_CLICK As Variant
    CMD_SET_WINDOW_RECT As Variant
    CMD_GET_WINDOW_RECT As Variant
    CMD_MAXIMIZE_WINDOW As Variant
    CMD_GET_GEOLOCATION As Variant
    CMD_SET_GEOLOCATION As Variant
    CMD_FULLSCREEN_WINDOW As Variant
    CMD_MINIMIZE_WINDOW As Variant
    CMD_SHUTDOWN As Variant
    CMD_PRINT_PAGE As Variant
    CMD_GET_ELEMENT_SHADOW_ROOT As Variant
    CMD_FIND_ELEMENT_FROM_SHADOW_ROOT As Variant
    CMD_FIND_ELEMENTS_FROM_SHADOW_ROOT As Variant
    CMD_GET_ELEMENT_ARIA_ROLE As Variant
    CMD_GET_ELEMENT_ARIA_LABEL As Variant
    CMD_EXECUTE_CDP_COMMAND As Variant
    CMD_SCREENSHOT_FULL As Variant
    CMD_SCREENSHOT_FULL_FF As Variant
    CMD_INSTALL_ADDON_FF As Variant
End Type

Private tCMD As typCMD

Public Enum By
    ID = 0
    TagName = 1
    ClassName = 2
    Name = 3
    CssSelector = 4
    XPath = 5
    LinkText = 6
    PartialLinkText = 7
End Enum

Public Enum ScrollIntoViewOptions_speed
    jump_smooth = 1
    jump_instant = 2
    jump_auto = 3
End Enum

Public Enum ScrollIntoViewOptions_alignment
    align_start = 1
    align_center = 2
    align_end = 3
    align_nearest = 4
End Enum

Public Enum svbaWindowType
    svbaWindow = 0
    svbaTab = 1
End Enum

Private Sub Class_Initialize()
    Dim oShell As New Shell32.Shell
    Dim iniFilePath As String
    initCommands

    'attempt to read global variable values from optional settings file - if not successful,
    'then assign a system default value (last input parameter of ReadIniFileEntry)
    iniFilePath = getFullLocalPath(thisLibFolderPath, , True) & "\SeleniumVBA.ini"
    
    Me.CommandWindowStyle = enumTextToValue(readIniFileEntry(iniFilePath, "GENERAL", "command_window_style", vbHide))
    Me.DefaultDriverFolder = readIniFileEntry(iniFilePath, "GENERAL", "driver_location_folder", oShell.Namespace("shell:Downloads").Self.Path)
    
    defaultIOFolder_ = readIniFileEntry(iniFilePath, "GENERAL", "default_io_folder", vbNullString)
    
    checkDriverBrowserVersionAlignment = readIniFileEntry(iniFilePath, "AUTO-DRIVER-UPDATE", "auto_detect_and_update", True)
    minDriverBrowserCompatibilityLevel = enumTextToValue(readIniFileEntry(iniFilePath, "AUTO-DRIVER-UPDATE", "min_compat_level", svbaBuildMajor))

    preloadChromeCapabilitiesFilePath = readIniFileEntry(iniFilePath, "CHROME", "preload_capabilities_file_path", vbNullString)
    preloadEdgeCapabilitiesFilePath = readIniFileEntry(iniFilePath, "EDGE", "preload_capabilities_file_path", vbNullString)
    preloadFirefoxCapabilitiesFilePath = readIniFileEntry(iniFilePath, "FIREFOX", "preload_capabilities_file_path", vbNullString)
    
    driverDefaultPortChrome = CLng(readIniFileEntry(iniFilePath, "CHROME", "local_host_port", 9515))
    driverDefaultPortEdge = CLng(readIniFileEntry(iniFilePath, "EDGE", "local_host_port", 9516))
    driverDefaultPortFirefox = CLng(readIniFileEntry(iniFilePath, "FIREFOX", "local_host_port", 4444))
    
    curImplicitWait = CLng(readIniFileEntry(iniFilePath, "GENERAL", "implicit_wait", sysImplicitWait))
    curScriptTimeout = CLng(readIniFileEntry(iniFilePath, "GENERAL", "script_timeout", sysScriptTimeout))
    curPageLoadTimeout = CLng(readIniFileEntry(iniFilePath, "GENERAL", "page_load_timeout", sysPageLoadTimeout))
End Sub

Private Sub initCommands()
    With tCMD
        .CMD_STATUS = Array("GET", "/status")
        .CMD_NEW_SESSION = Array("POST", "/session")
        .CMD_GET_ALL_SESSIONS = Array("GET", "/sessions")
        .CMD_QUIT = Array("DELETE", "/session/$sessionId")
        .CMD_GET_CURRENT_WINDOW_HANDLE = Array("GET", "/session/$sessionId/window")
        .CMD_GET_WINDOW_HANDLES = Array("GET", "/session/$sessionId/window/handles")
        .CMD_GET = Array("POST", "/session/$sessionId/url")
        .CMD_GO_FORWARD = Array("POST", "/session/$sessionId/forward")
        .CMD_GO_BACK = Array("POST", "/session/$sessionId/back")
        .CMD_REFRESH = Array("POST", "/session/$sessionId/refresh")
        .CMD_EXECUTE_SCRIPT = Array("POST", "/session/$sessionId/execute/sync")
        .CMD_EXECUTE_SCRIPT_ASYNC = Array("POST", "/session/$sessionId/execute/async")
        .CMD_GET_CURRENT_URL = Array("GET", "/session/$sessionId/url")
        .CMD_GET_TITLE = Array("GET", "/session/$sessionId/title")
        .CMD_GET_PAGE_SOURCE = Array("GET", "/session/$sessionId/source")
        .CMD_SCREENSHOT = Array("GET", "/session/$sessionId/screenshot")
        .CMD_ELEMENT_SCREENSHOT = Array("GET", "/session/$sessionId/element/$id/screenshot")
        .CMD_FIND_ELEMENT = Array("POST", "/session/$sessionId/element")
        .CMD_FIND_ELEMENTS = Array("POST", "/session/$sessionId/elements")
        .CMD_GET_ACTIVE_ELEMENT = Array("GET", "/session/$sessionId/element/active")
        .CMD_FIND_ELEMENT_FROM_ELEMENT = Array("POST", "/session/$sessionId/element/$id/element")
        .CMD_FIND_ELEMENTS_FROM_ELEMENT = Array("POST", "/session/$sessionId/element/$id/elements")
        .CMD_CLICK_ELEMENT = Array("POST", "/session/$sessionId/element/$id/click")
        .CMD_CLEAR_ELEMENT = Array("POST", "/session/$sessionId/element/$id/clear")
        .CMD_CLEAR_ACTIONS = Array("DELETE", "/session/$sessionId/actions")
        .CMD_GET_ELEMENT_TEXT = Array("GET", "/session/$sessionId/element/$id/text")
        .CMD_SEND_KEYS_TO_ELEMENT = Array("POST", "/session/$sessionId/element/$id/value")
        .CMD_GET_ELEMENT_TAG_NAME = Array("GET", "/session/$sessionId/element/$id/name")
        .CMD_IS_ELEMENT_SELECTED = Array("GET", "/session/$sessionId/element/$id/selected")
        .CMD_IS_ELEMENT_ENABLED = Array("GET", "/session/$sessionId/element/$id/enabled")
        .CMD_IS_ELEMENT_DISPLAYED = Array("GET", "/session/$sessionId/element/$id/displayed")
        .CMD_GET_ELEMENT_RECT = Array("GET", "/session/$sessionId/element/$id/rect")
        .CMD_GET_ELEMENT_ATTRIBUTE = Array("GET", "/session/$sessionId/element/$id/attribute/$name")
        .CMD_GET_ELEMENT_PROPERTY = Array("GET", "/session/$sessionId/element/$id/property/$name")
        .CMD_GET_ALL_COOKIES = Array("GET", "/session/$sessionId/cookie")
        .CMD_ADD_COOKIE = Array("POST", "/session/$sessionId/cookie")
        .CMD_GET_COOKIE = Array("GET", "/session/$sessionId/cookie/$name")
        .CMD_DELETE_ALL_COOKIES = Array("DELETE", "/session/$sessionId/cookie")
        .CMD_DELETE_COOKIE = Array("DELETE", "/session/$sessionId/cookie/$name")
        .CMD_SWITCH_TO_FRAME = Array("POST", "/session/$sessionId/frame")
        .CMD_SWITCH_TO_PARENT_FRAME = Array("POST", "/session/$sessionId/frame/parent")
        .CMD_SWITCH_TO_WINDOW = Array("POST", "/session/$sessionId/window")
        .CMD_NEW_WINDOW = Array("POST", "/session/$sessionId/window/new")
        .CMD_CLOSE = Array("DELETE", "/session/$sessionId/window")
        .CMD_GET_ELEMENT_VALUE_OF_CSS_PROPERTY = Array("GET", "/session/$sessionId/element/$id/css/$name")
        .CMD_SET_TIMEOUTS = Array("POST", "/session/$sessionId/timeouts")
        .CMD_GET_TIMEOUTS = Array("GET", "/session/$sessionId/timeouts")
        .CMD_DISMISS_ALERT = Array("POST", "/session/$sessionId/alert/dismiss")
        .CMD_ACCEPT_ALERT = Array("POST", "/session/$sessionId/alert/accept")
        .CMD_SET_ALERT_TEXT = Array("POST", "/session/$sessionId/alert/text")
        .CMD_GET_ALERT_TEXT = Array("GET", "/session/$sessionId/alert/text")
        .CMD_CLICK = Array("POST", "/session/$sessionId/click")
        .CMD_SET_WINDOW_RECT = Array("POST", "/session/$sessionId/window/rect")
        .CMD_GET_WINDOW_RECT = Array("GET", "/session/$sessionId/window/rect")
        .CMD_MAXIMIZE_WINDOW = Array("POST", "/session/$sessionId/window/maximize")
        .CMD_GET_GEOLOCATION = Array("GET", "/session/$sessionId/location")
        .CMD_SET_GEOLOCATION = Array("POST", "/session/$sessionId/location")
        .CMD_FULLSCREEN_WINDOW = Array("POST", "/session/$sessionId/window/fullscreen")
        .CMD_MINIMIZE_WINDOW = Array("POST", "/session/$sessionId/window/minimize")
        .CMD_SHUTDOWN = Array("GET", "/shutdown")
        .CMD_PRINT_PAGE = Array("POST", "/session/$sessionId/print")
        .CMD_GET_ELEMENT_SHADOW_ROOT = Array("GET", "/session/$sessionId/element/$id/shadow")
        .CMD_FIND_ELEMENT_FROM_SHADOW_ROOT = Array("POST", "/session/$sessionId/shadow/$sid/element")
        .CMD_FIND_ELEMENTS_FROM_SHADOW_ROOT = Array("POST", "/session/$sessionId/shadow/$sid/elements")
        .CMD_GET_ELEMENT_ARIA_ROLE = Array("GET", "/session/$sessionId/element/$id/computedrole")
        .CMD_GET_ELEMENT_ARIA_LABEL = Array("GET", "/session/$sessionId/element/$id/computedlabel")
        .CMD_EXECUTE_CDP_COMMAND = Array("POST", "/session/$sessionId/$service/cdp/execute")
        .CMD_SCREENSHOT_FULL = Array("GET", "/session/$sessionId/screenshot/full")
        .CMD_SCREENSHOT_FULL_FF = Array("GET", "/session/$sessionId/moz/screenshot/full")
        .CMD_INSTALL_ADDON_FF = Array("POST", "/session/$sessionId/moz/addon/install")
    End With
End Sub

'@Description("Set the driver command window display mode - defaults to vbHide")
Public Property Let CommandWindowStyle(ByVal style As VbAppWinStyle)
Attribute CommandWindowStyle.VB_Description = "Set the driver command window display mode - defaults to vbHide"
    appWinStyle = style
End Property

Friend Property Get CommandWindowStyle() As VbAppWinStyle
    CommandWindowStyle = appWinStyle
End Property

'@Description("Start an Edge driver")
Public Sub StartEdge(Optional ByVal driverPath As String = "msedgedriver.exe", Optional ByVal localHostPort As Long, Optional ByVal enableLogging As Boolean = False, Optional ByVal logFilePath As String = ".\edge.log")
Attribute StartEdge.VB_Description = "Start an Edge driver"
    If localHostPort = 0 Then localHostPort = driverDefaultPortEdge
    start svbaBrowser.Edge, driverPath, localHostPort, enableLogging, logFilePath
End Sub

'@Description("Start a Chrome driver")
Public Sub StartChrome(Optional ByVal driverPath As String = "chromedriver.exe", Optional ByVal localHostPort As Long, Optional ByVal enableLogging As Boolean = False, Optional ByVal logFilePath As String = ".\chrome.log")
Attribute StartChrome.VB_Description = "Start a Chrome driver"
    If localHostPort = 0 Then localHostPort = driverDefaultPortChrome
    start svbaBrowser.Chrome, driverPath, localHostPort, enableLogging, logFilePath
End Sub

'@Description("Start a Firefox driver")
Public Sub StartFirefox(Optional ByVal driverPath As String = "geckodriver.exe", Optional ByVal localHostPort As Long, Optional ByVal enableLogging As Boolean = False, Optional ByVal logFilePath As String = ".\firefox.log")
Attribute StartFirefox.VB_Description = "Start a Firefox driver"
    If localHostPort = 0 Then localHostPort = driverDefaultPortFirefox
    start svbaBrowser.Firefox, driverPath, localHostPort, enableLogging, logFilePath
End Sub

Private Sub start(ByVal browser As svbaBrowser, ByVal driverPath As String, ByVal localHostPort As Long, ByVal enableLogging As Boolean, ByVal logFilePath As String)
    Dim fso As New FileSystemObject, serviceArgs As String, commandStr As String
    
    browser_ = browser
    
    If browser_ = svbaBrowser.Firefox Then
        'for firefox, if previous session is still open on same port, then will get "Session is already started"
        'on OpenBrowser so kill all driver instances on the assigned port
        'could use KillDriver on Chrome/Edge too, but since they support multi-sessions on same port, this will eliminate
        'that functionality if important
        killDriver browser_, localHostPort
    End If
    
    driverPath = WebShared.getFullLocalPath(driverPath, defaultDriverFolder_, True)

    If checkDriverBrowserVersionAlignment Then
        Dim mngr As New WebDriverManager
        'it's important to run these in silent mode so that if there is a problem, we don't get in the way of automation activity
        mngr.AlignDriverWithBrowser browser_, driverPath, minDriverBrowserCompatibilityLevel, True
    End If
    
    If Not fso.FileExists(driverPath) Then
        Err.Raise 1, "WebDriver", "Could not find Selenium WebDriver at :" & vbNewLine & vbNewLine & driverPath & vbNewLine & vbNewLine & "Either manually install the driver or let WebDriverManager class install"
    End If
    
    commandStr = vbNullString: serviceArgs = vbNullString

    If enableLogging Then
        logFilePath = ResolvePath(logFilePath, False)
        Select Case browser_
        Case svbaBrowser.Edge, svbaBrowser.Chrome
            serviceArgs = " --verbose --log-path=" & Chr$(34) & logFilePath & Chr$(34)
        Case svbaBrowser.Firefox
            'https://firefox-source-docs.mozilla.org/testing/geckodriver/TraceLogs.html
            'apparently firefox does not support command line argument for specifying log file path
            'so using cmd.exe to redirect log from console window
            'WARNING: this option could crash host app with MWB AV real-time protection
            serviceArgs = " -vv"" > " & Replace$(logFilePath, " ", "^ ") 'need to escape spaces in log path
            commandStr = Chr$(34) & Environ("comspec") & Chr$(34) & " /c " & """"
        End Select
    End If
    
    commandStr = commandStr & Chr$(34) & driverPath & Chr$(34) & " --port=" & localHostPort & serviceArgs
    
    processID = Shell(commandStr, appWinStyle)

    If processID = 0 Then Err.Raise 1, "WebDriver", "Failed in starting Selenium WebDriver." & vbNewLine & "WebDriver path: " & commandStr
    
    'store WebDriver url value for later use
    driverUrl_ = "http://localhost:" & localHostPort
End Sub

'@Description("Shuts down all driver instances attached to this driver's port")
Public Sub Shutdown()
Attribute Shutdown.VB_Description = "Shuts down all driver instances attached to this driver's port"
    'this will shut down all WebDriver instances using this driver's assigned port
    'which can be a good thing if there are multiple "rogue" instances lurking
    
    Select Case browser_
    Case svbaBrowser.Edge, svbaBrowser.Chrome
        'this will shutdown driver and session - equivalent to CloseBrowser and kill driver process
        'see "detach" option for chrome/edge to affect this behavior
        execute tCMD.CMD_SHUTDOWN
    Case svbaBrowser.Firefox
        'firefox does not recognize shutdown command, so need to roll our own...
        'exit as gracefully as possible - first be sure user closed the browser, and if not, then let's do it here
        If sessionId_ <> vbNullString Then CloseBrowser
        taskKillByPid processID
    End Select
    
    'need to set this global used by Highlight to nothing or else WebDriver class' terminate event may not fire
    Set lastElems = Nothing
End Sub

'@Description("Opens browser instance with specified capabilities")
Public Sub OpenBrowser(Optional caps As WebCapabilities, Optional ByVal invisible As Boolean = False, Optional ByVal incognito As Boolean = False, Optional capabilitiesFilePath As String = vbNullString)
Attribute OpenBrowser.VB_Description = "Opens browser instance with specified capabilities"
    Dim resp As Dictionary
    
    If sessionId_ <> vbNullString Then
        Err.Raise 1, "WebDriver", "Only one OpenBrowser command per WebDriver instance is allowed! Use CloseBrowser before another OpenBrowser to fix this."
    End If
    
    If caps Is Nothing Then
        'need to initialize one
        If capabilitiesFilePath <> vbNullString Then
            'user created capabilities from file
            Set caps = CreateCapabilities(initializeFromSettingsFile:=False)
            caps.LoadFromFile capabilitiesFilePath
        Else
            'create from scratch, but then initialize from settings file if applicable
            Set caps = CreateCapabilities(initializeFromSettingsFile:=True)
        End If
    End If
    
    If invisible Then caps.RunInvisible
    If incognito Then caps.RunIncognito
    
    DoEvents 'this is needed to prevent intermittent error if command window is not hidden or minimized
    
    Set resp = execute(tCMD.CMD_NEW_SESSION, params("capabilities", caps.Dictionary), False, 20000)("value")

    If resp.Exists("error") Then
        Select Case resp("error")
        Case "The operation timed out"
            Err.Raise resp("errorNumber"), , "Timeout in setting browser capabilities." & vbNewLine & vbNewLine _
                & "If you're trying to attach WebDriver to an existing instance of your Chrome/Edge browser," _
                & "restart your browser process(es) by adding command line argument " _
                & """--remote-debugging-port=9222"" (or different port number)", Err.HelpFile, Err.HelpContext
        Case Else
            Err.Raise resp("errorNumber"), , resp("message")
        End Select
    End If
    
    sessionId_ = resp("sessionId")
    
    'set timeouts if different from sys defaults
    If curImplicitWait <> sysImplicitWait Then ImplicitMaxWait = curImplicitWait
    If curScriptTimeout <> sysScriptTimeout Then ScriptTimeout = curScriptTimeout
    If curPageLoadTimeout <> sysPageLoadTimeout Then PageLoadTimeout = curPageLoadTimeout
End Sub

'@Description("Closes browser without terminating driver instance")
Public Sub CloseBrowser()
Attribute CloseBrowser.VB_Description = "Closes browser without terminating driver instance"
    execute tCMD.CMD_QUIT
    sessionId_ = vbNullString
End Sub

'@Description("Navigates browser to a specified webpage and returns true if no timeout or other error")
Public Function NavigateTo(ByVal Url As String, Optional ByVal timeOutms As Long = -1, Optional ByVal raiseError As Boolean = True) As Boolean
Attribute NavigateTo.VB_Description = "Navigates browser to a specified webpage and returns true if no timeout or other error"
    Dim data As New Dictionary
    Dim resp As Dictionary
    Dim savTimeOutms As Long
    
    data.Add "url", Url
    
    If timeOutms <> -1 Then
        savTimeOutms = curPageLoadTimeout
        If savTimeOutms <> timeOutms Then PageLoadTimeout = timeOutms
    End If
    
    Set resp = execute(tCMD.CMD_GET, data, raiseError)

    If timeOutms <> -1 And timeOutms <> savTimeOutms Then PageLoadTimeout = savTimeOutms
    
    If isResponseError(resp) Then
        NavigateTo = False
        Debug.Print getResponseErrorMessage(resp)
    Else
        NavigateTo = True
    End If
End Function

'@Description("Navigates browser to an html file of the specified file path")
Public Function NavigateToFile(ByVal htmlFilePath As String, Optional ByVal timeOutms As Long = -1, Optional ByVal raiseError As Boolean = True) As Boolean
Attribute NavigateToFile.VB_Description = "Navigates browser to an html file of the specified file path"
    'input file must have html extension to be interpreted as a webpage
    'NavigateTo (tCMD.CMD_GET) will automatically discern whether the input is a file or url, even without the 'file:///'
    'So the only functional value of this method is to handle relative paths!
    Dim fso As New FileSystemObject
    
    htmlFilePath = ResolvePath(htmlFilePath, True)
    
    If Not fso.FileExists(htmlFilePath) Then
        Err.Raise 53, , "Error in NavigateToFile method: File not found"
        NavigateToFile = False
        Exit Function
    End If
    
    NavigateToFile = NavigateTo("file:///" & htmlFilePath, timeOutms, raiseError)
End Function

'@Description("Navigates browser to page represented by the html document string provided")
Public Function NavigateToString(ByVal html As String, Optional ByVal timeOutms As Long = -1, Optional ByVal raiseError As Boolean = True) As Boolean
Attribute NavigateToString.VB_Description = "Navigates browser to page represented by the html document string provided"
    Dim dataUrl As String
    dataUrl = ExecuteScript(getScript("HTMLToData.js"), html)
    NavigateToString = NavigateTo(dataUrl, timeOutms, raiseError)
End Function

'@Description("Finds the first element for a given selector and value")
Public Function FindElement(by_ As By, ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute FindElement.VB_Description = "Finds the first element for a given selector and value"
    Dim data As Dictionary
    Dim vCMD As Variant
    Dim elem As New WebElement
    Set data = toSelector(by_, val)
    If Not parentElement Is Nothing Then
        data.Add "id", parentElement.elementId
        vCMD = tCMD.CMD_FIND_ELEMENT_FROM_ELEMENT
    Else
        vCMD = tCMD.CMD_FIND_ELEMENT
    End If

    Set elem = toWebElement(execute(vCMD, data)("value")(ELEMENT_KEY))
    
    If Not setHightlightFoundElems_Settings Is Nothing Then setHightlightFoundElems_exec elem
    
    Set FindElement = elem
End Function

'@Description("Finds all elements that satisfy the specified selector and value")
Public Function FindElements(by_ As By, ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute FindElements.VB_Description = "Finds all elements that satisfy the specified selector and value"
    Dim data As Dictionary
    Dim i As Long
    Dim vCMD As Variant
    Dim elements As Collection
    Dim elems As New WebElements
    
    Set data = toSelector(by_, val)
    
    If Not parentElement Is Nothing Then
        data.Add "id", parentElement.elementId
        vCMD = tCMD.CMD_FIND_ELEMENTS_FROM_ELEMENT
    Else
        vCMD = tCMD.CMD_FIND_ELEMENTS
    End If
    
    Set elements = execute(vCMD, data)("value")
    
    For i = 1 To elements.Count
        elems.Add toWebElement(elements(i)(ELEMENT_KEY))
    Next

    If Not setHightlightFoundElems_Settings Is Nothing Then setHightlightFoundElems_exec elems
    
    Set FindElements = elems
End Function

Private Sub setHightlightFoundElems_exec(elementOrElements As Object)
    With setHightlightFoundElems_Settings
        Select Case TypeName(elementOrElements)
            Case "WebElement"
                SetHighlight True, elementOrElements, .Item(1), .Item(2), .Item(3)
            Case "WebElements"
                SetHighlight True, elementOrElements, .Item(4), .Item(5), .Item(6)
        End Select
    End With
End Sub

Private Function toSelector(by_ As By, ByVal val As String) As Dictionary
    Dim data As New Dictionary
    
    Select Case by_
    Case By.ID
        data.Add "using", "css selector"
        data.Add "value", "[id=""" & val & """]"
    Case By.TagName
        data.Add "using", "css selector"
        data.Add "value", val
    Case By.ClassName
        data.Add "using", "css selector"
        data.Add "value", "." & val
    Case By.Name
        data.Add "using", "css selector"
        data.Add "value", "[name=""" & val & """]"
    Case By.CssSelector
        data.Add "using", "css selector"
        data.Add "value", val
    Case By.XPath
        data.Add "using", "xpath"
        data.Add "value", val
    Case By.LinkText
        data.Add "using", "link text"
        data.Add "value", val
    Case By.PartialLinkText
        data.Add "using", "partial link text"
        data.Add "value", val
    Case Else
        data.Add "using", "css selector"
        data.Add "value", val
    End Select
    
    Set toSelector = data
End Function

'@Description("Finds the first element by the specified id value")
Public Function FindElementByID(ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute FindElementByID.VB_Description = "Finds the first element by the specified id value"
    Set FindElementByID = FindElement(By.ID, val, parentElement)
End Function

'@Description("Finds the first element by the specified tag name value")
Public Function FindElementByTagName(ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute FindElementByTagName.VB_Description = "Finds the first element by the specified tag name value"
    Set FindElementByTagName = FindElement(By.TagName, val, parentElement)
End Function

'@Description("Finds the first element by the specified class name value")
Public Function FindElementByClassName(ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute FindElementByClassName.VB_Description = "Finds the first element by the specified class name value"
    Set FindElementByClassName = FindElement(By.ClassName, val, parentElement)
End Function

'@Description("Finds the first element by the specified css selector value")
Public Function FindElementByCssSelector(ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute FindElementByCssSelector.VB_Description = "Finds the first element by the specified css selector value"
    Set FindElementByCssSelector = FindElement(By.CssSelector, val, parentElement)
End Function

'@Description("Finds the first element by the specified css selector value")
Public Function QuerySelector(ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute QuerySelector.VB_Description = "Finds the first element by the specified css selector value"
    Set QuerySelector = FindElement(By.CssSelector, val, parentElement)
End Function

'@Description("Finds the first element by the specified link text value")
Public Function FindElementByLinkText(ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute FindElementByLinkText.VB_Description = "Finds the first element by the specified link text value"
    Set FindElementByLinkText = FindElement(By.LinkText, val, parentElement)
End Function

'@Description("Finds the first element by the specified name value")
Public Function FindElementByName(ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute FindElementByName.VB_Description = "Finds the first element by the specified name value"
    Set FindElementByName = FindElement(By.Name, val, parentElement)
End Function

'@Description("Finds the first element by the specified partial link text value")
Public Function FindElementByPartialLinkText(ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute FindElementByPartialLinkText.VB_Description = "Finds the first element by the specified partial link text value"
    Set FindElementByPartialLinkText = FindElement(By.PartialLinkText, val, parentElement)
End Function

'@Description("Finds the first element by the specified xpath query value")
Public Function FindElementByXPath(ByVal val As String, Optional parentElement As WebElement) As WebElement
Attribute FindElementByXPath.VB_Description = "Finds the first element by the specified xpath query value"
    Set FindElementByXPath = FindElement(By.XPath, val, parentElement)
End Function

'@Description("Finds all elements that satisfy the specified xpath query value")
Public Function FindElementsByXPath(ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute FindElementsByXPath.VB_Description = "Finds all elements that satisfy the specified xpath query value"
    Set FindElementsByXPath = FindElements(By.XPath, val, parentElement)
End Function

'@Description("Finds all elements that satisfy the specified id value")
Public Function FindElementsByID(ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute FindElementsByID.VB_Description = "Finds all elements that satisfy the specified id value"
    Set FindElementsByID = FindElements(By.ID, val, parentElement)
End Function

'@Description("Finds all elements that satisfy the specified tag name value")
Public Function FindElementsByTagName(ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute FindElementsByTagName.VB_Description = "Finds all elements that satisfy the specified tag name value"
    Set FindElementsByTagName = FindElements(By.TagName, val, parentElement)
End Function

'@Description("Finds all elements that satisfy the specified class name value")
Public Function FindElementsByClassName(ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute FindElementsByClassName.VB_Description = "Finds all elements that satisfy the specified class name value"
    Set FindElementsByClassName = FindElements(By.ClassName, val, parentElement)
End Function

'@Description("Finds all elements that satisfy the specified css selector value")
Public Function FindElementsByCssSelector(ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute FindElementsByCssSelector.VB_Description = "Finds all elements that satisfy the specified css selector value"
    Set FindElementsByCssSelector = FindElements(By.CssSelector, val, parentElement)
End Function

'@Description("Finds all elements that satisfy the specified css selector value")
Public Function QuerySelectorAll(ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute QuerySelectorAll.VB_Description = "Finds all elements that satisfy the specified css selector value"
    Set QuerySelectorAll = FindElements(By.CssSelector, val, parentElement)
End Function

'@Description("Finds all elements that satisfy the specified link text value")
Public Function FindElementsByLinkText(ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute FindElementsByLinkText.VB_Description = "Finds all elements that satisfy the specified link text value"
    Set FindElementsByLinkText = FindElements(By.LinkText, val, parentElement)
End Function

'@Description("Finds all elements that satisfy the specified name value")
Public Function FindElementsByName(ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute FindElementsByName.VB_Description = "Finds all elements that satisfy the specified name value"
    Set FindElementsByName = FindElements(By.Name, val, parentElement)
End Function

'@Description("Finds all elements that satisfy the specified partial link text value")
Public Function FindElementsByPartialLinkText(ByVal val As String, Optional parentElement As WebElement) As WebElements
Attribute FindElementsByPartialLinkText.VB_Description = "Finds all elements that satisfy the specified partial link text value"
    Set FindElementsByPartialLinkText = FindElements(By.PartialLinkText, val, parentElement)
End Function

'@Description("Sends a key sequence to the active or specified OS window - see WebKeyboard class for how to send special keys and chords. This method can optionally run on a delayed separate thread to interact with inline execution-blocking windows")
Public Sub SendKeysToOS(ByVal keyString As String, Optional ByVal timeDelayMS As Long = 0, Optional ByVal windowTitle As String = vbNullString, Optional ByVal runOnSeparateThread As Boolean = False, Optional ByVal waitForWindow As Boolean = False, Optional ByVal maxTimeToWaitMS As Long = 10000)
Attribute SendKeysToOS.VB_Description = "Sends a key sequence to the active or specified OS window - see WebKeyboard class for how to send special keys and chords. This method can optionally run on a delayed separate thread to interact with inline execution-blocking windows"
    'WARNING: this could crash host app with MWB AV real-time protection
    Dim i As Long
    Dim modKeys As Collection
    Dim endMatchPos As Long
    Dim startMatchPos As Long
    Dim matchLength As Long
    Dim endMatchPosLast As Long
    Dim startTime As Long
    Dim winActivated As Boolean
    Dim sendPackage As New Collection
    
    'replace possible escaped special key strings with single (wide) character equivalents
    keyString = unEscapeUnicode(keyString)
    
    'check if we have special keys
    If Not (keyString Like "*[" & ChrW$(&HE000&) & "-" & ChrW$(&HE05D&) & "]*") Then
        'no special keys or chords
        sendPackage.Add keyString
    Else
        'search for chords, parse, and then map the input key sequence(s) to VBA/VBScript SendKeys format
        Dim oRegExp As New VBScript_RegExp_55.RegExp
        Dim matches As VBScript_RegExp_55.MatchCollection
        Dim match As VBScript_RegExp_55.match
        Dim modKeyString As String

        oRegExp.Global = True
        oRegExp.Pattern = "(([" & ChrW$(&HE008&) & "-" & ChrW$(&HE00A&) & "])+)(.*?)" & ChrW$(&HE000&)
        
        Set matches = oRegExp.execute(keyString)
        
        'check if we have cords
        If matches.Count > 0 Then
            'process cords and keys between cords
            endMatchPosLast = 0
            For Each match In matches
                
                startMatchPos = match.FirstIndex + 1 'regexp is zero-based so add 1
                matchLength = match.Length
                endMatchPos = startMatchPos + matchLength - 1
                
                If startMatchPos - 1 > endMatchPosLast Then
                    'non-cord action
                    sendPackage.Add osKeyMapper(Mid$(keyString, endMatchPosLast + 1, startMatchPos - endMatchPosLast - 1))
                End If
                'now do the cord action
                'handle more than one modifier keys
                Set modKeys = splitKeyString(match.SubMatches(0))
                
                modKeyString = vbNullString
                'press the modifiers down
                For i = 1 To modKeys.Count
                    modKeyString = modKeyString & osKeyMapper(modKeys(i))
                Next i
                
                sendPackage.Add modKeyString & "(" & osKeyMapper(match.SubMatches(2)) & ")"
                
                endMatchPosLast = endMatchPos
            Next match
            
            If Len(keyString) > endMatchPosLast Then
                'last non-cord action
                sendPackage.Add osKeyMapper(Mid$(keyString, endMatchPosLast + 1, Len(keyString) - endMatchPosLast))
            End If
        Else 'no cords so send keys in one call
            sendPackage.Add osKeyMapper(keyString)
        End If
    End If
    
    If runOnSeparateThread Then
        'create the vbs script file to run on a separate thread
        Dim vbs As String
        
        vbs = "Set WshShell = WScript.CreateObject(""WScript.Shell"")" & vbCrLf
        
        'wait specified amount of time before executing script
        If timeDelayMS > 0 Then vbs = vbs & "WScript.Sleep " & timeDelayMS & vbCrLf
    
        If windowTitle <> vbNullString Then
            'user is after a particular window
            If waitForWindow Then
                vbs = vbs & "winActivated = WshShell.AppActivate(""" & windowTitle & """, False)" & vbCrLf
                vbs = vbs & "startTime = Timer()" & vbCrLf
                vbs = vbs & "Do Until winActivated" & vbCrLf
                vbs = vbs & vbTab & "WScript.Sleep 100" & vbCrLf
                vbs = vbs & vbTab & "If 1000*(Timer()-startTime) > " & maxTimeToWaitMS & " Then Exit Do" & vbCrLf
                vbs = vbs & vbTab & "winActivated = WshShell.AppActivate(""" & windowTitle & """, False)" & vbCrLf
                vbs = vbs & "Loop" & vbCrLf
            Else
                vbs = vbs & "winActivated = WshShell.AppActivate(""" & windowTitle & """, False)" & vbCrLf
            End If

            vbs = vbs & "If winActivated Then" & vbCrLf
            For i = 1 To sendPackage.Count
                vbs = vbs & vbTab & "WshShell.SendKeys """ & sendPackage(i) & """, False" & vbCrLf
            Next i
            vbs = vbs & "End If" & vbCrLf
        Else
            'no window specified so send keys to active window
            'unfortunately, there seems to be no means in VBScript of making sure we are not sending to the VBIDE
            'in this case so hopefully user is not in debug mode
            For i = 1 To sendPackage.Count
                vbs = vbs & "WshShell.SendKeys """ & sendPackage(i) & """, False" & vbCrLf
            Next i
        End If
        
        'save the vbs string to user's temp file
        Dim filePath As String
        filePath = ResolvePath("%TEMP%\seleniumVBAtmp" & Timer() & ".vbs", False)
        
        SaveStringToFile vbs, filePath
        
        'launch the script!
        Shell "WScript """ & filePath & """ , vbNormalFocus"
        
        'remember to clean up later on WebDriver terminate event
        cleanupTempFiles = True
    Else
        'not running on separate thread, so use native VBA instead of VBSript
        If timeDelayMS > 0 Then WebShared.sleep timeDelayMS
        
        If windowTitle <> vbNullString Then
            If waitForWindow Then
                winActivated = WebShared.AppActivate(windowTitle, False) 'try to activate the window
                startTime = VBA.Timer()
                Do Until winActivated
                    WebShared.sleep 100
                    If 1000 * (Timer() - startTime) > maxTimeToWaitMS Then Exit Do
                    winActivated = WebShared.AppActivate(windowTitle, False) 'try to activate the window
                Loop
            Else
                winActivated = WebShared.AppActivate(windowTitle, False) 'try to activate the window
            End If
            
            If winActivated Then
                For i = 1 To sendPackage.Count
                    VBA.SendKeys sendPackage(i), False  'send the keys
                Next i
            End If
        Else
            'no window specified so send keys to active window
            'but make sure we are not sending to the IDE if debugging!!!!
            If Not IsActiveWindowVBIDE Then
                For i = 1 To sendPackage.Count
                    VBA.SendKeys sendPackage(i), False   'send the keys
                Next i
            End If
        End If
    End If
End Sub

'@Description("Sends a key sequence to the specified element - see WebKeyboard class for how to send special keys and chords")
Public Sub SendKeys(element As WebElement, ByVal keys As String, Optional ByVal clearBeforeTyping As Boolean = False)
Attribute SendKeys.VB_Description = "Sends a key sequence to the specified element - see WebKeyboard class for how to send special keys and chords"
    Dim data As New Dictionary
    
    data.Add "id", element.elementId
    If clearBeforeTyping Then execute tCMD.CMD_CLEAR_ELEMENT, data
    
    'first check to make sure there are no modifiers already keyed-down - if so release
    If modifierKeyStateDown Then
        execute tCMD.CMD_CLEAR_ACTIONS  'remote-end clear key/pointer states
        modifierKeyStateDown = False
    End If
    
    'replace possible escaped special key strings with single (wide) character equivalents
    keys = unEscapeUnicode(keys)

    data("text") = keys
    Set data("value") = splitKeyString(keys)
    execute tCMD.CMD_SEND_KEYS_TO_ELEMENT, data
End Sub

'@Description("Clicks the element. If element not specified, then clicks on the active element")
Public Sub Click(Optional element As WebElement, Optional modifierKeys As String)
Attribute Click.VB_Description = "Clicks the element. If element not specified, then clicks on the active element"
    Dim data As New Dictionary
    
    'first check to make sure there are no modifiers already keyed-down - if so release
    If modifierKeyStateDown Then
        execute tCMD.CMD_CLEAR_ACTIONS  'remote-end clear key/pointer states
        modifierKeyStateDown = False
    End If
    
    If modifierKeys <> vbNullString Then
        'process modifier keys before the click
        Dim mods As Collection
        Dim i As Long
        Dim actions As WebActionChain
        Set actions = ActionChain
        
        'replace possible escaped special key strings with single (wide) character equivalents
        modifierKeys = unEscapeUnicode(modifierKeys)
        
        Set mods = splitKeyString(modifierKeys)
        For i = 1 To mods.Count
            actions.KeyDown mods(i)
        Next i
        actions.Perform
        
        'remember that we have a key-down state so it can be released later before any call to SendKeys
        '(can't release directly after click in this procedure as it would interfere with possible alert)
        modifierKeyStateDown = True
    End If
    
    If Not element Is Nothing Then
        data.Add "id", element.elementId
    Else
        data.Add "id", GetActiveElement.elementId
    End If
    execute tCMD.CMD_CLICK_ELEMENT, data
End Sub

'@Description("Submits a form element. If element not specified, then clicks on the active form element")
Public Sub Submit(Optional element As WebElement)
Attribute Submit.VB_Description = "Submits a form element. If element not specified, then clicks on the active form element"
    Click element
End Sub

'@Description("Gets the text of the element - set optional visibleOnly to False to return text whether hidden or not")
Public Function GetText(element As WebElement, Optional ByVal visibleOnly As Boolean = True) As String
Attribute GetText.VB_Description = "Gets the text of the element - set optional visibleOnly to False to return text whether hidden or not"
    If visibleOnly Then 'default behavior of W3C GetText
        Dim data As New Dictionary
        data.Add "id", element.elementId
        GetText = execute(tCMD.CMD_GET_ELEMENT_TEXT, data)("value")
    Else 'get the underlying text whether visible or not
        GetText = ExecuteScript("return arguments[0].textContent.replace(/\xA0/g,' ');", element)
    End If
End Function

'@Description("Simulates clicking the back arrow on the browser window")
Public Sub GoBack()
Attribute GoBack.VB_Description = "Simulates clicking the back arrow on the browser window"
    execute tCMD.CMD_GO_BACK
End Sub

'@Description("Simulates clicking the forward arrow on the browser window")
Public Sub GoForward()
Attribute GoForward.VB_Description = "Simulates clicking the forward arrow on the browser window"
    execute tCMD.CMD_GO_FORWARD
End Sub

'@Description("Refreshes the current url")
Public Sub Refresh()
Attribute Refresh.VB_Description = "Refreshes the current url"
    execute tCMD.CMD_REFRESH
End Sub

'@Description("Returns the current url string")
Public Function GetCurrentUrl(Optional ByVal decode As Boolean = False) As String
Attribute GetCurrentUrl.VB_Description = "Returns the current url string"
    Dim encodedUrl As String
    encodedUrl = execute(tCMD.CMD_GET_CURRENT_URL)("value")
    If decode Then
        GetCurrentUrl = decodeUrl(encodedUrl)
    Else
        GetCurrentUrl = encodedUrl
    End If
End Function

'@Description("Returns the active element")
Public Function GetActiveElement() As WebElement
Attribute GetActiveElement.VB_Description = "Returns the active element"
    Dim elem As WebElement
    
    Set elem = toWebElement(execute(tCMD.CMD_GET_ACTIVE_ELEMENT)("value")(ELEMENT_KEY))
    
    If Not setHightlightFoundElems_Settings Is Nothing Then setHightlightFoundElems_exec elem
    
    Set GetActiveElement = elem
End Function

'@Description("Gets the property state of the element, such as the value of an input box - if the property does not exist, then it returns vbNullString")
Public Function GetProperty(ByVal propName As String, element As WebElement) As String
Attribute GetProperty.VB_Description = "Gets the property state of the element, such as the value of an input box - if the property does not exist, then it returns vbNullString"
    'This returns the current state of a DOM node object, such as the value of an input box.
    'If the property does not exist, then this returns vbNullString
    Dim data As New Dictionary, resp As Dictionary
    data.Add "name", propName
    data.Add "id", element.elementId
    
    Set resp = execute(tCMD.CMD_GET_ELEMENT_PROPERTY, data)
    
    If IsNull(resp("value")) Then
        GetProperty = vbNullString
    Else
        GetProperty = resp("value")
    End If
End Function

'@Description("Highlights/unhighlights specified element(s) with color")
Public Sub SetHighlight(ByVal onOffSwitch As Boolean, elementOrElements As Object, _
                Optional ByVal borderSizePx As Byte = 4, Optional ByVal borderColor As VBAcolors = Blue, _
                Optional ByVal backgroundColor As VBAcolors = VBAcolors.Unchanged, _
                Optional ByVal bScrollIntoView As Boolean = True, Optional ByVal unHighlightLast As Boolean = True, _
                Optional ByVal bForgiving_UnHighlight As Boolean = False)
Attribute SetHighlight.VB_Description = "Highlights/unhighlights specified element(s) with color"

    Dim elements As WebElements
    Dim element As WebElement
    
    Set elements = objToWebElements(elementOrElements)

    If onOffSwitch Then
        If lastElems Is Nothing Then Set lastElems = New WebElements
        If SetHighlight_ElemsOrigStyle Is Nothing Then Set SetHighlight_ElemsOrigStyle = New Dictionary

        'handling of last highlighted elements
        If unHighlightLast = True And lastElems.Count > 0 Then
            SetHighlight False, lastElems, bForgiving_UnHighlight:=True
            lastElems.RemoveAll
        End If
        
        For Each element In elements
            If Not lastElems.Exists(element) Then lastElems.Add element
        Next element

        'Create the JS string for the highlighting SetAttribute
        Dim borderColorString As String, backgroundColorString As String
        If (borderSizePx = 0 Or borderColor = VBAcolors.Unchanged) And backgroundColor = VBAcolors.Unchanged Then
            Err.Raise 1, "WebDriver", "Error in SetHighlight method: no border and no background specified. Choose at least one or leave defaults."
        End If
        If borderSizePx > 0 And borderColor <> VBAcolors.Unchanged Then
            borderColorString = "border:" & CStr(borderSizePx) & "px solid " & rgbLongToString(borderColor)
        End If
        If backgroundColor <> VBAcolors.Unchanged Then
            backgroundColorString = "background:" & rgbLongToString(backgroundColor)
        End If
        
        Dim finalString As String
        finalString = IIf(borderColorString <> vbNullString, borderColorString & "; ", vbNullString) & backgroundColorString

        For Each element In elements
            If bScrollIntoView And (element Is elements.Item(1)) Then element.ScrollIntoView
            'Dim maxYcoord As Long
            'maxYcoord = Application.WorksheetFunction.Max(maxYcoord, element.GetRect("y"))

            'store original style of element for future SetUnHighlight
            If Not SetHighlight_ElemsOrigStyle.Exists(element.elementId) Then
                SetHighlight_ElemsOrigStyle.Add element.elementId, element.GetAttribute("style")
            End If

            'highlight element
            element.SetAttribute "style", finalString
        Next
        'draft string (incomplete code) to highlight WebElements by single command:
        'ExecuteScript "arguments[0].setAttribute('style', arguments[1])", elements, finalString
    Else 'if UnHighlight
        For Each element In elements
            If SetHighlight_ElemsOrigStyle.Exists(element.elementId) Then
                If bForgiving_UnHighlight = True Then On Error GoTo errHnd
                element.SetAttribute "style", SetHighlight_ElemsOrigStyle.Item(element.elementId)
                If bForgiving_UnHighlight = True Then On Error GoTo 0
                SetHighlight_ElemsOrigStyle.Remove element.elementId
            End If
        Next
    End If
    Exit Sub
errHnd:
    If Err.Number = 404 Then 'Forgiving only with 404 (Not Found) error types
        Resume Next
    Else
        With Err: Err.Raise .Number, .Source, .Description, .HelpFile, .HelpContext: End With
    End If
End Sub

'@Description("Highlights/unhighlights future found element(s) with color")
Public Sub SetHightlightFoundElems(ByVal onOffSwitch As Boolean, Optional ByVal elemBorderSizePx As Byte = 4, _
                Optional ByVal elemBorderColor As VBAcolors = Blue, Optional ByVal elemBackgroundColor As VBAcolors = VBAcolors.Unchanged, _
                Optional ByVal elemsBorderSizePx As Byte = 4, _
                Optional ByVal elemsBorderColor As VBAcolors = Cyan, Optional ByVal elemsBackgroundColor As VBAcolors = VBAcolors.Unchanged)
Attribute SetHightlightFoundElems.VB_Description = "Highlights/unhighlights future found element(s) with color"
    If onOffSwitch = True Then
        'store border and color settings:
        If setHightlightFoundElems_Settings Is Nothing Then Set setHightlightFoundElems_Settings = New Collection
        With setHightlightFoundElems_Settings
            .Add elemBorderSizePx:  .Add elemBorderColor:  .Add elemBackgroundColor:
            .Add elemsBorderSizePx: .Add elemsBorderColor: .Add elemsBackgroundColor:
        End With
    Else 'when set to False, clear any active Highlight
        If Not lastElems Is Nothing Then
            If lastElems.Count > 0 Then
                Dim elem As WebElement
                For Each elem In lastElems
                    SetHighlight False, elem, bForgiving_UnHighlight:=True
                Next
            End If
        End If
        Set setHightlightFoundElems_Settings = Nothing
    End If
End Sub

'@Description("Returns a boolean indicating if the current element has the specified property")
Public Function HasProperty(ByVal propName As String, element As WebElement) As Boolean
Attribute HasProperty.VB_Description = "Returns a boolean indicating if the current element has the specified property"
    If GetProperty(propName, element) = vbNullString Then HasProperty = False Else HasProperty = True
End Function

'@Description("Returns a boolean indicating if the element has the specified attribute")
Public Function HasAttribute(ByVal attrName As String, element As WebElement) As Boolean
Attribute HasAttribute.VB_Description = "Returns a boolean indicating if the element has the specified attribute"
    If GetAttribute(attrName, element) = vbNullString Then HasAttribute = False Else HasAttribute = True
End Function

'@Description("Gets the specified attribute of the element")
Public Function GetAttribute(ByVal attrName As String, element As WebElement) As String
Attribute GetAttribute.VB_Description = "Gets the specified attribute of the element"
    'This returns pre-defined HTML element attributes. Once the browser parses the html code,
    'then a DOM node object with properties is created.
    'To access the state of a DOM node property - such as an input box value, use GetProperty.
    'If the attribute does not exist, then this returns vbNullString
    Dim data As New Dictionary
    Dim resp As Dictionary
    
    data.Add "id", element.elementId
    data.Add "name", attrName
    
    Set resp = execute(tCMD.CMD_GET_ELEMENT_ATTRIBUTE, data)
    If IsNull(resp("value")) Then
        GetAttribute = vbNullString
    Else
        GetAttribute = resp("value")
    End If
End Function

'@Description("Sets the attribute of the element")
Public Sub SetAttribute(element As WebElement, ByVal attrName As String, ByVal val As String)
Attribute SetAttribute.VB_Description = "Sets the attribute of the element"
    'this sets the value of an html element attribute. Consider SendKeys or Action Chain for more control of user input elements.
    'If the attribute does not exist, then this does not throw an error.
    ExecuteScript "arguments[0].setAttribute('" & attrName & "', arguments[1])", element, val
End Sub

'@Description("Gets the Arial role of the element")
Public Function GetAriaRole(element As WebElement) As String
Attribute GetAriaRole.VB_Description = "Gets the Arial role of the element"
    Dim data As New Dictionary
    Dim resp As Dictionary
    
    data.Add "id", element.elementId
    Set resp = execute(tCMD.CMD_GET_ELEMENT_ARIA_ROLE, data)
    If Not IsNull(resp("value")) Then GetAriaRole = resp("value")
End Function

'@Description("Gets the Arial label of the element")
Public Function GetAriaLabel(element As WebElement) As String
Attribute GetAriaLabel.VB_Description = "Gets the Arial label of the element"
    Dim data As New Dictionary
    Dim resp As Dictionary
    
    data.Add "id", element.elementId
    Set resp = execute(tCMD.CMD_GET_ELEMENT_ARIA_LABEL, data)
    If Not IsNull(resp("value")) Then GetAriaLabel = resp("value")
End Function

'@Description("Gets the tag name of the element")
Public Function GetTagName(element As WebElement) As String
Attribute GetTagName.VB_Description = "Gets the tag name of the element"
    Dim data As New Dictionary
    data.Add "id", element.elementId
    GetTagName = execute(tCMD.CMD_GET_ELEMENT_TAG_NAME, data)("value")
End Function

'@Description("Returns all selected option elements for the specified dropdown element")
Public Function GetAllSelectedOptions(element As WebElement) As WebElements
Attribute GetAllSelectedOptions.VB_Description = "Returns all selected option elements for the specified dropdown element"
    Dim elems As WebElements
    Dim selectedElems As New WebElements
    Dim i As Long

    Set elems = FindElements(By.CssSelector, "option", element)
    For i = 1 To elems.Count
        If IsSelected(elems(i)) Then selectedElems.Add elems(i)
    Next i
    
    Set GetAllSelectedOptions = selectedElems
End Function

'@Description("Returns the first selected option element for the specified dropdown element")
Public Function GetSelectedOption(element As WebElement) As WebElement
Attribute GetSelectedOption.VB_Description = "Returns the first selected option element for the specified dropdown element"
    Dim elems As WebElements
    Dim selectedElem As WebElement
    Dim i As Long

    Set elems = FindElements(By.CssSelector, "option", element)
    For i = 1 To elems.Count
        If IsSelected(elems(i)) Then
            Set selectedElem = elems(i)
            Exit For
        End If
    Next i
    
    Set GetSelectedOption = selectedElem
End Function

'@Description("Deselects the dropdown option element having the specified value attribute")
Public Sub DeSelectByValue(ByVal val As String, element As WebElement)
Attribute DeSelectByValue.VB_Description = "Deselects the dropdown option element having the specified value attribute"
    Dim elem As WebElement

    Set elem = FindElement(By.CssSelector, "option[value =" & """" & val & """" & "]", element)
    If IsSelected(elem) Then elem.Click
End Sub

'@Description("Deselects the dropdown option element having the specified visible text")
Public Sub DeSelectByVisibleText(ByVal text As String, element As WebElement)
Attribute DeSelectByVisibleText.VB_Description = "Deselects the dropdown option element having the specified visible text"
    Dim elem As WebElement
    
    Set elem = FindElement(By.XPath, ".//option[normalize-space(.) = " & """" & text & """" & "]", element)
    If IsSelected(elem) Then elem.Click
End Sub

'@Description("Returns a boolean indicating if the dropdown option element is selected")
Public Function IsSelected(element As WebElement, Optional ByVal maxWaitTimeMS As Long = 0) As Boolean
Attribute IsSelected.VB_Description = "Returns a boolean indicating if the dropdown option element is selected"
    IsSelected = waitForIsCommand(tCMD.CMD_IS_ELEMENT_SELECTED, element, maxWaitTimeMS)
End Function

'@Description("Returns a boolean indicating if the element is a multi-select dropdown")
Public Function IsMultiSelect(selectElement As WebElement) As Boolean
Attribute IsMultiSelect.VB_Description = "Returns a boolean indicating if the element is a multi-select dropdown"
    IsMultiSelect = HasAttribute("multiple", selectElement)
End Function

'@Description("Selects a dropdown option element with the specified value attribute")
Public Sub SelectByValue(ByVal val As String, element As WebElement)
Attribute SelectByValue.VB_Description = "Selects a dropdown option element with the specified value attribute"
    Dim elem As WebElement
    
    Set elem = FindElement(By.TagName, "option[value =" & """" & val & """" & "]", element)
    If Not IsSelected(elem) Then elem.Click
End Sub

'@Description("Selects a dropdown option element with the specified index")
Public Sub SelectByIndex(ByVal index As Long, element As WebElement)
Attribute SelectByIndex.VB_Description = "Selects a dropdown option element with the specified index"
    SetFocus element
    ExecuteScript "arguments[0].options[" & CStr(index - baseDomIdx) & "].selected = true;", element
End Sub

'@Description("Selects a dropdown option element with the specified visible text")
Public Sub SelectByVisibleText(ByVal text As String, element As WebElement)
Attribute SelectByVisibleText.VB_Description = "Selects a dropdown option element with the specified visible text"
    Dim elem As WebElement

    Set elem = FindElement(By.XPath, ".//option[normalize-space(.) = " & """" & text & """" & "]", element)
    If Not IsSelected(elem) Then elem.Click
End Sub

'@Description("Selects all multi-select dropdown option elements")
Public Sub SelectAll(element As WebElement)
Attribute SelectAll.VB_Description = "Selects all multi-select dropdown option elements"
    Dim elems As WebElements
    Dim i As Long
    Set elems = FindElements(By.CssSelector, "option", element)
    SetFocus element
    For i = 1 To elems.Count
        ExecuteScript "arguments[0].options[" & CStr(i - 1) & "].selected = true;", element
    Next i
End Sub

'@Description("Deselects all dropdown option elements")
Public Sub DeSelectAll(element As WebElement)
Attribute DeSelectAll.VB_Description = "Deselects all dropdown option elements"
    Dim elems As WebElements
    Dim i As Long
    Set elems = FindElements(By.CssSelector, "option", element)
    SetFocus element
    For i = 1 To elems.Count
        ExecuteScript "arguments[0].options[" & CStr(i - 1) & "].selected = false;", element
    Next i
End Sub

'@Description("Deselects a dropdown option element with the specified index")
Public Sub DeSelectByIndex(ByVal index As Long, element As WebElement)
Attribute DeSelectByIndex.VB_Description = "Deselects a dropdown option element with the specified index"
    Dim elems As WebElements
    Set elems = FindElements(By.CssSelector, "option", element)
    If IsSelected(elems(index - baseDomIdx + 1)) Then
        ExecuteScript "return arguments[0].selectedIndex = " & CStr(index - baseDomIdx), elems(index - baseDomIdx + 1)
        elems(index - baseDomIdx + 1).Click
    End If
End Sub

'@Description("Executes a java script synchronously")
Public Function ExecuteScript(ByVal script As String, ParamArray argumentList() As Variant) As Variant
Attribute ExecuteScript.VB_Description = "Executes a java script synchronously"
    Dim data As New Dictionary
    Dim resp As Dictionary
    Dim args() As Variant

    data.Add "script", script
    
    'replace WebElement, WebElements, WebShadowRoot object arguments with format needed by WebDriver server
    If UBound(argumentList) >= 0 Then
        args = argumentList
        args = serializeScriptInputs(args)
    End If
    
    data.Add "args", args
    
    Set resp = execute(tCMD.CMD_EXECUTE_SCRIPT, data)
    
    'replace the response representation of an element, a collection of elements, and a shadow root
    'with a WebElement object, a WebElements object, and a WebShadowRoot object, respectively
    If IsObject(resp("value")) Then
        Set ExecuteScript = deserializeScriptResponse(resp("value"))
    Else
        ExecuteScript = resp("value")
    End If
End Function

'@Description("Executes a java script asynchronously")
Public Function ExecuteScriptAsync(ByVal script As String, ParamArray argumentList() As Variant) As Variant
Attribute ExecuteScriptAsync.VB_Description = "Executes a java script asynchronously"
    Dim data As New Dictionary
    Dim resp As Dictionary
    Dim args() As Variant

    data.Add "script", script
    
    'replace WebElement, WebElements, WebShadowRoot object arguments with format needed by WebDriver server
    If UBound(argumentList) >= 0 Then
        args = argumentList
        args = serializeScriptInputs(args)
    End If
    
    data.Add "args", args
    
    Set resp = execute(tCMD.CMD_EXECUTE_SCRIPT_ASYNC, data)
    
    'replace the response representation of an element, a collection of elements, and a shadow root
    'with a WebElement object, a WebElements object, and a WebShadowRoot object, respectively
    If IsObject(resp("value")) Then
        Set ExecuteScriptAsync = deserializeScriptResponse(resp("value"))
    Else
        ExecuteScriptAsync = resp("value")
    End If
End Function

'@Description("Executes a CDP command and returns a dictionary response. Pass command parameters with either a JSON string or a Dictionary object.")
Public Function ExecuteCDP(ByVal command As String, Optional paramsJsonStringOrDictionary As Variant = "{}", Optional ByVal raiseError As Boolean = True, Optional ByVal receiveTimeout As Long = -1) As Dictionary
Attribute ExecuteCDP.VB_Description = "Executes a CDP command and returns a dictionary response. Pass command parameters with either a JSON string or a Dictionary object."
    Dim package As New Dictionary
    Dim params As Dictionary
    
    Select Case TypeName(paramsJsonStringOrDictionary)
    Case "Dictionary"
        Set params = paramsJsonStringOrDictionary
    Case "String"
        Set params = WebJsonConverter.ParseJson(paramsJsonStringOrDictionary)
    Case Else
        Err.Raise 1, "WebDriver", "The ExecuteCDP method requires that argument paramsJsonStringOrDictionary by either a Dictionary object or a JSON string."
    End Select
    
    'load up the send package dictionary
    package.Add "cmd", command
    package.Add "params", params

    Select Case browser_
    Case svbaBrowser.Edge
        package.Add "service", "ms"
    Case svbaBrowser.Chrome
        package.Add "service", "goog"
    Case Else
        Err.Raise 405, "WebDriver", "The ExecuteCDP method can only be used with Edge and Chrome browsers."
    End Select
    
    'execute command and then let caller parse the result, including error if occurs
    Set ExecuteCDP = execute(tCMD.CMD_EXECUTE_CDP_COMMAND, package, raiseError, receiveTimeout)
End Function

'@Description("Sends a command and parameters to the Selenium WebDriver and returns a dictionary response. Arguments (such as sessionId) in the command path must be preceeded by a $ character. If the command has parameters, pass either a JSON string or a Dictionary object.")
Public Function ExecuteCmd(ByVal methodPOSTorGETorDELETE As String, ByVal commandPath As String, Optional paramsJsonStringOrDictionary As Variant = "{}", Optional ByVal raiseError As Boolean = True, Optional ByVal receiveTimeout As Long = -1) As Dictionary
Attribute ExecuteCmd.VB_Description = "Sends a command and parameters to the Selenium WebDriver and returns a dictionary response. Arguments (such as sessionId) in the command path must be preceeded by a $ character. If the command has parameters, pass either a JSON string or a Dictionary object."
    'this is useful for testing as-yet unwrapped WebDriver commands
    Dim parameters As Dictionary
    Dim driverCommand As Variant
    
    Select Case UCase$(methodPOSTorGETorDELETE)
    Case "POST", "GET", "DELETE"
        'do nothing - it's all good
    Case Else
        Err.Raise 1, "WebDriver", "The ExecuteCmd method requires that the method argument be either ""POST"", ""GET"" or ""DELETE""."
    End Select
    
    'qc command path
    commandPath = Replace$(commandPath, ":", "$") 'some languages use ":" to denote a command path argument
    commandPath = Replace$(commandPath, "\", "/") 'make sure using forward slashes in path
    If Left$(commandPath, 1) <> "/" Then commandPath = "/" & commandPath 'and a leading forward slash
    
    'process the parameters
    Select Case TypeName(paramsJsonStringOrDictionary)
    Case "Dictionary"
        Set parameters = paramsJsonStringOrDictionary
    Case "String"
        Set parameters = WebJsonConverter.ParseJson(paramsJsonStringOrDictionary)
    Case Else
        Err.Raise 1, "WebDriver", "The ExecuteCmd method requires that argument paramsJsonStringOrDictionary be either a Dictionary object or a JSON string."
    End Select
    
    driverCommand = Array(methodPOSTorGETorDELETE, commandPath)
    
    'execute command and then let caller parse the result, including error if occurs
    Set ExecuteCmd = execute(driverCommand, parameters, raiseError, receiveTimeout)
End Function

'@Description("Saves a screenshot of the active browser window to a file")
Public Sub SaveScreenshot(Optional ByVal filePath As String = ".\screenshot.png", Optional element As WebElement, Optional ByVal fullScreenShot As Boolean = False)
Attribute SaveScreenshot.VB_Description = "Saves a screenshot of the active browser window to a file"
    Dim pngstr As String
        
    filePath = ResolvePath(filePath, False)
    
    If fullScreenShot Then
        Select Case browser_
        Case svbaBrowser.Chrome, svbaBrowser.Edge
            pngstr = execute(tCMD.CMD_SCREENSHOT_FULL)("value")
        Case svbaBrowser.Firefox
            pngstr = execute(tCMD.CMD_SCREENSHOT_FULL_FF)("value")
        End Select
    Else
        If element Is Nothing Then
            pngstr = execute(tCMD.CMD_SCREENSHOT)("value")
        Else
            Dim data As New Dictionary
            data.Add "id", element.elementId
            pngstr = execute(tCMD.CMD_ELEMENT_SCREENSHOT, data)("value")
        End If
    End If
    
    saveByteArrayToFile decodeBase64(pngstr), filePath
End Sub

'@Description("Prints the current webpage window to a specified pdf file path")
Public Sub PrintToPDF(Optional ByVal filePath As String = ".\printpage.pdf", Optional settings As WebPrintSettings)
Attribute PrintToPDF.VB_Description = "Prints the current webpage window to a specified pdf file path"
    Dim data As New Dictionary
    Dim pdfstr As String
    
    filePath = ResolvePath(filePath, False)
    
    If Not settings Is Nothing Then Set data = settings.ToDictionary
    
    pdfstr = execute(tCMD.CMD_PRINT_PAGE, data)("value")

    saveByteArrayToFile decodeBase64(pdfstr), filePath
End Sub

'@Description("Returns a dictionary containing x, y, width, height, left, top, right, and bottom of the element's rectangle")
Public Function GetRect(element As WebElement) As Dictionary
Attribute GetRect.VB_Description = "Returns a dictionary containing x, y, width, height, left, top, right, and bottom of the element's rectangle"
    Dim data As New Dictionary
    data.Add "id", element.elementId
    Set GetRect = execute(tCMD.CMD_GET_ELEMENT_RECT, data)("value")
    GetRect.Add "top", GetRect.Item("y")
    GetRect.Add "bottom", GetRect.Item("y") + GetRect.Item("height")
    GetRect.Add "left", GetRect.Item("x")
    GetRect.Add "right", GetRect.Item("x") + GetRect.Item("width")
End Function

'@Description("Returns the current webpage source as a string")
Public Function GetPageSource() As String
Attribute GetPageSource.VB_Description = "Returns the current webpage source as a string"
    GetPageSource = execute(tCMD.CMD_GET_PAGE_SOURCE)("value")
End Function

'@Description("Switches focus to the frame element")
Public Sub SwitchToFrame(frameElement As WebElement)
Attribute SwitchToFrame.VB_Description = "Switches focus to the frame element"
    Dim data As New Dictionary
    Dim elem As New Dictionary
    elem.Add ELEMENT_KEY, frameElement.elementId
    data.Add "id", elem
    execute tCMD.CMD_SWITCH_TO_FRAME, data
End Sub

'@Description("Switches focus to the frame indicated by the specified index")
Public Sub SwitchToFrameByIndex(ByVal index As Long)
Attribute SwitchToFrameByIndex.VB_Description = "Switches focus to the frame indicated by the specified index"
    Dim data As New Dictionary
    data.Add "id", index - baseDomIdx
    execute tCMD.CMD_SWITCH_TO_FRAME, data
End Sub

'@Description("Switches focus to the frame of the main document")
Public Sub SwitchToDefaultContent()
Attribute SwitchToDefaultContent.VB_Description = "Switches focus to the frame of the main document"
    Dim data As New Dictionary
    data.Add "id", Null
    execute tCMD.CMD_SWITCH_TO_FRAME, data
End Sub

'@Description("Switches focus to the active frame's parent")
Public Sub SwitchToParentFrame()
Attribute SwitchToParentFrame.VB_Description = "Switches focus to the active frame's parent"
    'if top-level frame then this switches to main document
    execute tCMD.CMD_SWITCH_TO_PARENT_FRAME
End Sub

'@Description("Returns the name of the active frame")
Public Function GetCurrentFrameName() As String
Attribute GetCurrentFrameName.VB_Description = "Returns the name of the active frame"
    GetCurrentFrameName = ExecuteScript("return self.name")
End Function

'@Description("Sets/Gets how long to wait for the element location strategy to complete when locating an element(s)")
Public Property Let ImplicitMaxWait(ByVal milliseconds As Long)
Attribute ImplicitMaxWait.VB_Description = "Sets/Gets how long to wait for the element location strategy to complete when locating an element(s)"
    Dim data As New Dictionary
    data.Add "implicit", milliseconds
    execute tCMD.CMD_SET_TIMEOUTS, data
    curImplicitWait = milliseconds
End Property
Public Property Get ImplicitMaxWait() As Long
    ImplicitMaxWait = execute(tCMD.CMD_GET_TIMEOUTS)("value")("implicit")
End Property

'@Description("Sets/Gets the timeout limit used to interrupt a navigation attempt")
Public Property Let PageLoadTimeout(ByVal milliseconds As Long)
Attribute PageLoadTimeout.VB_Description = "Sets/Gets the timeout limit used to interrupt a navigation attempt"
    Dim data As New Dictionary
    data.Add "pageLoad", milliseconds
    execute tCMD.CMD_SET_TIMEOUTS, data
    curPageLoadTimeout = milliseconds
End Property

Public Property Get PageLoadTimeout() As Long
    PageLoadTimeout = execute(tCMD.CMD_GET_TIMEOUTS)("value")("pageLoad")
End Property

'@Description("Sets/Gets how long to wait to interrupt a script that is being evaluated")
Public Property Let ScriptTimeout(ByVal milliseconds As Long)
Attribute ScriptTimeout.VB_Description = "Sets/Gets how long to wait to interrupt a script that is being evaluated"
    Dim data As New Dictionary
    data.Add "script", milliseconds
    execute tCMD.CMD_SET_TIMEOUTS, data
    curScriptTimeout = milliseconds
End Property

Public Property Get ScriptTimeout() As Long
    ScriptTimeout = execute(tCMD.CMD_GET_TIMEOUTS)("value")("script")
End Property

'@Description("Pauses in-line execution for the specified number of milliseconds")
Public Sub Wait(Optional ByVal milliseconds As Long = 300)
Attribute Wait.VB_Description = "Pauses in-line execution for the specified number of milliseconds"
    WebShared.sleep milliseconds
End Sub

'@Description("Returns a boolean indicating if the element is present. User can optionally set an implicit wait, and obtain a reference to the found element.")
Public Function IsPresent(by_ As By, ByVal val As String, Optional ByVal ImplicitWaitMS As Long = 0, _
                             Optional parentElement As WebElement, Optional ByRef elemFound As WebElement) As Boolean
Attribute IsPresent.VB_Description = "Returns a boolean indicating if the element is present. User can optionally set an implicit wait, and obtain a reference to the found element."
    Dim savTimeout As Long
    Dim resp As Dictionary
    Dim data As Dictionary
    Dim vCMD As Variant
    
    'check if desired implicit wait is different than what's already
    ' set - if not then save what's already set and set a new wait time
    savTimeout = curImplicitWait
    If ImplicitWaitMS <> savTimeout Then ImplicitMaxWait = ImplicitWaitMS
    
    Set data = toSelector(by_, val)
    
    If Not parentElement Is Nothing Then
        data.Add "id", parentElement.elementId
        vCMD = tCMD.CMD_FIND_ELEMENT_FROM_ELEMENT
    Else
        vCMD = tCMD.CMD_FIND_ELEMENT
    End If
    
    Set resp = execute(vCMD, data, False) 'don't raise an error if not present
    If isResponseError(resp) Then
        IsPresent = False
        Set elemFound = Nothing
    Else
        IsPresent = True
        Set elemFound = toWebElement(resp("value")(ELEMENT_KEY))
    End If
    
    'put back the saved implicit wait if needed
    If ImplicitWaitMS <> savTimeout Then ImplicitMaxWait = savTimeout
End Function

'@Description("Returns a boolean indicating if the element is enabled")
Public Function IsEnabled(element As WebElement, Optional ByVal maxWaitTimeMS As Long = 0) As Boolean
Attribute IsEnabled.VB_Description = "Returns a boolean indicating if the element is enabled"
    IsEnabled = waitForIsCommand(tCMD.CMD_IS_ELEMENT_ENABLED, element, maxWaitTimeMS)
End Function

'@Description("Returns a boolean indicating if the element is displayed")
Public Function IsDisplayed(element As WebElement, Optional ByVal maxWaitTimeMS As Long = 0) As Boolean
Attribute IsDisplayed.VB_Description = "Returns a boolean indicating if the element is displayed"
    'see https://www.w3.org/TR/webdriver/#element-displayedness
    IsDisplayed = waitForIsCommand(tCMD.CMD_IS_ELEMENT_DISPLAYED, element, maxWaitTimeMS)
End Function

'@Description("Gets the browser name")
Public Function GetBrowserName() As String
Attribute GetBrowserName.VB_Description = "Gets the browser name"
    GetBrowserName = WebShared.getBrowserNameString(browser_)
End Function

'@Description("Waits for alert to show and then returns a WebAlert object for further handling")
Public Function SwitchToAlert(Optional maxWaitTimeMS As Long = 10000) As WebAlert
Attribute SwitchToAlert.VB_Description = "Waits for alert to show and then returns a WebAlert object for further handling"
    If IsAlertPresent(maxWaitTimeMS) Then
        Set SwitchToAlert = New WebAlert
        Set SwitchToAlert.WebDriver = Me
    Else
        Err.Raise 1, , "Error in SwitchToAlert method: maxWaitTimeMS exceeded without detecting alert"
    End If
End Function

'@Description("Returns a boolean indicating whether an active alert is present")
Public Function IsAlertPresent(Optional maxWaitTimeMS As Long = 0) As Boolean
Attribute IsAlertPresent.VB_Description = "Returns a boolean indicating whether an active alert is present"
    Dim resp As Dictionary
    Dim timeStart As Currency
    Dim timeEnd As Currency
    Dim timeNow As Currency
    
    GetTime timeStart 'in currency
    
    'calculate time to quit in currency based on max time to wait in MS
    timeEnd = timeStart + timeMStoCurrency(Max(maxWaitTimeMS, 0))
    
    Do
        Set resp = execute(tCMD.CMD_GET_ALERT_TEXT, , False)
        If Not isResponseError(resp) Then
            IsAlertPresent = True
            Exit Function
        End If
        
        SleepWinAPI 50 'ms
        DoEvents 'yield to other processes
        GetTime timeNow
    Loop Until timeNow > timeEnd
    
    IsAlertPresent = False
End Function

'@Description("Clears the text field of the element")
Public Function Clear(element As WebElement) As WebElement
Attribute Clear.VB_Description = "Clears the text field of the element"
    Dim data As New Dictionary
    data.Add "id", element.elementId
    execute tCMD.CMD_CLEAR_ELEMENT, data
    Set Clear = element
End Function

'@Description("Gets the shadow root hosted by the element")
Public Function GetShadowRoot(element As WebElement) As WebShadowRoot
Attribute GetShadowRoot.VB_Description = "Gets the shadow root hosted by the element"
    Dim data As New Dictionary
    Dim resp As Dictionary
    data.Add "id", element.elementId
    Set resp = execute(tCMD.CMD_GET_ELEMENT_SHADOW_ROOT, data)
    Set GetShadowRoot = toShadowRoot(resp("value")(SHADOWROOT_KEY))
End Function

'@Description("Gets the specified CSS property of the element")
Public Function GetCSSProperty(ByVal attrName As String, element As WebElement) As String
Attribute GetCSSProperty.VB_Description = "Gets the specified CSS property of the element"
    Dim data As New Dictionary
    data.Add "id", element.elementId
    data.Add "name", attrName
    GetCSSProperty = execute(tCMD.CMD_GET_ELEMENT_VALUE_OF_CSS_PROPERTY, data)("value")
End Function

'@Description("Gets the inner HTML of the element")
Public Function GetInnerHTML(Optional element As WebElement) As String
Attribute GetInnerHTML.VB_Description = "Gets the inner HTML of the element"
    If element Is Nothing Then
        GetInnerHTML = ExecuteScript("return document.documentElement.innerHTML;")
    Else
        GetInnerHTML = ExecuteScript("return arguments[0].innerHTML;", element)
    End If
End Function

'@Description("Gets the outer HTML of the element")
Public Function GetOuterHTML(Optional element As WebElement) As String
Attribute GetOuterHTML.VB_Description = "Gets the outer HTML of the element"
    If element Is Nothing Then
        GetOuterHTML = ExecuteScript("return document.documentElement.outerHTML;")
    Else
        GetOuterHTML = ExecuteScript("return arguments[0].outerHTML;", element)
    End If
End Function

'@Description("Creates a capabilities object - must be performed after initializing the driver using one of the Start* methods")
Public Function CreateCapabilities(Optional ByVal initializeFromSettingsFile As Boolean = True) As WebCapabilities
Attribute CreateCapabilities.VB_Description = "Creates a capabilities object - must be performed after initializing the driver using one of the Start* methods"
    Dim caps As New WebCapabilities
    
    'insure that this function is being called in the correct order
    If browser_ = 0 Or sessionId_ <> vbNullString Then
        Err.Raise 1, "WebDriver", "The CreateCapabilities method must be invoked after the StartEdge or StartChrome Methods, and before OpenBrowser Method."
    End If
    
    'now initialize Capabilities
    caps.initializeFor browser_
    
    Set caps.WebDriver = Me
    
    'set browser-specific capabilities from settings file (if applicable) and some non-optional ones
    Select Case browser_
    Case svbaBrowser.Chrome
        If initializeFromSettingsFile And preloadChromeCapabilitiesFilePath <> vbNullString Then
            caps.LoadFromFile preloadChromeCapabilitiesFilePath
        End If
        'https://stackoverflow.com/questions/78787332/selecting-default-search-engine-is-needed-for-chrome-version-127/78788229#78788229
        caps.AddArguments "--disable-search-engine-choice-screen"
    Case svbaBrowser.Edge
        If initializeFromSettingsFile And preloadEdgeCapabilitiesFilePath <> vbNullString Then
            caps.LoadFromFile preloadEdgeCapabilitiesFilePath
        End If
    Case svbaBrowser.Firefox
        If initializeFromSettingsFile And preloadFirefoxCapabilitiesFilePath <> vbNullString Then
            caps.LoadFromFile preloadFirefoxCapabilitiesFilePath
        End If
    End Select

    Set CreateCapabilities = caps
End Function

'@Description("Creates a cookies object - must be performed after initializing the driver using one of the Start* methods")
Public Function CreateCookies() As WebCookies
Attribute CreateCookies.VB_Description = "Creates a cookies object - must be performed after initializing the driver using one of the Start* methods"
    Dim cookies As New WebCookies
    Set cookies.WebDriver = Me
    Set CreateCookies = cookies
End Function

'@Description("Sets the focus to the specified element")
Public Function SetFocus(element As WebElement, Optional ByVal preventScroll As Boolean = False, Optional ByVal focusVisible As Boolean = False) As WebElement
Attribute SetFocus.VB_Description = "Sets the focus to the specified element"
    ExecuteScript "arguments[0].focus({'preventScroll': arguments[1],'focusVisible': arguments[2]})", element, preventScroll, focusVisible
    Set SetFocus = element
End Function

'@Description("Returns a boolean indicating if the specified element has the focus")
Public Function HasFocus(element As WebElement) As Boolean
Attribute HasFocus.VB_Description = "Returns a boolean indicating if the specified element has the focus"
    Dim actElem As WebElement
    'see https://stackoverflow.com/questions/497094/how-do-i-find-out-which-dom-element-has-the-focus/40873560#40873560
    'get the active element of the current window
    Set actElem = GetActiveElement()
    If actElem.elementId = element.elementId Then
        'check to make sure the document that contains active element has focus
        HasFocus = ExecuteScript("return document.hasFocus();")
    End If
End Function

'@Description("Scrolls the element specified into the visible viewport")
Public Function ScrollIntoView(element As WebElement, _
                    Optional ByVal enSpeed As ScrollIntoViewOptions_speed = jump_auto, _
                    Optional ByVal enAlign_vert As ScrollIntoViewOptions_alignment = align_start, _
                    Optional ByVal enAlign_horiz As ScrollIntoViewOptions_alignment = align_nearest, _
                    Optional ByVal xOffset As Long = 0, Optional ByVal yOffset As Long = 0) As WebElement
Attribute ScrollIntoView.VB_Description = "Scrolls the element specified into the visible viewport"
    Dim optionsList As String
    
    Dim sSpeed As String, sAlign_vert As String, sAlign_horiz As String
    Select Case enSpeed
        Case 0: sSpeed = "auto" 'Default
        Case 1: sSpeed = "smooth"
        Case 2: sSpeed = "instant"
        Case 3: sSpeed = "auto"
    End Select
    Select Case enAlign_vert
        Case 0: sAlign_vert = "start" 'Default
        Case 1: sAlign_vert = "start"
        Case 2: sAlign_vert = "center"
        Case 3: sAlign_vert = "end"
        Case 4: sAlign_vert = "nearest"
    End Select
    Select Case enAlign_horiz
        Case 0: sAlign_horiz = "nearest" 'Default
        Case 1: sAlign_horiz = "start"
        Case 2: sAlign_horiz = "center"
        Case 3: sAlign_horiz = "end"
        Case 4: sAlign_horiz = "nearest"
    End Select
    
    optionsList = "{""behavior"": """ & sSpeed & """, ""block"": """ & sAlign_vert & """, ""inline"": """ & sAlign_horiz & """}"
    
    ExecuteScript getScript("ScrollIntoView.js"), element, optionsList
    
    If xOffset <> 0 Or yOffset <> 0 Then
        Dim container As WebElement
        'get the element's scroll container element
        Set container = ExecuteScript(getScript("GetScrollContainer.js"), element)
        
        container.ScrollBy xOffset, yOffset
    End If

    Set ScrollIntoView = element
End Function

'@Description("Scrolls by an x-y offset in pixels relative to the current scrollable window or element content position")
Public Sub ScrollBy(Optional ByVal xOffset As Long = 0, Optional ByVal yOffset As Long = 0, Optional ByVal enSpeed As ScrollIntoViewOptions_speed = jump_auto, Optional scrollableElem As WebElement)
Attribute ScrollBy.VB_Description = "Scrolls by an x-y offset in pixels relative to the current scrollable window or element content position"
    Dim optionsList As String
    Dim sSpeed As String
    
    Select Case enSpeed
        Case 0: sSpeed = "auto" 'Default
        Case 1: sSpeed = "smooth"
        Case 2: sSpeed = "instant"
        Case 3: sSpeed = "auto"
    End Select
    
    optionsList = "{""top"":" & yOffset & ",""left"":" & xOffset & ",""behavior"": """ & sSpeed & """}"
    
    ExecuteScript getScript("Scroll.js"), IIf(scrollableElem Is Nothing, "''", scrollableElem), "by", optionsList
End Sub

'@Description("Scrolls to an x-y position in pixels relative to the current scrollable window or element content origin")
Public Sub ScrollTo(Optional ByVal x As Long = 0, Optional ByVal y As Long = 0, Optional ByVal enSpeed As ScrollIntoViewOptions_speed = jump_auto, Optional scrollableElem As WebElement)
Attribute ScrollTo.VB_Description = "Scrolls to an x-y position in pixels relative to the current scrollable window or element content origin"
    Dim optionsList As String
    Dim sSpeed As String
    
    Select Case enSpeed
        Case 0: sSpeed = "auto" 'Default
        Case 1: sSpeed = "smooth"
        Case 2: sSpeed = "instant"
        Case 3: sSpeed = "auto"
    End Select
    
    optionsList = "{""top"":" & y & ",""left"":" & x & ",""behavior"": """ & sSpeed & """}"
    
    ExecuteScript getScript("Scroll.js"), IIf(scrollableElem Is Nothing, "''", scrollableElem), "to", optionsList
End Sub

'@Description("Scrolls to the top of current scrollable window or element content")
Public Sub ScrollToTop(Optional ByVal enSpeed As ScrollIntoViewOptions_speed = jump_auto, Optional scrollableElem As WebElement)
Attribute ScrollToTop.VB_Description = "Scrolls to the top of current scrollable window or element content"
    ScrollTo 0, 0, enSpeed, scrollableElem
End Sub

'@Description("Scrolls to the bottom of current scrollable window or element content")
Public Sub ScrollToBottom(Optional ByVal enSpeed As ScrollIntoViewOptions_speed = jump_auto, Optional scrollableElem As WebElement)
Attribute ScrollToBottom.VB_Description = "Scrolls to the bottom of current scrollable window or element content"
    ScrollTo 0, GetScrollHeight(scrollableElem), enSpeed, scrollableElem
End Sub

'@Description("Gets the height of the current scrollable window or element content")
Public Function GetScrollHeight(Optional scrollableElem As WebElement) As Long
Attribute GetScrollHeight.VB_Description = "Gets the height of the current scrollable window or element content"
    If scrollableElem Is Nothing Then
        GetScrollHeight = ExecuteScript("return document.documentElement.scrollHeight;")
    Else
        GetScrollHeight = ExecuteScript("return arguments[0].scrollHeight;", scrollableElem)
    End If
End Function

'@Description("Gets the width of the current scrollable window or element content")
Public Function GetScrollWidth(Optional scrollableElem As WebElement) As Long
Attribute GetScrollWidth.VB_Description = "Gets the width of the current scrollable window or element content"
    If scrollableElem Is Nothing Then
        GetScrollWidth = ExecuteScript("return document.documentElement.scrollWidth;")
    Else
        GetScrollWidth = ExecuteScript("return arguments[0].scrollWidth;", scrollableElem)
    End If
End Function

'@Description("Returns the collection of cookies for the current webpage")
Public Function GetAllCookies() As WebCookies
Attribute GetAllCookies.VB_Description = "Returns the collection of cookies for the current webpage"
    Dim resp As Collection
    Dim cookie As WebCookie
    Dim cookies As WebCookies
    Set resp = execute(tCMD.CMD_GET_ALL_COOKIES)("value")
    Set cookies = Me.CreateCookies
    Dim i As Long
    For i = 1 To resp.Count
        Set cookie = New WebCookie
        If resp(i).Exists("name") Then cookie.Name = resp(i)("name")
        If resp(i).Exists("domain") Then cookie.Domain = resp(i)("domain")
        If resp(i).Exists("expiry") Then cookie.ExpiryUnix = resp(i)("expiry")
        If resp(i).Exists("httpOnly") Then cookie.HttpOnly = resp(i)("httpOnly")
        If resp(i).Exists("sameSite") Then cookie.SameSite = resp(i)("sameSite")
        If resp(i).Exists("secure") Then cookie.Secure = resp(i)("secure")
        If resp(i).Exists("value") Then cookie.Value = resp(i)("value")
        If resp(i).Exists("path") Then cookie.Path = resp(i)("path")
        cookies.Add cookie
    Next i
    Set GetAllCookies = cookies
End Function

'@Description("Returns a cookie having the specified name")
Public Function GetCookie(ByVal cookieName As String) As WebCookie
Attribute GetCookie.VB_Description = "Returns a cookie having the specified name"
    Dim resp As Dictionary
    Dim data As New Dictionary
    Dim cookie As New WebCookie
    data.Add "name", cookieName
    Set resp = execute(tCMD.CMD_GET_COOKIE, data)("value")
    If resp.Exists("name") Then cookie.Name = resp("name")
    If resp.Exists("domain") Then cookie.Domain = resp("domain")
    If resp.Exists("expiry") Then cookie.ExpiryUnix = resp("expiry")
    If resp.Exists("httpOnly") Then cookie.HttpOnly = resp("httpOnly")
    If resp.Exists("sameSite") Then cookie.SameSite = resp("sameSite")
    If resp.Exists("secure") Then cookie.Secure = resp("secure")
    If resp.Exists("value") Then cookie.Value = resp("value")
    If resp.Exists("path") Then cookie.Path = resp("path")
    Set GetCookie = cookie
End Function

'@Description("Deletes a cookie having the specified name")
Public Sub DeleteCookie(ByVal cookieName As String)
Attribute DeleteCookie.VB_Description = "Deletes a cookie having the specified name"
    Dim data As New Dictionary
    data.Add "name", cookieName
    execute tCMD.CMD_DELETE_COOKIE, data
End Sub

'@Description("Sets a cookie object")
Public Sub SetCookie(cookie As WebCookie)
Attribute SetCookie.VB_Description = "Sets a cookie object"
    Dim data As New Dictionary
    Dim saveSetting As Boolean
    If cookie.Name <> vbNullString And cookie.Value <> vbNullString Then
        'value can take a number greater than 15 digits
        'for some unknown reason, Selenium WebDriver does not
        'like a number greater than 15 digits unless it is quoted
        'else will get an error on execute:
        If IsNumeric(cookie.Value) Then
            If Len(cookie.Value) > 15 Then
                If Not (cookie.Value Like Chr$(34) & "*" & Chr$(34)) Then
                    cookie.Value = Chr$(34) & cookie.Value & Chr$(34)
                End If
            End If
        End If
        data.Add "cookie", cookie.ToDictionary
        execute tCMD.CMD_ADD_COOKIE, data
    Else
        Err.Raise 1, , "Error in SetCookie method: cookie Name and Value properties must not be equal to vbNullString"
    End If
End Sub

'@Description("Sets a cookies collection object")
Public Sub SetCookies(cookies As WebCookies)
Attribute SetCookies.VB_Description = "Sets a cookies collection object"
    Dim i As Long
    For i = 1 To cookies.Count
        SetCookie cookies.Item(i)
    Next i
End Sub

'@Description("Deletes all cookies")
Public Sub DeleteAllCookies()
Attribute DeleteAllCookies.VB_Description = "Deletes all cookies"
    execute tCMD.CMD_DELETE_ALL_COOKIES
End Sub

'@Description("Checks if the current url is equal to the specified url")
Public Function IsPageFound(ByVal Url As String) As Boolean
Attribute IsPageFound.VB_Description = "Checks if the current url is equal to the specified url"
    'normalize before compare
    IsPageFound = (LCase$(GetCurrentUrl(decode:=True)) = LCase$(decodeUrl(Url)))
End Function

'@Description("Returns a dictionary holding various info about the session")
Public Function GetSessionsInfo() As Dictionary
Attribute GetSessionsInfo.VB_Description = "Returns a dictionary holding various info about the session"
    'since only one browser per driver is allowed, this will return a collection of one
    'so lets return a more useful dictionary instead
    If browser_ = svbaBrowser.Firefox Then
        Err.Raise 405, "WebDriver", "GetSessionsInfo method not supported for Firefox WebDriver"
    End If
    Dim sessions As Dictionary
    Set sessions = execute(tCMD.CMD_GET_ALL_SESSIONS)
    If sessions("value").Count <> 0 Then
        'there may be more than one (legacy) sessions open - find the current one
        Dim i As Long
        For i = 1 To sessions("value").Count
            If sessions("value")(i)("id") = sessionId_ Then
                Set GetSessionsInfo = sessions("value")(i)
                Exit Function
            End If
        Next i
    End If
    'No valid session currently
    Set GetSessionsInfo = New Dictionary
    GetSessionsInfo.Add "capabilities", New Dictionary
    GetSessionsInfo.Add "id", "no open browser session exists"
End Function

'@Description("Returns a dictionary holding various info about the driver")
Public Function GetDriverStatus() As Dictionary
Attribute GetDriverStatus.VB_Description = "Returns a dictionary holding various info about the driver"
    Set GetDriverStatus = execute(tCMD.CMD_STATUS)("value")
    'DriverVersion = resp("build")("version")
    'DriverVersion = Trim$(Left$(DriverVersion, InStr(DriverVersion, "(") - 1))
    'resp("message") 'gets info "MSEdgeDriver ready for new sessions."
    'resp("os")("name") 'gets info "Windows NT"
    'resp("os")("version") 'gets info "10.0.19042"
    'resp("os")("arch") 'gets info "x86_64"
    'resp("ready")'true or false
End Function

'@Description("Creates an initialized action chain object")
Public Function ActionChain() As WebActionChain
Attribute ActionChain.VB_Description = "Creates an initialized action chain object"
    Set ActionChain = New WebActionChain
    'pass a reference of the driver to each link
    Set ActionChain.WebDriver = Me
    'clear any previous action queue and keyboard/pointer states
    'this needs to be done up front so as not to interfere with Alerts if triggered by action chain
    ActionChain.ResetActions
    modifierKeyStateDown = False
End Function

'@Description("Finds the first element in the shadow root for a given selector and value")
Public Function FindElementFromShadowRoot(by_ As By, ByVal val As String, shadowRoot As WebShadowRoot) As WebElement
Attribute FindElementFromShadowRoot.VB_Description = "Finds the first element in the shadow root for a given selector and value"
    Dim data As Dictionary
    Dim elem As WebElement
    
    Set data = toSelector(by_, val)
    data.Add "sid", shadowRoot.shadowRootId
    Set elem = toWebElement(execute(tCMD.CMD_FIND_ELEMENT_FROM_SHADOW_ROOT, data)("value")(ELEMENT_KEY))
    
    If Not setHightlightFoundElems_Settings Is Nothing Then setHightlightFoundElems_exec elem
    
    Set FindElementFromShadowRoot = elem
End Function

'@Description("Finds all elements in the shadow root for a given selector and value")
Public Function FindElementsFromShadowRoot(by_ As By, ByVal val As String, shadowRoot As WebShadowRoot) As WebElements
Attribute FindElementsFromShadowRoot.VB_Description = "Finds all elements in the shadow root for a given selector and value"
    Dim data As Dictionary
    Dim elements As Collection
    Dim elems As New WebElements
    Dim i As Long
    
    Set data = toSelector(by_, val)
    data.Add "sid", shadowRoot.shadowRootId
    
    Set elements = execute(tCMD.CMD_FIND_ELEMENTS_FROM_SHADOW_ROOT, data)("value")
    
    For i = 1 To elements.Count
        elems.Add toWebElement(elements(i)(ELEMENT_KEY))
    Next i
    
    If Not setHightlightFoundElems_Settings Is Nothing Then setHightlightFoundElems_exec elems
    
    Set FindElementsFromShadowRoot = elems
End Function

'@Description("Uploads the contents of a file to the element")
Public Sub UploadFile(element As WebElement, ByVal filePath As String)
Attribute UploadFile.VB_Description = "Uploads the contents of a file to the element"
    'this is just a special wrapper for sendkeys (upload file mode)
    filePath = ResolvePath(filePath, True)
    SendKeys element, filePath
End Sub

'@Description("Drags and drops the element to the specified target element")
Public Sub DragAndDrop(sourceElement As WebElement, targetElement As WebElement)
Attribute DragAndDrop.VB_Description = "Drags and drops the element to the specified target element"
    ActionChain.DragAndDrop(sourceElement, targetElement).Perform
End Sub

'@Description("Waits until element is displayed (interactable)")
Public Function WaitUntilDisplayed(element As WebElement, Optional ByVal maxWaitTimeMS As Long = 10000) As WebElement
Attribute WaitUntilDisplayed.VB_Description = "Waits until element is displayed (interactable)"
    'see https://www.w3.org/TR/webdriver/#element-displayedness
    Dim timeStart As Currency
    Dim timeEnd As Currency
    Dim timeNow As Currency
    
    GetTime timeStart 'in currency
    
    'calculate time to quit in currency based on max time to wait in MS
    timeEnd = timeStart + timeMStoCurrency(Max(maxWaitTimeMS, 0))
    
    GetTime timeStart
    
    Do
        If element.IsDisplayed Then
            Set WaitUntilDisplayed = element
            Exit Function
        End If
        
        sleep 50  'ms
        GetTime timeNow
    Loop Until timeNow > timeEnd
    
    Err.Raise 1, "WebDriver", "Error in WaitUntilDisplayed method: maximum wait time exceeded while waiting for element to be displayed."
End Function

'@Description("Waits until element is not displayed (not interactable)")
Public Function WaitUntilNotDisplayed(element As WebElement, Optional ByVal maxWaitTimeMS As Long = 10000) As WebElement
Attribute WaitUntilNotDisplayed.VB_Description = "Waits until element is not displayed (not interactable)"
    'see https://www.w3.org/TR/webdriver/#element-displayedness
    Dim timeStart As Currency
    Dim timeEnd As Currency
    Dim timeNow As Currency
    
    GetTime timeStart 'in currency
    
    'calculate time to quit in currency based on max time to wait in MS
    timeEnd = timeStart + timeMStoCurrency(Max(maxWaitTimeMS, 0))
    
    GetTime timeStart
    
    Do
        If Not element.IsDisplayed Then
            Set WaitUntilNotDisplayed = element
            Exit Function
        End If
        
        sleep 50  'ms
        GetTime timeNow
    Loop Until timeNow > timeEnd
    
    Err.Raise 1, "WebDriver", "Error in WaitUntilNotDisplayed method: maximum wait time exceeded while waiting for element to disappear."
End Function

'@Description("Waits until file is finished downloading")
Public Sub WaitForDownload(ByVal filePath As String, Optional ByVal maxWaitTimeMS As Long = 10000)
Attribute WaitForDownload.VB_Description = "Waits until file is finished downloading"
    'adapted from WaitNewFile in https://github.com/florentbr/SeleniumBasic/tree/master/Examples/Excel
    Dim fso As New FileSystemObject
    Dim timeStart As Currency
    Dim timeEnd As Currency
    Dim timeNow As Currency
    
    filePath = ResolvePath(filePath, False)
    
    GetTime timeStart 'in currency
    
    'calculate time to quit in currency based on max time to wait in MS
    timeEnd = timeStart + timeMStoCurrency(Max(maxWaitTimeMS, 0))
    
    'loop until file exists
    Do
        If fso.FileExists(filePath) Then Exit Do
        
        sleep 50  'ms
        GetTime timeNow
        If timeNow > timeEnd Then GoTo MaxTimeExceeded
    Loop
    
    'the file exists but now make sure it is finished writing (closed)
    Do
        If FileClosed(filePath) Then Exit Sub
        
        sleep 50  'ms
        'SleepWinAPI 50 'ms
        'DoEvents 'yield to other processes
        GetTime timeNow
    Loop Until timeNow > timeEnd
    
MaxTimeExceeded:
    Err.Raise 1, "WebDriver", "Error in WaitForDownload method: maximum wait time exceeded while waiting for file download."
End Sub

'@Description("Waits until an element is not present anymore")
Public Sub WaitUntilNotPresent(by_ As By, ByVal val As String, Optional ByVal maxWaitTimeMS As Long = 10000)
Attribute WaitUntilNotPresent.VB_Description = "Waits until an element is not present anymore"
    Dim timeStart As Currency
    Dim timeEnd As Currency
    Dim timeNow As Currency
    
    GetTime timeStart 'in currency
    
    'calculate time to quit in currency based on max time to wait in MS
    timeEnd = timeStart + timeMStoCurrency(Max(maxWaitTimeMS, 0))

    Do
        If Not IsPresent(by_, val) Then Exit Sub
        
        sleep 50  'ms
        GetTime timeNow
    Loop Until timeNow > timeEnd
    
    Err.Raise 1, "WebDriver", "Error in WaitUntilNotPresent method: maximum wait time exceeded while waiting for element to disappear."
End Sub

'@Description("Returns the user agent string - must be called after OpenBrowser")
Public Function GetUserAgent() As String
Attribute GetUserAgent.VB_Description = "Returns the user agent string - must be called after OpenBrowser"
    If sessionId_ <> vbNullString Then
        GetUserAgent = ExecuteScript("return navigator.userAgent;")
    Else
        Err.Raise 1, "WebDriver", "GetUserAgent method must be executed after OpenBrowser!"
    End If
End Function

'@Description("Sets/Gets the default input/output folder")
Public Property Let DefaultIOFolder(ByVal folderPath As String)
Attribute DefaultIOFolder.VB_Description = "Sets/Gets the default input/output folder"
    defaultIOFolder_ = WebShared.getFullLocalPath(folderPath, , True)
End Property

Public Property Get DefaultIOFolder() As String
    If defaultIOFolder_ = vbNullString Then
        DefaultIOFolder = ResolvePath(".\", True)
    Else
        DefaultIOFolder = defaultIOFolder_
    End If
End Property

'@Description("Sets/Gets the default Selenium driver folder")
Public Property Let DefaultDriverFolder(ByVal folderPath As String)
Attribute DefaultDriverFolder.VB_Description = "Sets/Gets the default Selenium driver folder"
'Note: default folder is Downloads dir
    defaultDriverFolder_ = WebShared.getFullLocalPath(folderPath, , True)
End Property

Public Property Get DefaultDriverFolder() As String
    DefaultDriverFolder = defaultDriverFolder_
End Property

'@Description("Deletes a list of files")
Public Sub DeleteFiles(ParamArray fileList() As Variant)
Attribute DeleteFiles.VB_Description = "Deletes a list of files"
    Dim fso As New FileSystemObject
    Dim i As Long
    Dim k As Long
    Dim j As Long
    Dim strlist() As String
    For i = 0 To UBound(fileList)
        If IsArray(fileList(i)) Then
            For j = LBound(fileList(i)) To UBound(fileList(i))
                strlist = Split(fileList(i)(j), ",")
                For k = 0 To UBound(strlist)
                    On Error Resume Next 'file might not exists
                    fso.DeleteFile ResolvePath(strlist(k), False), True
                    On Error GoTo 0
                Next k
            Next j
        Else
            strlist = Split(fileList(i), ",")
            For k = 0 To UBound(strlist)
                On Error Resume Next 'file might not exists
                fso.DeleteFile ResolvePath(strlist(k), False), True
                On Error GoTo 0
            Next k
        End If
    Next i
End Sub

'@Description("Saves a specified string to a file")
Public Sub SaveStringToFile(ByVal val As String, Optional ByVal filePath As String = ".\snippet.html", Optional ByVal formatUnicode16 As Boolean = True)
Attribute SaveStringToFile.VB_Description = "Saves a specified string to a file"
    'this is used to save test html snippets to file for subsequent browser navigation
    Dim fso As New FileSystemObject
    Dim ts As TextStream
    filePath = ResolvePath(filePath, False)
    On Error GoTo errHnd
    Set ts = fso.CreateTextFile(filePath, True, formatUnicode16)
    ts.Write val
    ts.Close
    Exit Sub
errHnd:
    Err.Raise 1, , "Error in SaveStringToFile: Could not save string to file path " & filePath & " - please check that a valid file path was specified and that you have write permissions."
End Sub

'@Description("Returns the parent of element")
Public Function GetParentElement(childElement As WebElement) As WebElement
Attribute GetParentElement.VB_Description = "Returns the parent of element"
    Set GetParentElement = childElement.FindElement(By.XPath, "./parent::*")
End Function

'@Description("Returns the direct descendant child elements of the element")
Public Function GetChildElements(parentElement As WebElement) As WebElements
Attribute GetChildElements.VB_Description = "Returns the direct descendant child elements of the element"
    'this gets the immediate descendant elements - note that this is not same as element.FindElements(by.tagName, "*")
    Set GetChildElements = parentElement.FindElements(By.XPath, "./child::*")
End Function

'@Description("Returns a 1-based array holding the text values from a table or tbody element")
Public Function TableToArray(table As WebElement, Optional ByVal skipHeader As Boolean = False, Optional ByVal skipFooter As Boolean = False, Optional ByVal createSpanData As Boolean = True, Optional ByVal ignoreCellFormatting As Boolean = False) As Variant()
Attribute TableToArray.VB_Description = "Returns a 1-based array holding the text values from a table or tbody element"
    Dim data As Dictionary, elemDict As Dictionary, c As Collection
    'convert the WebElement table into an html dom table object
    'input WebElement can either be a table or a tbody element
    'using a html dom table for processing is greater than 25x faster than using Selenium selectors to process table
    
    'instead of calling ExecuteScript, reduce some overhead by rolling our own since we know what's going in and coming out
    
    Set elemDict = New Dictionary
    elemDict.Add ELEMENT_KEY, table.elementId
    Set data = New Dictionary
    
    data.Add "script", getScript("TableToArray.js")
    data.Add "args", Array(elemDict, skipHeader, skipFooter, createSpanData, ignoreCellFormatting)
    Set data = ExecuteCmd("POST", "/session/$sessionId/execute/sync", data)
    
    If TypeName(data("value")) = "Collection" Then
        Set c = data("value")
    Else
        Err.Raise 1, , "Error in TableToArray method: input element must be either table or tbody element"
    End If

    TableToArray = collectionToArray(c)
End Function


'@Description("Converts webpage to an html document object - use sanitize to remove online dynamic content while leaving the dom tree intact")
Public Function PageToHTMLDoc(Optional ByVal sanitize As Boolean = False) As MSHTML.HTMLDocument
Attribute PageToHTMLDoc.VB_Description = "Converts webpage to an html document object - use sanitize to remove online dynamic content while leaving the dom tree intact"
    'sanitize option attempts to remove all "online" dynamic content while leaving the dom tree intact
    Dim htmlDoc As New MSHTML.HTMLDocument
    Dim pageSource As String
    
    pageSource = Me.GetPageSource
    
    If sanitize Then pageSource = ExecuteScript(getScript("SanitizeHTML.js"), pageSource)

    If htmlDoc.documentMode >= 11 Then
        htmlDoc.DocumentElement.innerHTML = pageSource
        Set PageToHTMLDoc = htmlDoc
        Exit Function
    Else
        'this is a hack that works for older documentModes
        Dim htmlDoc2 As Object
        Set htmlDoc2 = New MSHTML.HTMLDocument
        htmlDoc2.Open
        htmlDoc2.Write pageSource
        htmlDoc2.Close
        Set PageToHTMLDoc = htmlDoc2
    End If
End Function

'@Description("Converts webpage to an xml document object")
Public Function PageToXMLDoc() As MSXML2.DOMDocument60
Attribute PageToXMLDoc.VB_Description = "Converts webpage to an xml document object"
    Dim xmlDoc As New MSXML2.DOMDocument60
    xmlDoc.LoadXML getXMLStringFromPage()
    Set PageToXMLDoc = xmlDoc
End Function

'@Description("Converts webpage to a json dictionary or collection object")
Public Function PageToJSONObject() As Object
Attribute PageToJSONObject.VB_Description = "Converts webpage to a json dictionary or collection object"
    'will return a dictionary or collection depending on json source
    Set PageToJSONObject = WebJsonConverter.ParseJson(getJSONStringFromPage())
End Function

'@Description("Converts webpage to an html file - use sanitize to remove online dynamic content while leaving the dom tree intact")
Public Sub PageToHTMLFile(ByVal filePath As String, Optional ByVal sanitize As Boolean = False, Optional ByVal formatUnicode16 As Boolean = True)
Attribute PageToHTMLFile.VB_Description = "Converts webpage to an html file - use sanitize to remove online dynamic content while leaving the dom tree intact"
    Dim pageSource As String
    pageSource = Me.GetPageSource
    If sanitize Then pageSource = ExecuteScript(getScript("SanitizeHTML.js"), pageSource)
    Me.SaveStringToFile pageSource, filePath, formatUnicode16
End Sub

'@Description("Converts webpage to an xml file")
Public Sub PageToXMLFile(ByVal filePath As String, Optional ByVal prettyPrint As Boolean = False, Optional ByVal formatUnicode16 As Boolean = True)
Attribute PageToXMLFile.VB_Description = "Converts webpage to an xml file"
    Me.SaveStringToFile getXMLStringFromPage(prettyPrint), filePath, formatUnicode16
End Sub

'@Description("Converts webpage to a json file")
Public Sub PageToJSONFile(ByVal filePath As String, Optional ByVal prettyPrint As Boolean = False, Optional ByVal formatUnicode16 As Boolean = True)
Attribute PageToJSONFile.VB_Description = "Converts webpage to a json file"
    Me.SaveStringToFile getJSONStringFromPage(prettyPrint), filePath, formatUnicode16
End Sub

'@Description("Returns the current webpage source as a string")
Public Function PageToString() As String
Attribute PageToString.VB_Description = "Returns the current webpage source as a string"
    'for consistency...
    PageToString = Me.GetPageSource()
End Function

'@Description("Sets geolocation parameter values")
Public Sub SetGeolocation(ByVal latitude As Double, ByVal longitude As Double, Optional ByVal altitude As Double = 0#, Optional ByVal accuracy As Double = 100#)
Attribute SetGeolocation.VB_Description = "Sets geolocation parameter values"
    Dim data As New Dictionary
    Dim location As New Dictionary
    location.Add "latitude", latitude
    location.Add "longitude", longitude
    location.Add "altitude", altitude
    location.Add "accuracy", accuracy
    data.Add "location", location
    execute tCMD.CMD_SET_GEOLOCATION, data
End Sub

'@Description("Gets geolocation parameter values as a dictionay object")
Public Function GetGeolocation() As Dictionary
Attribute GetGeolocation.VB_Description = "Gets geolocation parameter values as a dictionay object"
    Set GetGeolocation = execute(tCMD.CMD_GET_GEOLOCATION)("value")
End Function

'@Description("Creates/updates the optional INI settings file - set keepExistingValues to False to reset existing settings to system defaults")
Public Sub CreateSettingsFile(Optional ByVal keepExistingValues As Boolean = True)
Attribute CreateSettingsFile.VB_Description = "Creates/updates the optional INI settings file - set keepExistingValues to False to reset existing settings to system defaults"
    Dim iniFilePath As String
    Dim fso As New FileSystemObject
    Dim ts As TextStream
    Dim overWriteFile As Long
    Dim i As Long
    Dim useDefaultValue As Boolean
    Dim entryCol As New Collection
    
    useDefaultValue = Not keepExistingValues
    
    iniFilePath = getFullLocalPath(thisLibFolderPath, , True) & "\SeleniumVBA.ini"
    
    entryCol.Add "# This settings file is completely optional. For it to have effect,"
    entryCol.Add "# it must be located in the same folder as the SeleniumVBA code"
    entryCol.Add "# library, and be named ""SeleniumVBA.ini""."
    entryCol.Add " "
    entryCol.Add "# If a value for an entry is not specified, then the system"
    entryCol.Add "# default value will be used."
    entryCol.Add " "
    entryCol.Add "# Note that all path-type entry values recognize the %[Environ]% syntax."
    entryCol.Add " "
    entryCol.Add "# A few useful Environ values for reference:"
    entryCol.Add " "
    entryCol.Add "# %USERPROFILE%=C:\Users\[user name]"
    entryCol.Add "# %APPDATA%=C:\Users\[user name]\AppData\Roaming"
    entryCol.Add "# %LOCALAPPDATA%=C:\Users\[user name]\AppData\Local"
    entryCol.Add "# %TEMP%=C:\Users\[user name]\AppData\Local\Temp"
    entryCol.Add " "
    
    entryCol.Add "[GENERAL]"
    entryCol.Add " "
    entryCol.Add "# The driver_location_folder system defaults to Downloads folder."
    entryCol.Add "# The default_io_folder system defaults to the active vba project's"
    entryCol.Add "# document location - leave this blank to use default."
    entryCol.Add "# Valid values for command_window_style are vbHide (default), "
    entryCol.Add "# vbNormalFocus, vbMinimizedFocus, vbMaximizedFocus, vbNormalNoFocus,"
    entryCol.Add "# and vbMinimizedNoFocus."
    entryCol.Add "# The system default values for implicit_wait, page_load_timeout, and"
    entryCol.Add "# script_timeout are " & sysImplicitWait & ", " & sysPageLoadTimeout & ", and " & sysScriptTimeout & " ms respectively."
    
    entryCol.Add " "
    entryCol.Add "driver_location_folder=" & readIniFileEntry(iniFilePath, "GENERAL", "driver_location_folder", "%USERPROFILE%\Downloads", useDefaultValue)
    entryCol.Add "default_io_folder=" & readIniFileEntry(iniFilePath, "GENERAL", "default_io_folder", vbNullString, useDefaultValue)
    entryCol.Add "command_window_style=" & readIniFileEntry(iniFilePath, "GENERAL", "command_window_style", "vbHide", useDefaultValue)
    entryCol.Add " "
    entryCol.Add "implicit_wait=" & readIniFileEntry(iniFilePath, "GENERAL", "implicit_wait", sysImplicitWait, useDefaultValue)
    entryCol.Add "page_load_timeout=" & readIniFileEntry(iniFilePath, "GENERAL", "page_load_timeout", sysPageLoadTimeout, useDefaultValue)
    entryCol.Add "script_timeout=" & readIniFileEntry(iniFilePath, "GENERAL", "script_timeout", sysScriptTimeout, useDefaultValue)
    entryCol.Add " "
    
    entryCol.Add "[AUTO-DRIVER-UPDATE]"
    entryCol.Add " "
    entryCol.Add "# If auto_detect_and_update=True (system default) then everytime"
    entryCol.Add "# the WebDriver's Start* method is called, the Selenium driver's"
    entryCol.Add "# version is checked against the corresponding browser version."
    entryCol.Add "# If the driver is not compatible with browser, it will be updated."
    entryCol.Add "# min_compatibility_level determines trigger for updating an"
    entryCol.Add "# an out-of-date driver. System default is svbaBuildMajor."
    entryCol.Add "# Use svbaMinor for less frequent updating, and svbaExactMatch"
    entryCol.Add "# for more frequent updating."
    entryCol.Add " "
    entryCol.Add "auto_detect_and_update=" & readIniFileEntry(iniFilePath, "AUTO-DRIVER-UPDATE", "auto_detect_and_update", True, useDefaultValue)
    entryCol.Add "min_compatibility_level=" & readIniFileEntry(iniFilePath, "AUTO-DRIVER-UPDATE", "min_compat_level", "svbaBuildMajor", useDefaultValue)
    entryCol.Add " "
    
    entryCol.Add "# Below are browser-specific initializations."
    entryCol.Add "# To automatically initialize a set of capabilities each time the"
    entryCol.Add "# OpenBrowser method of WebDriver class is invoked, set the"
    entryCol.Add "# preload_capabilities_file_path entry to the path of a valid json"
    entryCol.Add "# capabilities file. Note that if preload_capabilities_file_path is"
    entryCol.Add "# set to a blank value, or the entry is missing or commented out,"
    entryCol.Add "# then this option is ignored. Use the SaveToFile method of the"
    entryCol.Add "# WebCapabilities class to save a default set of capabilities"
    entryCol.Add "# for pre-loading."
    entryCol.Add "# The system defaults for local_host_port:"
    entryCol.Add "# Chrome - 9515, Edge - 9516, Firefox - 4444"
    entryCol.Add " "
    
    entryCol.Add "[CHROME]"
    entryCol.Add " "
    entryCol.Add "preload_capabilities_file_path=" & readIniFileEntry(iniFilePath, "CHROME", "preload_capabilities_file_path", vbNullString, useDefaultValue)
    entryCol.Add "local_host_port=" & readIniFileEntry(iniFilePath, "CHROME", "local_host_port", 9515, useDefaultValue)
    entryCol.Add " "

    entryCol.Add "[EDGE]"
    entryCol.Add " "
    entryCol.Add "preload_capabilities_file_path=" & readIniFileEntry(iniFilePath, "EDGE", "preload_capabilities_file_path", vbNullString, useDefaultValue)
    entryCol.Add "local_host_port=" & readIniFileEntry(iniFilePath, "EDGE", "local_host_port", 9516, useDefaultValue)
    entryCol.Add " "
    
    entryCol.Add "[FIREFOX]"
    entryCol.Add " "
    entryCol.Add "preload_capabilities_file_path=" & readIniFileEntry(iniFilePath, "FIREFOX", "preload_capabilities_file_path", vbNullString, useDefaultValue)
    entryCol.Add "local_host_port=" & readIniFileEntry(iniFilePath, "FIREFOX", "local_host_port", 4444, useDefaultValue)
    entryCol.Add " "
    
    entryCol.Add "[PDF_DEFAULT_PRINT_SETTINGS]"
    entryCol.Add " "
    entryCol.Add "# Valid units values are svbaInches (default) or svbaCentimeters."
    entryCol.Add "# Valid orientation values are svbaPortrait (default) or svbaLandscape."
    entryCol.Add " "
    entryCol.Add "# Common Metric print settings:"
    entryCol.Add "# units=svbaCentimeters"
    entryCol.Add "# page_height=27.94"
    entryCol.Add "# page_width=21.59"
    entryCol.Add "# margin_bottom=1"
    entryCol.Add "# margin_top=1"
    entryCol.Add "# margin_right=1"
    entryCol.Add "# margin_left=1"
    entryCol.Add " "
    entryCol.Add "# Common Imperial print settings:"
    entryCol.Add "# units=svbaInches"
    entryCol.Add "# page_height=11"
    entryCol.Add "# page_width=8.5"
    entryCol.Add "# margin_bottom=.393701"
    entryCol.Add "# margin_top=.393701"
    entryCol.Add "# margin_right=.393701"
    entryCol.Add "# margin_left=.393701"
    entryCol.Add " "
    entryCol.Add "units=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "units", "svbaInches", useDefaultValue)
    entryCol.Add "page_height=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "page_height", 11, useDefaultValue)
    entryCol.Add "page_width=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "page_width", 8.5, useDefaultValue)
    entryCol.Add "margin_bottom=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "margin_bottom", Format$(1 / 2.54, ".000000"), useDefaultValue)
    entryCol.Add "margin_top=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "margin_top", Format$(1 / 2.54, ".000000"), useDefaultValue)
    entryCol.Add "margin_right=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "margin_right", Format$(1 / 2.54, ".000000"), useDefaultValue)
    entryCol.Add "margin_left=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "margin_left", Format$(1 / 2.54, ".000000"), useDefaultValue)
    entryCol.Add "background=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "background", False, useDefaultValue)
    entryCol.Add "orientation=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "orientation", "svbaPortrait", useDefaultValue)
    entryCol.Add "print_scale=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "print_scale", 1, useDefaultValue)
    entryCol.Add "shrink_to_fit=" & readIniFileEntry(iniFilePath, "PDF_DEFAULT_PRINT_SETTINGS", "shrink_to_fit", True, useDefaultValue)
    
    Set ts = fso.CreateTextFile(iniFilePath, True, True)
    
    For i = 1 To entryCol.Count
        ts.WriteLine entryCol.Item(i)
    Next i
    
    ts.Close
End Sub

'@Description("Downloads a resource (such as an image) contained in an element attribute to a file or folder path - if a folder is specified, then the file will inherit the name of the source")
Public Sub DownloadResource(element As WebElement, Optional ByVal srcAttribute As String = "src", Optional ByVal fileOrFolderPath As String = ".\")
Attribute DownloadResource.VB_Description = "Downloads a resource (such as an image) contained in an element attribute to a file or folder path - if a folder is specified, then the file will inherit the name of the source"
    Dim Url As String
    Dim fso As New FileSystemObject
    Dim filePath As String
    Dim fileName As String
    Dim ret As Long
    
    'get the resource url
    Url = ExecuteScript(getScript("GetResourceUrl.js"), element, srcAttribute)
    If Url Like "Error*" Then Err.Raise 1, "WebDriver", Url & Chr$(34) & srcAttribute & Chr$(34)

    'now calculate the destination path
    'first convert user input path to absolute path
    fileOrFolderPath = ResolvePath(fileOrFolderPath, False)

    'check if user gave a folder path or a file path
    If fso.FolderExists(fileOrFolderPath) Then 'its a folder path
        'file path inherits the name of the target url
        fileName = fso.GetFileName(Url)
        'strip off query params if they exist
        'and cat with full path of user input
        filePath = fileOrFolderPath & "\" & Split(fileName, "?")(0)
    Else 'its a file path
        filePath = fileOrFolderPath
        If Not fso.FolderExists(fso.GetParentFolderName(filePath)) Then
            Err.Raise 1, "WebDriver", "Error in DownloadResource method: specified folder path for saving file does not exist:" & vbNewLine & vbNewLine & fso.GetParentFolderName(filePath)
        End If
    End If

    'download the url to file path
    ret = UrlDownloadToFile(0&, StrPtr(Url), StrPtr(filePath), 0&, 0&)

    If ret <> 0 Then Err.Raise 1, "WebDriver", "Error in DownloadResource method: cannot download from " & Url & " to " & filePath
End Sub

'@Description("Saves a base 64 encoded string to a file in binary format")
Public Sub SaveBase64StringToFile(ByVal base64String As String, ByVal filePath As String)
Attribute SaveBase64StringToFile.VB_Description = "Saves a base 64 encoded string to a file in binary format"
    filePath = ResolvePath(filePath, False)
    saveByteArrayToFile decodeBase64(base64String), filePath
End Sub

'@Description("Returns a fully qualified path for the input path")
Public Function ResolvePath(ByVal pathToResolve As String, Optional ByVal targetExists As Boolean = True) As String
Attribute ResolvePath.VB_Description = "Returns a fully qualified path for the input path"
    ResolvePath = WebShared.getFullLocalPath(pathToResolve, defaultIOFolder_, targetExists)
End Function

'@Description("Returns the Id string of the specified element object - useful for testing purposes")
Public Function GetElementId(element As WebElement) As String
Attribute GetElementId.VB_Description = "Returns the Id string of the specified element object - useful for testing purposes"
    GetElementId = element.elementId
End Function

'@Description("Returns the WebWindows object for managing the collection of all open WebWindow objects")
Public Function Windows() As WebWindows
Attribute Windows.VB_Description = "Returns the WebWindows object for managing the collection of all open WebWindow objects"
    Set Windows = New WebWindows
    Set Windows.WebDriver = Me
    Windows.Refresh
End Function

'@Description("Returns the active WebWindow object")
Public Function ActiveWindow() As WebWindow
Attribute ActiveWindow.VB_Description = "Returns the active WebWindow object"
    Dim resp As Dictionary
    Dim activeHandle As String
    'get the active window handle if there is one
    Set resp = execute(tCMD.CMD_GET_CURRENT_WINDOW_HANDLE, , False)
    If isResponseError(resp) Then
        If resp("value")("errorNumber") = 404 Then
            Err.Raise 404, , "Error in ActiveWindow method: There is no window currently active - a window must have been closed without switching to another window"
        Else
            Err.Raise resp.Item("value").Item("errorNumber"), , resp.Item("value").Item("message")
        End If
    Else
        activeHandle = resp("value")
    End If
    
    Set ActiveWindow = New WebWindow
    
    ActiveWindow.Handle = activeHandle
    Set ActiveWindow.WebDriver = Me
End Function

'@Description("Sets the default download folder path - for Edge and Chrome browsers only. It must be invoked AFTER OpenBrowser command.")
Public Sub SetDownloadFolder(Optional ByVal folderPath As String = ".\")
Attribute SetDownloadFolder.VB_Description = "Sets the default download folder path - for Edge and Chrome browsers only. It must be invoked AFTER OpenBrowser command."
    'redirect the download location AFTER capabilities have been set - can be called multiple times in same session!!
    Dim params As New Dictionary
    If browser_ = Firefox Then
        'GeckoDriver lack of support for cdp endpoint - https://groups.google.com/a/mozilla.org/g/dev-webdriver/c/DcYrCVCWMLU
        Err.Raise 1, , "Error in SetDownloadFolder - this method can only be used with Edge and Chrome. Use WebCapabilities SetDownloadPrefs instead."
    End If
    'https://chromedevtools.github.io/devtools-protocol/tot/Browser/#method-setDownloadBehavior
    params.Add "behavior", "allow" 'deny, allow, default
    params.Add "downloadPath", ResolvePath(folderPath, True)
    'Page. works but is deprecated as of 10/2023 - use Browser. once incognito issue is fixed
    'https://github.com/GCuser99/SeleniumVBA/issues/87
    'ExecuteCDP "Browser.setDownloadBehavior", params
    ExecuteCDP "Page.setDownloadBehavior", params
End Sub

'@Description("Installs a browser addon (extension) such as an an .xpi file - Firefox only")
Public Sub InstallAddon(ByVal filePath As String)
Attribute InstallAddon.VB_Description = "Installs a browser addon (extension) such as an an .xpi file - Firefox only"
    Dim data As New Dictionary
    Dim fso As New FileSystemObject
    Dim b64 As String
    
    If browser_ <> svbaBrowser.Firefox Then Err.Raise 1, , "Error in InstallAddon - this method can only be used with Firefox. For Chrome/Edge use AddExtensions method of WebCapabilities instead."
    
    filePath = ResolvePath(filePath, True)
    If Not fso.FileExists(filePath) Then Err.Raise 1, "WebDriver", "The addon file path :" & vbNewLine & vbNewLine & filePath & vbNewLine & vbNewLine & "does not exist - please correct the path provided."
    
    b64 = encodeBase64(readByteArrayFromFile(filePath), useNewLines:=False)
    data.Add "addon", b64
    
    execute tCMD.CMD_INSTALL_ADDON_FF, data
End Sub

Friend Function execute(driverCommand As Variant, Optional parameters As Dictionary = Nothing, Optional ByVal raiseError As Boolean = True, Optional ByVal receiveTimeout As Long = -1) As Dictionary
    Dim cmdMethod As String
    Dim cmdPath As String
    Dim cmdArgs As New Dictionary
    Dim parmKey As Variant
    Dim response As Dictionary
    Dim client As New MSXML2.ServerXMLHTTP60
    Dim clientStatus As Long
    Dim clientResponseText As String
    
    cmdMethod = driverCommand(0)
    cmdPath = driverCommand(1)
    
    If parameters Is Nothing Then Set parameters = New Dictionary
    
    'insert session id into command path
    If InStr(cmdPath, "$sessionId") > 0 Then cmdPath = Replace$(cmdPath, "$sessionId", sessionId_)
    
    'process other command path and non-path parameters
    For Each parmKey In parameters.keys
        If InStr(cmdPath, "$" & parmKey) > 0 Then 'path parameter
            cmdPath = Replace$(cmdPath, "$" & parmKey, parameters(parmKey))
        Else
            'non-path parameter - it's an argument
            cmdArgs.Add parmKey, parameters(parmKey)
        End If
    Next parmKey
    
    'Send request to selenium server
    client.Open cmdMethod, driverUrl_ & cmdPath
    
    'check if the caller passed a receive timeout
    If receiveTimeout = -1 Then
        'set receiveTimeout (default 30 secs) to accommodate longest of
        'WebDriver's current implicit waits, pageload and script timeouts
        'see https://github.com/GCuser99/SeleniumVBA/issues/8
        receiveTimeout = WebShared.Max(curImplicitWait, curPageLoadTimeout, curScriptTimeout, 29000) + 1000
    End If
    
    'set the timeouts
    client.setTimeouts 0, 60000, 30000, receiveTimeout
    
    On Error GoTo processErr
    
    Select Case UCase$(cmdMethod)
    Case "POST"
        client.setRequestHeader "Content-Type", "application/json; charset=utf-8"
        client.setRequestHeader "Cache-Control", "no-cache"
        client.send WebJsonConverter.ConvertToJson(cmdArgs)
    Case "GET", "DELETE"
        client.send
    Case Else
        Err.Raise 1, "WebDriver", "WebDriver command method must be either ""POST"", ""GET"", or ""DELETE""."
    End Select

    Do While client.readyState < 4
        DoEvents
    Loop

    On Error GoTo 0
    
    clientResponseText = client.ResponseText
    clientStatus = client.Status
    
    'handle known non-standard/buggy WebDriver responses...
    If Left$(clientResponseText, 1) <> "{" And clientStatus = 405 Then
        'http method not allowed - this one is not a properly formed json
        'response from Firefox so modify it into a valid json string
        'see https://github.com/mozilla/geckodriver/issues/1962
        clientResponseText = "{'value':{'error':'" & clientResponseText & "','message':'" & _
                clientResponseText & ": " & driverCommand(0) & " " & driverCommand(1) & "'}}"
    End If
    
    'parse the response into a dictionary
    Set response = WebJsonConverter.ParseJson(clientResponseText)

    'check if it's a WebDriver error
    If isResponseError(response) Then
        If raiseError Then 'report to user now
            'Debug.Print getResponseErrorMessage(response)
            Err.Raise clientStatus, "WebDriver", getResponseErrorMessage(response)
        Else
            response("value").Add "errorNumber", clientStatus
        End If
    End If

    Set execute = response 'let caller parse info based on context, including error
    Exit Function
    
processErr:

    If Err.Number <> 0 Then 'it's a communication error with WebDriver
        If raiseError Then
            Err.Raise Err.Number, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
        Else
            'populate response with the error message
            Set response = WebJsonConverter.ParseJson("{'value':{'error':'" & Err.Description & "','message':'" & Err.Description & _
                        ": in an attempt to communicate with Selenium WebDriver'}}")
            response("value").Add "errorNumber", Err.Number
            Set execute = response 'let caller parse info based on context, including error
        End If
    End If
End Function

Private Function toWebElement(ByVal elementId As String) As WebElement
    Dim element As New WebElement
    Set element.driver = Me
    element.elementId = elementId
    Set toWebElement = element
End Function

Private Function toShadowRoot(ByVal shadowRootId As String) As WebShadowRoot
    Dim sr As New WebShadowRoot
    Set sr.driver = Me
    sr.shadowRootId = shadowRootId
    Set toShadowRoot = sr
End Function

Private Function params(ParamArray keysAndValues() As Variant) As Dictionary
    Dim dict As New Dictionary
    Dim i As Long
    For i = 0 To UBound(keysAndValues) - 1 Step 2
        dict.Add keysAndValues(i), keysAndValues(i + 1)
    Next i
    Set params = dict
End Function

Private Function rgbLongToString(ByVal rgbColor As Long) As String
    If rgbColor < RGB(0, 0, 0) Or rgbColor > RGB(255, 255, 255) Then Err.Raise 1, "WebDriver", "Error: argument rgbColor out of range (0 to 16777215)"
    Dim r As Long
    Dim g As Long
    Dim b As Long
    r = rgbColor And &HFF
    g = (rgbColor And &H100FF00) / &H100
    b = (rgbColor And &HFF0000) / &H10000
    rgbLongToString = "rgb(" & r & "," & g & "," & b & ")"
End Function

Private Function objToWebElements(elementOrElements As Object) As WebElements
    Select Case TypeName(elementOrElements)
        Case "WebElement": Set objToWebElements = New WebElements: objToWebElements.Add elementOrElements
        Case "WebElements": Set objToWebElements = elementOrElements
        Case Else: Err.Raise 1, "WebDriver", "Error: the elementOrElements argument is not of valid type (WebElement or WebElements)"
    End Select
End Function

Private Sub killDriver(ByVal browser As svbaBrowser, Optional ByVal port As Long = 0)
    'https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-process
    Dim objService As WbemScripting.SWbemServices
    Dim objDriverList As WbemScripting.SWbemObjectSet
    Dim objParentList As WbemScripting.SWbemObjectSet
    Dim objDriver As WbemScripting.SWbemObject
    Dim objParent As WbemScripting.SWbemObject
    Dim sImageName As String
    Dim pid As String
    
    Select Case browser
    Case svbaBrowser.Chrome
        sImageName = "chromedriver%"
    Case svbaBrowser.Edge
        sImageName = "msedgedriver%"
    Case svbaBrowser.Firefox
        sImageName = "geckodriver%"
    End Select
    
    Set objService = GetObject("winmgmts:\\.\root\CIMV2")
    
    Set objDriverList = objService.ExecQuery("SELECT * FROM Win32_Process" & " WHERE Name like '" & sImageName & "'")
    
    For Each objDriver In objDriverList
        If port > 0 Then
            If InStr(objDriver.commandLine, CStr(port)) = 0 Then GoTo 10
        End If
        Set objParentList = objService.ExecQuery("SELECT * FROM Win32_Process" & " WHERE ProcessID = '" & objDriver.ParentProcessId & "'")
        If objParentList.Count > 0 Then
            Set objParent = objParentList.ItemIndex(0)
            Select Case LCase$(objParent.Name)
            Case "cmd.exe"
                'driver was called using cmd.exe so we kill the parent process and all subprocesses (/t parameter)
                pid = objParent.processID
            Case Else '"excel.exe"
                'driver was called directly using shell and so will kill it and all subprocesses (/t parameter)
                pid = objDriver.processID
            End Select
        Else 'its a stranded process (parent may have already been quit)
            pid = objDriver.processID
        End If
        taskKillByPid pid
10:
    Next objDriver
End Sub

Private Function taskKillByPid(ByVal pid As String) As Variant
    Dim wsh As New IWshRuntimeLibrary.WshShell
    taskKillByPid = wsh.Run("taskkill /f /t /pid " & pid, 0, True)
End Function

Private Function getXMLStringFromPage(Optional ByVal prettyPrint As Boolean = False) As String
    Dim str As String
    Dim elem As WebElement
    Select Case browser_
    Case svbaBrowser.Chrome, svbaBrowser.Edge
        If Me.IsPresent(By.XPath, "//*[@id='webkit-xml-viewer-source-xml']", , , elem) Then
            str = elem.GetInnerHTML
        End If
    Case svbaBrowser.Firefox
        str = Me.GetPageSource
    End Select
    
    If Left$(str, 1) <> "<" Or Left$(str, 5) = "<html" Then Err.Raise 1, "WebDriver", "Error: The page source is not XML format!"
    
    If prettyPrint Then str = formatXML(str)
    
    getXMLStringFromPage = str
End Function

Private Function getJSONStringFromPage(Optional ByVal prettyPrint As Boolean = False) As String
    Dim str As String
    Dim elem As WebElement
    
    Select Case browser_
    Case svbaBrowser.Firefox
        'check to see if preference "devtools.jsonview.enabled" = True (default)
        If Not Me.IsPresent(By.TagName, "pre") Then
            'Firefox using jsonview, so now click rawdata tab
            If Me.IsPresent(By.ID, "rawdata-tab", , , elem) Then
                elem.Click
            Else
                Err.Raise 1, "WebDriver", "Error: The page source is not JSON format!"
            End If
        End If
        
        str = Me.FindElementByTagName("pre").GetText

        'firefox returns a wrongly interpreted json if webpage source came from NavigateToFile *.json
        'GCUser99 has reported this bug - see https://bugzilla.mozilla.org/show_bug.cgi?id=1797871
        str = fixFirefoxBug1797871(str)
    Case svbaBrowser.Chrome
        If Me.IsPresent(By.TagName, "pre", , , elem) Then
            str = elem.GetText
        Else
            Err.Raise 1, "WebDriver", "Error: The page source is not JSON format!"
        End If
    Case svbaBrowser.Edge
        If Me.IsPresent(By.XPath, "/html/body/div[@hidden='true']", , , elem) Then
            'As of 9/2023 Edge browser defaults to Json viewer feature enabled
            'edge://flags/#edge-json-viewer set to Default or Enabled
            str = elem.GetInnerHTML
        ElseIf Me.IsPresent(By.TagName, "pre", , , elem) Then
            'Json viewer is disabled
            'edge://flags/#edge-json-viewer set to Disabled or caps.AddArguments "--disable-features=msEdgeJSONViewer"
            str = elem.GetText
        Else
            Err.Raise 1, "WebDriver", "Error: The page source is not JSON format!"
        End If
    End Select
    
    If prettyPrint Then str = WebJsonConverter.ConvertToJson(WebJsonConverter.ParseJson(str), 4)
    
    getJSONStringFromPage = str
End Function

Private Function formatXML(ByVal val As String) As String
    Dim xslDoc As New MSXML2.DOMDocument60
    Dim xmlDocFormatted As New MSXML2.DOMDocument60
    Dim xmlDoc As New MSXML2.DOMDocument60
    
    xmlDoc.LoadXML val
    xslDoc.LoadXML getScript("PrettyPrint.xml")
    
    xslDoc.async = False
    xmlDoc.transformNodeToObject xslDoc, xmlDocFormatted
    formatXML = xmlDocFormatted.XML
End Function

Private Function fixFirefoxBug1797871(ByVal str As String) As String
    Dim i As Long
    Dim j As Long
    Dim bytes() As Byte
    'see https://bugzilla.mozilla.org/show_bug.cgi?id=1797871
    'firefox json viewer only accepts utf-8 encoded text files
    'the following works for preference "devtools.jsonview.enabled", [True or False]
    bytes = str
    'check the first 2 bytes for the "mis-interpretion" pattern and if found then unscramble
    If bytes(0) = 253 And bytes(1) = 255 Then
        j = -2
        For i = 0 To UBound(bytes) - 1 Step 2
            'strip out nulls (double zeros) and black-diamond question marks
            If (bytes(i) <> 0 Or bytes(i + 1) <> 0) And (bytes(i) <> 253 Or bytes(i + 1) <> 255) Then
                j = j + 2
                bytes(j) = bytes(i)
                bytes(j + 1) = bytes(i + 1)
            End If
        Next i
        ReDim Preserve bytes(0 To j + 1)
        str = bytes
        
        fixFirefoxBug1797871 = Replace$(str, vbNewLine & vbNewLine, vbNewLine)
    Else
        fixFirefoxBug1797871 = str
    End If
End Function

Private Function serializeScriptInputs(argumentList() As Variant) As Variant()
    'replace WebElement, WebElements, WebShadowRoot object arguments with format needed by WebDriver server
    Dim i As Long, j As Long
    Dim elemCol As Collection
    Dim elemDict As Dictionary
    Dim shadowRootDict As Dictionary
    Dim shadowRoot As WebShadowRoot
    Dim elements As WebElements
    Dim element As WebElement
    Dim args() As Variant
        
    ReDim args(0 To UBound(argumentList))
    For i = 0 To UBound(argumentList)
        Select Case TypeName(argumentList(i))
        Case "WebElement"
            'convert WebElement object to Dictionary that can be handled by WebDriver
            Set element = argumentList(i)
            Set elemDict = New Dictionary
            elemDict.Add ELEMENT_KEY, element.elementId
            Set args(i) = elemDict
        Case "WebShadowRoot"
            'convert WebShadowRoot object to Dictionary that can be handled by WebDriver
            Set shadowRoot = argumentList(i)
            Set shadowRootDict = New Dictionary
            shadowRootDict.Add SHADOWROOT_KEY, shadowRoot.shadowRootId
            Set args(i) = shadowRootDict
        Case "WebElements"
            'convert WebElements object to Dictionary that can be handled by WebDriver
            Set elements = argumentList(i)
            Set elemCol = New Collection
            For j = 1 To elements.Count
                Set elemDict = New Dictionary
                elemDict.Add ELEMENT_KEY, elements(j).elementId
                elemCol.Add elemDict
            Next j
            Set args(i) = elemCol
        Case Else
            args(i) = argumentList(i)
        End Select
    Next i
    
    serializeScriptInputs = args
End Function

Private Function deserializeScriptResponse(responseValue As Object) As Object
    'this function replaces the ExecuteScript response representation of an element, a collection of elements,
    'and a shadow root with a WebElement object, a WebElements object, and a WebShadowRoot object, respectively
    'its recursive designed allows to search and replace a nested response structure
    Dim i As Long
    Dim vkey As Variant
    Dim obj As Object
    Dim numItems As Long
    Dim isElementCollection As Boolean
    Dim elems As WebElements
    
    Select Case TypeName(responseValue)
    Case "Collection"
        isElementCollection = True
        numItems = responseValue.Count
        
        'loop through all items of the collection, looking for objects
        For i = 1 To numItems
            If IsObject(responseValue.Item(i)) Then
                Set obj = deserializeScriptResponse(responseValue.Item(i))
                
                If TypeName(obj) <> "WebElement" Then isElementCollection = False
                
                responseValue.Remove i
                If i = numItems Then
                    responseValue.Add obj
                Else
                    responseValue.Add obj, , i
                End If
            Else
                isElementCollection = False
            End If
        Next i
        
        If isElementCollection Then
            'replace the collection with a WebElements object
            Set elems = New WebElements
            For i = 1 To responseValue.Count
                elems.Add responseValue.Item(i)
            Next i
            Set responseValue = elems
        End If
    Case "Dictionary"
        'check if its an element or shadow root representation and if so, replace with WebElement or WebShadowRoot object
        If responseValue.Exists(ELEMENT_KEY) Then 'replace with a WebElement object
            Set responseValue = toWebElement(responseValue(ELEMENT_KEY))
        ElseIf responseValue.Exists(SHADOWROOT_KEY) Then 'replace with a WebShadowRoot object
            Set responseValue = toShadowRoot(responseValue(SHADOWROOT_KEY))
        Else 'check each key value for collection or dictionary
            For Each vkey In responseValue.keys
                If IsObject(responseValue.Item(vkey)) Then
                    Set responseValue.Item(vkey) = deserializeScriptResponse(responseValue.Item(vkey))
                End If
            Next vkey
        End If
    End Select
        
    Set deserializeScriptResponse = responseValue
End Function

Private Function FileClosed(ByVal filePath As String) As Boolean
    Dim fso As New FileSystemObject
    On Error Resume Next
    fso.MoveFile filePath, filePath
    FileClosed = (Err.Number = 0)
End Function

Private Function osKeyMapper(ByVal keyString As String) As String
    Dim oRegExp As New VBScript_RegExp_55.RegExp
    Dim mappedValue As String
    Dim i As Long
    Dim key As String
    Dim keyStringSave As String

    'make map array static
    Static map(0 To 93) As String
    Static initMap As Boolean

    If Not initMap Then
        'create lookup array where index corresponds to Hex value of Selenium special key
        map(0) = vbNullChar
        map(1) = "{BREAK}" 'Cancel key - OS-specific keystroke sequence that performs a cancel action ^break
        map(2) = "{HELP}"
        map(3) = "{BACKSPACE}"
        map(4) = "{TAB}"
        map(5) = "{CLEAR}"
        map(6) = "{ENTER}" 'Return
        map(7) = "{ENTER}"
        map(8) = "+" 'Shift
        map(9) = "^" 'Ctrl
        map(10) = "%" 'Alt
        map(11) = "" 'The pause key
        map(12) = "{ESCAPE}"
        map(13) = Chr$(32) 'Space key
        map(14) = "{PGUP}"
        map(15) = "{PGDN}"
        map(16) = "{END}"
        map(17) = "{HOME}"
        map(18) = "{LEFT} "
        map(19) = "{UP} "
        map(20) = "{RIGHT} "
        map(21) = "{DOWN} "
        map(22) = "{INSERT}"
        map(23) = "{DELETE}"
        map(24) = ";"
        map(25) = "="
        map(26) = "0"
        map(27) = "1"
        map(28) = "2"
        map(29) = "3"
        map(30) = "4"
        map(31) = "5"
        map(32) = "6"
        map(33) = "7"
        map(34) = "8"
        map(35) = "9"
        map(36) = "*"
        map(37) = "+"
        map(38) = ""
        map(39) = "-"
        map(40) = "."
        map(41) = "/"
        map(49) = "{F1}"
        map(50) = "{F2}"
        map(51) = "{F3}"
        map(52) = "{F4}"
        map(53) = "{F5}"
        map(54) = "{F6}"
        map(55) = "{F7}"
        map(56) = "{F8}"
        map(57) = "{F9}"
        map(58) = "{F10}"
        map(59) = "{F11}"
        map(60) = "{F12}"
        map(61) = "^{ESCAPE}" 'Meta or command key
        map(64) = vbNullString ' ZenkakuHankaku Key
        map(80) = "+"
        map(81) = "^"
        map(82) = "%"
        map(83) = "^{ESCAPE}" 'Meta or Command key
        map(84) = "{PGUP}"
        map(85) = "{PGDN}"
        map(86) = "{END}"
        map(87) = "{HOME}"
        map(88) = "{LEFT} "
        map(89) = "{UP} "
        map(90) = "{RIGHT} "
        map(91) = "{DOWN} "
        map(92) = "{INSERT}"
        map(93) = "{DELETE}"
        initMap = True
    End If
    
    'replace possible escaped special key strings with single (wide) character equivalents
    keyString = unEscapeUnicode(keyString)

    'escape keys corresponding to special VBA SendKeys chars with brackets {}
    oRegExp.Global = True
    oRegExp.Pattern = "([+^%~{}\[\]()])"
    keyString = oRegExp.Replace(keyString, "{$1}")
    
    'map potential Selenium special keys to VBA/VBScript Sendkeys counter-parts
    keyStringSave = keyString
    For i = 1 To Len(keyStringSave)
        key = Mid$(keyStringSave, i, 1)
        If AscWL(key) >= &HE000& And AscWL(key) <= &HE05D& Then
            'we have a special key
            mappedValue = map(AscWL(key) - &HE000&)
            If mappedValue = vbNullString Then Err.Raise 1, , "Error in using SendKeysToOS - key " & "\u" & VBA.Right$("0000" & VBA.Hex$(AscW(key)), 4) & " not supported"
            'replace Selenium special key occurrence with mapped VBA/VBScript version
            keyString = Replace$(keyString, key, mappedValue, , 1)
        End If
    Next i

    osKeyMapper = keyString
End Function

Private Function timeMStoCurrency(ByVal milliseconds As Long) As Currency
    Static perSecond As Currency
    If perSecond = 0 Then GetFrequency perSecond
    timeMStoCurrency = CCur(milliseconds) * (perSecond / 1000)
End Function

Private Function waitForIsCommand(cmd As Variant, element As WebElement, ByVal maxWaitTimeMS As Long) As Boolean
    'this function used in IsDisplayed, IsEnabled, and IsSelected commands to facilitate optional max wait time
    Dim timeStart As Currency
    Dim timeEnd As Currency
    Dim timeNow As Currency
    Dim data As New Dictionary

    GetTime timeStart 'in currency
    'calculate time to quit in currency based on max time to wait in MS
    timeEnd = timeStart + timeMStoCurrency(Max(maxWaitTimeMS, 0))
    
    data.Add "id", element.elementId
    
    Do
        If execute(cmd, data)("value") Then
            waitForIsCommand = True
            Exit Function
        End If
        
        sleep 50  'ms
        GetTime timeNow
    Loop Until timeNow > timeEnd
    waitForIsCommand = False
End Function

Friend Function decodeUrl(ByVal encodedUrl As String) As String
    decodeUrl = ExecuteScript("return decodeURI('" & encodedUrl & "')")
End Function

Private Function collectionToArray(c As Variant) As Variant()
    Dim row As Collection, a() As Variant, j As Long, k As Long, cell As Variant
    'assumes the incoming collection is "regular" shaped
    'use of for each is more performative
    ReDim a(1 To c.Count, 1 To c(1).Count)
    k = 0
    For Each row In c
        k = k + 1
        j = 0
        For Each cell In row
            j = j + 1
            If TypeName(cell) = "Collection" Then
                a(k, j) = collectionToArray(cell)
            Else
                If Not IsNull(cell) Then a(k, j) = cell
            End If
        Next cell
    Next row
    collectionToArray = a
End Function

Private Function getScript(ByVal scriptName As String) As String
    'this function was auto-generated from twinBASIC project resources
    'this way the scripts can be managed from one source - see convertScriptsForVBA in tB project
    Dim script As String
    Select Case scriptName
    Case "TableToArray.js"
        script = vbNullString
        script = script & "function htmlTableToArray(table, skipHeader, skipFooter, createSpanData, ignoreCellFormatting) {" & vbCrLf
        script = script & "    // This function recursively converts [nested] table[s] into an array [vba collection]" & vbCrLf
        script = script & "        " & vbCrLf
        script = script & "    let maxCols = 0;" & vbCrLf
        script = script & "    // v is output array" & vbCrLf
        script = script & "    let v = [];" & vbCrLf
        script = script & "    // vrs is array to keep track of row span count if createSpanData = true" & vbCrLf
        script = script & "    let vrs = [];" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Calculate the maximum number of columns needed for the arrays" & vbCrLf
        script = script & "    for (let row of table.rows) {" & vbCrLf
        script = script & "        if (row.cells.length > maxCols) {" & vbCrLf
        script = script & "            maxCols = row.cells.length;" & vbCrLf
        script = script & "        }" & vbCrLf
        script = script & "    }" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Initialize the v and vrs arrays" & vbCrLf
        script = script & "    for (let i = 0; i < table.rows.length; i++) {" & vbCrLf
        script = script & "        v[i] = new Array(maxCols);" & vbCrLf
        script = script & "        if (createSpanData) {vrs[i] = new Array(maxCols).fill(1);}" & vbCrLf
        script = script & "    }" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Extract cell data from each row and store it in the array" & vbCrLf
        script = script & "    for (let row of table.rows) {" & vbCrLf
        script = script & "        let colIdx = 0;" & vbCrLf
        script = script & "        for (let cell of row.cells) {" & vbCrLf
        script = script & "            let foundTable = false;" & vbCrLf
        script = script & vbCrLf
        script = script & "            // Check if the cell contains a table, process only the first table if found" & vbCrLf
        script = script & "            if (cell.children.length > 0) {" & vbCrLf
        script = script & "                for (let cellChild of cell.children) {" & vbCrLf
        script = script & "                    if (cellChild.tagName.toUpperCase() === 'TABLE') {" & vbCrLf
        script = script & "                        // We have a nested table..." & vbCrLf
        script = script & "                        v[row.rowIndex][colIdx] = htmlTableToArray(cellChild, skipHeader, skipFooter, createSpanData, ignoreCellFormatting);" & vbCrLf
        script = script & "                        foundTable = true;" & vbCrLf
        script = script & "                        break;" & vbCrLf
        script = script & "                    }" & vbCrLf
        script = script & "                }" & vbCrLf
        script = script & "            }" & vbCrLf
        script = script & vbCrLf
        script = script & "            // If no table found, store the text of the cell" & vbCrLf
        script = script & "            if (!foundTable) {" & vbCrLf
        script = script & "                // Store the contents of the cell in output array" & vbCrLf
        script = script & "                if (ignoreCellFormatting) {" & vbCrLf
        script = script & "                    // Store the complete text content, including hidden text" & vbCrLf
        script = script & "                    v[row.rowIndex][colIdx] = cell.textContent.replace(/\xA0/g,' ');}" & vbCrLf
        script = script & "                else {" & vbCrLf
        script = script & "                    // Store the visible text content, including <br>'s and other white space formatting" & vbCrLf
        script = script & "                    v[row.rowIndex][colIdx] = cell.innerText.replace(/\xA0/g,' ');" & vbCrLf
        script = script & "                }" & vbCrLf
        script = script & "                " & vbCrLf
        script = script & "                // Handle col spans if createSpanData is true" & vbCrLf
        script = script & "                if (createSpanData) {" & vbCrLf
        script = script & "                    // Store row span data for use later" & vbCrLf
        script = script & "                    vrs[row.rowIndex][colIdx] = cell.rowSpan;" & vbCrLf
        script = script & "                    let colSpan = cell.colSpan;" & vbCrLf
        script = script & "                    if (colSpan > 1) {" & vbCrLf
        script = script & "                        // Propogate column span data" & vbCrLf
        script = script & "                        for (let i = 1; i < colSpan; i++) {" & vbCrLf
        script = script & "                            v[row.rowIndex][colIdx + i] = v[row.rowIndex][colIdx];" & vbCrLf
        script = script & "                        }" & vbCrLf
        script = script & "                        colIdx += colSpan - 1;" & vbCrLf
        script = script & "                    }" & vbCrLf
        script = script & "                }" & vbCrLf
        script = script & "            }" & vbCrLf
        script = script & "            colIdx += 1;" & vbCrLf
        script = script & "        }" & vbCrLf
        script = script & "    }" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Handle row spans if createSpanData is true" & vbCrLf
        script = script & "    if (createSpanData) {" & vbCrLf
        script = script & "        // Propogate row span data if needed" & vbCrLf
        script = script & "        for (let i = 0; i < v.length; i++) {" & vbCrLf
        script = script & "            for (let j = 0; j < v[i].length; j++) {" & vbCrLf
        script = script & "                let rowSpan = vrs[i][j];" & vbCrLf
        script = script & "                if (rowSpan > 1) {" & vbCrLf
        script = script & "                    for (let k = i + 1; k < i + rowSpan; k++) {" & vbCrLf
        script = script & "                        // Insert a copy of cell data from row with span" & vbCrLf
        script = script & "                        v[k].splice(j, 0, v[i][j]);" & vbCrLf
        script = script & "                        v[k].pop();" & vbCrLf
        script = script & "                        vrs[k].splice(j, 0, 1);" & vbCrLf
        script = script & "                        vrs[k].pop();" & vbCrLf
        script = script & "                    }" & vbCrLf
        script = script & "                }" & vbCrLf
        script = script & "            }" & vbCrLf
        script = script & "        }" & vbCrLf
        script = script & "    }" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Remove the header and footer rows if called for" & vbCrLf
        script = script & "    if (skipHeader) {" & vbCrLf
        script = script & "        if (table.querySelector('thead') !== null) {" & vbCrLf
        script = script & "            v.shift();" & vbCrLf
        script = script & "        }" & vbCrLf
        script = script & "    }" & vbCrLf
        script = script & "    if (skipFooter) {" & vbCrLf
        script = script & "        if (table.querySelector('tfoot') !== null) {" & vbCrLf
        script = script & "            v.pop();" & vbCrLf
        script = script & "        }" & vbCrLf
        script = script & "    }" & vbCrLf
        script = script & "    return v;" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & vbCrLf
        script = script & "const elem = arguments[0];" & vbCrLf
        script = script & vbCrLf
        script = script & "// Handle case if incoming element's tag is tbody" & vbCrLf
        script = script & "if (elem.tagName.toUpperCase() === 'TABLE') {" & vbCrLf
        script = script & "    var table = elem;}" & vbCrLf
        script = script & "else if (elem.tagName.toUpperCase() === 'TBODY'){" & vbCrLf
        script = script & "    var table = elem.parentElement;}" & vbCrLf
        script = script & "else {" & vbCrLf
        script = script & "    return false;" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & "// Convert table element to an array (vba collection)" & vbCrLf
        script = script & "return htmlTableToArray(table, arguments[1], arguments[2], arguments[3], arguments[4]);" & vbCrLf
        script = script & vbCrLf
    Case "SanitizeHTML.js"
        script = vbNullString
        script = script & "function sanitizeHTML(str) {" & vbCrLf
        script = script & "    // This function renders html source 'offline' by disabling dynamic content, while leaving the DOM tree intact." & vbCrLf
        script = script & "    // The source is loaded into a simulated document fragment using a div element as the root." & vbCrLf
        script = script & "    // This way the source can be parsed using DOM while disconnected from a html document root." & vbCrLf
        script = script & "    " & vbCrLf
        script = script & "    // Rename html, head, and body tags to dummy names" & vbCrLf
        script = script & "    str = str.replace(/<html/gi, '<html_').replace(/<\/html/gi, '</html_');" & vbCrLf
        script = script & "    str = str.replace(/<head/gi, '<head_').replace(/<\/head/gi, '</head_');" & vbCrLf
        script = script & "    str = str.replace(/<body/gi, '<body_').replace(/<\/body/gi, '</body_');" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Create a new DOM parser and a dummy div element to simulate document fragment" & vbCrLf
        script = script & "    const parser = new DOMParser();" & vbCrLf
        script = script & "    const doc = parser.parseFromString('<div>' + str + '</div>', 'text/html');" & vbCrLf
        script = script & "    const parentElem = doc.querySelector('div');" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable script elements" & vbCrLf
        script = script & "    const scripts = parentElem.querySelectorAll('script');" & vbCrLf
        script = script & "    scripts.forEach(script => {" & vbCrLf
        script = script & "        script.innerText = ''; // Remove script content" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable meta refresh redirect" & vbCrLf
        script = script & "    const metas = parentElem.querySelectorAll('meta[http-equiv=""refresh""]');" & vbCrLf
        script = script & "    metas.forEach(meta => {" & vbCrLf
        script = script & "        meta.setAttribute('content', ''); // Disable refresh attribute" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable src attributes" & vbCrLf
        script = script & "    const srcElems = parentElem.querySelectorAll('[src]');" & vbCrLf
        script = script & "    srcElems.forEach(elem => {" & vbCrLf
        script = script & "        elem.setAttribute('src', ''); // Remove src attribute" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable srcset attributes" & vbCrLf
        script = script & "    const srcsetElems = parentElem.querySelectorAll('[srcset]');" & vbCrLf
        script = script & "    srcsetElems.forEach(elem => {" & vbCrLf
        script = script & "        elem.setAttribute('srcset', ''); // Remove srcset attribute" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable href attributes, except about:blank ones" & vbCrLf
        script = script & "    const hrefElems = parentElem.querySelectorAll('[href]');" & vbCrLf
        script = script & "    hrefElems.forEach(elem => {" & vbCrLf
        script = script & "        const href = elem.getAttribute('href');" & vbCrLf
        script = script & "        if (!href.startsWith('about:blank')) {" & vbCrLf
        script = script & "            elem.setAttribute('href', ''); // Remove href attribute" & vbCrLf
        script = script & "        }" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable rel attributes" & vbCrLf
        script = script & "    const relElems = parentElem.querySelectorAll('[rel]');" & vbCrLf
        script = script & "    relElems.forEach(elem => {" & vbCrLf
        script = script & "        elem.setAttribute('rel', ''); // Remove rel attribute" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable url() in style elements (e.g., background-image URLs)" & vbCrLf
        script = script & "    const styleElems = parentElem.querySelectorAll('style');" & vbCrLf
        script = script & "    styleElems.forEach(style => {" & vbCrLf
        script = script & "        let css = style.innerHTML.toLowerCase();" & vbCrLf
        script = script & "        let regex = /url\((.*?)\)/g;" & vbCrLf
        script = script & "        css = css.replace(regex, 'url()'); // Remove url() references" & vbCrLf
        script = script & "        style.innerHTML = css; // Update the style content" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable url() in inline style attributes" & vbCrLf
        script = script & "    const inlineStyleElems = parentElem.querySelectorAll('[style*=""url(""]');" & vbCrLf
        script = script & "    inlineStyleElems.forEach(elem => {" & vbCrLf
        script = script & "        let style = elem.getAttribute('style');" & vbCrLf
        script = script & "        let regex = /url\((.*?)\)/g;" & vbCrLf
        script = script & "        style = style.replace(regex, 'url()'); // Remove url() references" & vbCrLf
        script = script & "        elem.setAttribute('style', style); // Update the style attribute" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable action attributes in form elements" & vbCrLf
        script = script & "    const formElems = parentElem.querySelectorAll('form[action]');" & vbCrLf
        script = script & "    formElems.forEach(form => {" & vbCrLf
        script = script & "        form.setAttribute('action', ''); // Remove action attribute" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable 'as' attribute in link elements with value 'script'" & vbCrLf
        script = script & "    const linkElems = parentElem.querySelectorAll('link[as=""script""]');" & vbCrLf
        script = script & "    linkElems.forEach(link => {" & vbCrLf
        script = script & "        link.setAttribute('as', ''); // Remove as='script'" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable data attributes in object elements" & vbCrLf
        script = script & "    const objectElems = parentElem.querySelectorAll('object[data]');" & vbCrLf
        script = script & "    objectElems.forEach(obj => {" & vbCrLf
        script = script & "        obj.setAttribute('data', ''); // Remove data attribute" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Disable event attributes (onclick, onload, etc.)" & vbCrLf
        script = script & "    const eventAttrs = [" & vbCrLf
        script = script & "        'onclick', 'onload', 'onoffline', 'ononline', 'onunload', 'onpageshow'," & vbCrLf
        script = script & "        'onpagehide', 'onerror', 'onresize', 'onhashchange', 'onbeforeunload'," & vbCrLf
        script = script & "        'onpopstate', 'onmessage'" & vbCrLf
        script = script & "    ];" & vbCrLf
        script = script & "    eventAttrs.forEach(eventAttr => {" & vbCrLf
        script = script & "        const elems = parentElem.querySelectorAll(`[${eventAttr}]`);" & vbCrLf
        script = script & "        elems.forEach(elem => {" & vbCrLf
        script = script & "            elem.removeAttribute(eventAttr); // Remove event handler attributes" & vbCrLf
        script = script & "            // Add dummy attributes" & vbCrLf
        script = script & "            elem.setAttribute(eventAttr + '___xxx123', ''); // Adding a dummy attribute" & vbCrLf
        script = script & "        });" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Get the sanitized HTML as a string" & vbCrLf
        script = script & "    let strOut = parentElem.innerHTML;" & vbCrLf
        script = script & vbCrLf
        script = script & "    // Rename dummy tags back to original tag names" & vbCrLf
        script = script & "    strOut = strOut.replace(/<html_/g, '<html').replace(/<\/html_/g, '</html');" & vbCrLf
        script = script & "    strOut = strOut.replace(/<head_/g, '<head').replace(/<\/head_/g, '</head');" & vbCrLf
        script = script & "    strOut = strOut.replace(/<body_/g, '<body').replace(/<\/body_/g, '</body');" & vbCrLf
        script = script & "    strOut = strOut.replace(/___xxx123/g, ''); // Remove dummy attribute" & vbCrLf
        script = script & vbCrLf
        script = script & "    return strOut;" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & " " & vbCrLf
        script = script & "return sanitizeHTML(arguments[0]);" & vbCrLf
        script = script & " " & vbCrLf
    Case "ScrollIntoView.js"
        script = vbNullString
        script = script & "// Determine through an element's css properties if it is scrollable (overflow content)" & vbCrLf
        script = script & "function isScrollable(element){" & vbCrLf
        script = script & "    const style = window.getComputedStyle(element);" & vbCrLf
        script = script & "    return (element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth)" & vbCrLf
        script = script & "    && (style.overflow === 'auto' || style.overflow === 'scroll' || style.overflowY === 'auto' ||" & vbCrLf
        script = script & "    style.overflowY === 'scroll' || style.overflowX === 'auto' || style.overflowX === 'scroll');" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & vbCrLf
        script = script & "// Recursively find an element's scroll container (scrollable parent)" & vbCrLf
        script = script & "function getScrollContainer(element){" & vbCrLf
        script = script & "    if (!element) return document.documentElement;" & vbCrLf
        script = script & "    if (isScrollable(element)) {return element;}" & vbCrLf
        script = script & "    else {return getScrollContainer(element.parentElement);}" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & vbCrLf
        script = script & "// Determine if the element is the document root" & vbCrLf
        script = script & "function isDocumentElement(obj){return (obj === document.documentElement);}" & vbCrLf
        script = script & vbCrLf
        script = script & "// Get the value of the container element's scroll behavior ('auto' or 'smooth')" & vbCrLf
        script = script & "function getScrollBehavior(container){return getComputedStyle(container).getPropertyValue('scroll-behavior');}" & vbCrLf
        script = script & vbCrLf
        script = script & "// This function calls the scrollIntoView method on the element for a smooth scroll" & vbCrLf
        script = script & "// and listens for the scrollend event to resolve a promise" & vbCrLf
        script = script & "const scrollIntoView = function(elem, container, options = {}) {" & vbCrLf
        script = script & "    return new Promise(function(resolve, _) {" & vbCrLf
        script = script & "        container.addEventListener('scrollend', (e) => {" & vbCrLf
        script = script & "            resolve('animation call');" & vbCrLf
        script = script & "        }, {once: true});" & vbCrLf
        script = script & "        elem.scrollIntoView(options);" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & "};" & vbCrLf
        script = script & vbCrLf
        script = script & "// Set a timeout to create a fallback in case the scroll operation takes longer than 1500 ms." & vbCrLf
        script = script & "// This should only trigger if scrollend event does not trigger due to user trying to scroll in a" & vbCrLf
        script = script & "// non-scrollable container (animated scrolls in Chromium and FF are time-limited and should finish < 1500 ms)." & vbCrLf
        script = script & "let timeoutId;" & vbCrLf
        script = script & "const timeoutPromise = new Promise((resolve, _) => {" & vbCrLf
        script = script & "    timeoutId = setTimeout(() => resolve('animation call with timeout'), 1500);" & vbCrLf
        script = script & "});" & vbCrLf
        script = script & vbCrLf
        script = script & "// processing starts here..." & vbCrLf
        script = script & "var elem = arguments[0];" & vbCrLf
        script = script & "const options = JSON.parse(arguments[1]);" & vbCrLf
        script = script & vbCrLf
        script = script & "// prepare to manage animation if smooth" & vbCrLf
        script = script & "if (options.behavior === 'smooth') {var container = getScrollContainer(elem);}" & vbCrLf
        script = script & vbCrLf
        script = script & "// if desired scroll is set to auto (default), then see if we can resolve by finding container's scroll-behavior" & vbCrLf
        script = script & "if (options.behavior === 'auto') {" & vbCrLf
        script = script & "    var container = getScrollContainer(elem);" & vbCrLf
        script = script & "    if (getScrollBehavior(container) === 'auto') {options.behavior = 'instant';}" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & vbCrLf
        script = script & "// if instant, then make the standard call, otherwise manage animation" & vbCrLf
        script = script & "if (options.behavior === 'instant') {" & vbCrLf
        script = script & "    elem.scrollIntoView(options); return 'standard call';}" & vbCrLf
        script = script & "else {" & vbCrLf
        script = script & "    // container cannot be documentElement for event listener" & vbCrLf
        script = script & "    if (isDocumentElement(container)) {container = document;}" & vbCrLf
        script = script & "    // wait for animation to complete or non-error throwing timeout, which ever one happens first" & vbCrLf
        script = script & "    return Promise.race ([scrollIntoView(elem, container, options), timeoutPromise]).finally(() => {" & vbCrLf
        script = script & "        clearTimeout (timeoutId); // clear the timeout when the Promise race finishes" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & vbCrLf
    Case "Scroll.js"
        script = vbNullString
        script = script & "// Determine if the element is the document root" & vbCrLf
        script = script & "function isDocumentElement(obj){return (obj === document.documentElement);}" & vbCrLf
        script = script & vbCrLf
        script = script & "// Get the value of the container element's scroll behavior ('auto' or 'smooth')" & vbCrLf
        script = script & "function getScrollBehavior(container){return getComputedStyle(container).getPropertyValue('scroll-behavior');}" & vbCrLf
        script = script & vbCrLf
        script = script & "// This function calls the scrollTo method on the element for a smooth scroll" & vbCrLf
        script = script & "// and listens for the scrollend event to resolve a promise" & vbCrLf
        script = script & "const scroll = function(elem, container, scrollType, options = {}) {" & vbCrLf
        script = script & "    return new Promise(function(resolve, _) {" & vbCrLf
        script = script & "        container.addEventListener('scrollend', (e) => {" & vbCrLf
        script = script & "            resolve('animation call');" & vbCrLf
        script = script & "        }, {once: true});" & vbCrLf
        script = script & "        if (scrollType === 'to') {elem.scrollTo(options);} else {elem.scrollBy(options);}" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & "};" & vbCrLf
        script = script & vbCrLf
        script = script & "// Set a timeout to create a fallback in case the scroll operation takes longer than 1500 ms." & vbCrLf
        script = script & "// This should only trigger if scrollend event does not trigger due to user trying to scroll in a" & vbCrLf
        script = script & "// non-scrollable container (animated scrolls in Chromium and FF are time-limited and should finish < 1500 ms)." & vbCrLf
        script = script & "let timeoutId;" & vbCrLf
        script = script & "const timeoutPromise = new Promise((resolve, _) => {" & vbCrLf
        script = script & "    timeoutId = setTimeout(() => resolve('animation call with timeout'), 1500);" & vbCrLf
        script = script & "});" & vbCrLf
        script = script & vbCrLf
        script = script & "// processing starts here..." & vbCrLf
        script = script & "var elem = arguments[0];" & vbCrLf
        script = script & "if (typeof elem === 'string') {var elem =  document.documentElement;};" & vbCrLf
        script = script & "const scrollType = arguments[1];" & vbCrLf
        script = script & "const options = JSON.parse(arguments[2]);" & vbCrLf
        script = script & "var container = elem;" & vbCrLf
        script = script & vbCrLf
        script = script & "// if desired scroll is set to auto (default), then see if we can resolve by finding container's scroll-behavior" & vbCrLf
        script = script & "if (options.behavior === 'auto') {" & vbCrLf
        script = script & "    if (getScrollBehavior(container) === 'auto') {options.behavior = 'instant';}" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & vbCrLf
        script = script & "// if instant, then make the standard call, otherwise manage animation" & vbCrLf
        script = script & "if (options.behavior === 'instant') {" & vbCrLf
        script = script & "    if (scrollType === 'to') {elem.scrollTo(options);} else {elem.scrollBy(options);} " & vbCrLf
        script = script & "    return 'standard call';}" & vbCrLf
        script = script & "else {" & vbCrLf
        script = script & "    // container cannot be documentElement for event listener" & vbCrLf
        script = script & "    if (isDocumentElement(container)) {container = document;}" & vbCrLf
        script = script & "    // wait for animation to complete ot timeout, which ever one happens first" & vbCrLf
        script = script & "    return Promise.race ([scroll(elem, container, scrollType, options), timeoutPromise]).finally(() => {" & vbCrLf
        script = script & "        clearTimeout (timeoutId); // clear the timeout when the Promise race finishes" & vbCrLf
        script = script & "    });" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & vbCrLf
    Case "GetResourceUrl.js"
        script = vbNullString
        script = script & "function getAbsolutePath(src) {" & vbCrLf
        script = script & "    // return new URL(src, window.location.href).href;" & vbCrLf
        script = script & "    return URL.parse(src, window.location.href).href;" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & vbCrLf
        script = script & "const elem = arguments[0]; " & vbCrLf
        script = script & "const attr = arguments[1];" & vbCrLf
        script = script & "const tagName = elem.tagName;" & vbCrLf
        script = script & vbCrLf
        script = script & "// make sure attribute exists for element" & vbCrLf
        script = script & "if (!elem.hasAttribute(attr)) {return 'Error in DownloadResource method: could not find Attribute ';}" & vbCrLf
        script = script & "    " & vbCrLf
        script = script & "let resUrl;" & vbCrLf
        script = script & vbCrLf
        script = script & "// if srcset attribute for IMG tag then find the highest quality image" & vbCrLf
        script = script & "if (tagName.toUpperCase() === 'IMG' && attr.toLowerCase() === 'srcset') {" & vbCrLf
        script = script & "    " & vbCrLf
        script = script & "    const srcset = elem.getAttribute(attr);" & vbCrLf
        script = script & "    " & vbCrLf
        script = script & "    // Parse the srcset string:" & vbCrLf
        script = script & "    const sources = srcset.split(',').map(source => {" & vbCrLf
        script = script & "        const [url, descriptor] = source.trim().split(' ');" & vbCrLf
        script = script & "        return { url, descriptor };" & vbCrLf
        script = script & "    });    " & vbCrLf
        script = script & vbCrLf
        script = script & "    // Determine the highest quality image:" & vbCrLf
        script = script & "    let highestQuality = sources[0]; " & vbCrLf
        script = script & vbCrLf
        script = script & "    for (const source of sources) {" & vbCrLf
        script = script & "        if (source.descriptor.endsWith('x')) {" & vbCrLf
        script = script & "            const pixelRatio = parseFloat(source.descriptor);" & vbCrLf
        script = script & "            if (pixelRatio > parseFloat(highestQuality.descriptor)) {" & vbCrLf
        script = script & "                highestQuality = source;" & vbCrLf
        script = script & "            }" & vbCrLf
        script = script & "        } else if (source.descriptor.endsWith('w')) {" & vbCrLf
        script = script & "            const width = parseInt(source.descriptor);" & vbCrLf
        script = script & "            if (width > parseInt(highestQuality.descriptor)) {" & vbCrLf
        script = script & "                highestQuality = source;" & vbCrLf
        script = script & "            }" & vbCrLf
        script = script & "        }" & vbCrLf
        script = script & "    }" & vbCrLf
        script = script & "    resUrl = highestQuality.url;" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & "else {" & vbCrLf
        script = script & "    resUrl = elem.getAttribute(attr);" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & vbCrLf
        script = script & "// Resolve the URL in case it is relative" & vbCrLf
        script = script & "const absolutePath = getAbsolutePath(resUrl);" & vbCrLf
        script = script & vbCrLf
        script = script & "return absolutePath;" & vbCrLf
        script = script & vbCrLf
    Case "GetScrollContainer.js"
        script = vbNullString
        script = script & "// Determine through an element's css properties if it is scrollable (overflow content)" & vbCrLf
        script = script & "function isScrollable(element){" & vbCrLf
        script = script & "    const style = window.getComputedStyle(element);" & vbCrLf
        script = script & "    return (element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth)" & vbCrLf
        script = script & "        && (style.overflow === 'auto' || style.overflow === 'scroll' || style.overflowY === 'auto' ||" & vbCrLf
        script = script & "        style.overflowY === 'scroll' || style.overflowX === 'auto' || style.overflowX === 'scroll');" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & "// Recursively find an element's scroll container (scrollable parent)" & vbCrLf
        script = script & "function getScrollContainer(element){" & vbCrLf
        script = script & "    if (!element) {return document.documentElement;}" & vbCrLf
        script = script & "    if (isScrollable(element)) {" & vbCrLf
        script = script & "        return element;" & vbCrLf
        script = script & "    } else {" & vbCrLf
        script = script & "        return getScrollContainer(element.parentElement);" & vbCrLf
        script = script & "    }" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & "return getScrollContainer(arguments[0]);" & vbCrLf
    Case "PrettyPrint.xml"
        script = vbNullString
        script = script & "<?xml version=""1.0""?>" & vbCrLf
        script = script & "<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">" & vbCrLf
        script = script & "    <xsl:strip-space elements=""*""/>" & vbCrLf
        script = script & "    <xsl:output method=""xml"" indent=""yes"" encoding=""UTF-8""/>" & vbCrLf
        script = script & "    <xsl:template match=""node() | @*"">" & vbCrLf
        script = script & "        <xsl:copy>" & vbCrLf
        script = script & "            <xsl:apply-templates select=""node() | @*""/>" & vbCrLf
        script = script & "        </xsl:copy>" & vbCrLf
        script = script & "    </xsl:template>" & vbCrLf
        script = script & "</xsl:stylesheet>" & vbCrLf
    Case "HTMLToData.js"
        script = vbNullString
        script = script & "function toDataURI(str) {" & vbCrLf
        script = script & "    //remove unneeded whitespace before encoding" & vbCrLf
        script = script & "    const lines = str.replace(/\r\n/g, '\n').split('\n');" & vbCrLf
        script = script & "    const trimmedLines = lines.map(line => line.trim());" & vbCrLf
        script = script & "    const cleanedString = trimmedLines.join('\n');" & vbCrLf
        script = script & "    //now do the encoding and build the uri" & vbCrLf
        script = script & "    return 'data:text/html,' + encodeURIComponent(cleanedString.toWellFormed());" & vbCrLf
        script = script & "}" & vbCrLf
        script = script & "return toDataURI(arguments[0]);" & vbCrLf
    End Select
    getScript = script
End Function

Private Sub Class_Terminate()
    'delete temp files if they were created
    If cleanupTempFiles Then DeleteFiles ResolvePath("%TEMP%\seleniumVBAtmp*.vbs", False)
End Sub
