[COMCreatable(False)]
[PredeclaredId(True)]
[Hidden(True)]
[Description("This class exposes a drop-in replacement for VBSript's regular expression object model.")]
Private Class RegExp
    Option Explicit
    ' ==========================================================================
    ' RegExp version 1.00
    '
    ' A drop-in replacement for VBSript's regular expression object model 
    ' by wrapping sihlfall's excellent vba-regex (https://github.com/sihlfall/vba-regex)
    '
    ' The dependency for this class is the StaticRegex module. For how to obtain the 
    ' latest copy, please see following link:
    ' https://github.com/sihlfall/vba-regex/tree/master/aio
    '
    ' Contact Info: https://github.com/GCUser99
    ' ==========================================================================
    ' MIT License
    '
    ' Copyright (c) 2025, GCUser99
    '
    ' Permission is hereby granted, free of charge, to any person obtaining a copy
    ' of this software and associated documentation files (the "Software"), to deal
    ' in the Software without restriction, including without limitation the rights
    ' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    ' copies of the Software, and to permit persons to whom the Software is
    ' furnished to do so, subject to the following conditions:
    '
    ' The above copyright notice and this permission notice shall be included in all
    ' copies or substantial portions of the Software.
    '
    ' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    ' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    ' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    ' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    ' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    ' SOFTWARE.
    ' ==========================================================================   
    Private Enum BytecodeDescriptionConstant
        BYTECODE_IDX_MAX_PROPER_CAPTURE_SLOT = 0
        BYTECODE_IDX_N_IDENTIFIERS = 1
        BYTECODE_IDX_CASE_INSENSITIVE_INDICATOR = 2
        BYTECODE_IDENTIFIER_MAP_BEGIN = 3
        BYTECODE_IDENTIFIER_MAP_ENTRY_SIZE = 3
        BYTECODE_IDENTIFIER_MAP_ENTRY_START_IN_PATTERN = 0
        BYTECODE_IDENTIFIER_MAP_ENTRY_LENGTH_IN_PATTERN = 1
        BYTECODE_IDENTIFIER_MAP_ENTRY_ID = 2
        RE_QUANTIFIER_INFINITE = &H7FFFFFFF
    End Enum
    
    Private mGlobal As Boolean
    Private mMultiLine As Boolean
    Private mIgnoreCase As Boolean
    Private mPattern As String
    Private mDotAll As Boolean
    Private mIsInitialized As Boolean
    
    Private regex As StaticRegex.RegexTy
    
    [Description("Sets or Gets the options in use: g-global; m-multiline; i-ignore case; s-dot all. Example: 'gm' sets Global and MultiLine to 'True', IgnoreCase and DotAll to 'False'.")]
    Public Property Let Flags(ByVal pFlags As String)
        'this "convenience" property was borrowed from 
        'https://github.com/sihlfall/vba-regex/blob/master/stdvba_regex3/stdRegex3.cls
        'note that if a flag indicator is not present in the string, then it is set to False
        'user setting Flags value to vbNullString effectively sets all flags to False (default state)
        pFlags = LCase(pFlags)
        mGlobal = CBool(InStr(pFlags, "g"))
        mMultiLine = CBool(InStr(pFlags, "m"))
        IgnoreCase = CBool(InStr(pFlags, "i")) 'let property to handle isInitialized flag 
        mDotAll = CBool(InStr(pFlags, "s"))
    End Property
    Public Property Get Flags() As String
        If mGlobal Then Flags = Flags & "g"
        If mMultiLine Then Flags = Flags & "m"
        If mIgnoreCase Then Flags = Flags & "i"
        If mDotAll Then Flags = Flags & "s"
    End Property
    
    [Description("If 'True', all matches will be returned. If 'False', only the first match will be returned.")]
    Public Property Let Global(ByVal pGlobal As Boolean)
        mGlobal = pGlobal
    End Property
    Public Property Get Global() As Boolean
        Global = mGlobal
    End Property
    
    [Description("If 'True', '^' pattern will match the beginning of a line after a new line character and '$' will match the end of a line before a new line character. If 'False', '^' will match the beginning of the entire string and '$' will match the end of the entire string.")]
    Public Property Let MultiLine(ByVal pMultiLine As Boolean)
        mMultiLine = pMultiLine
    End Property
    Public Property Get MultiLine() As Boolean
        MultiLine = mMultiLine
    End Property
    
    [Description("If 'True', '.' pattern will match across new line charactors.")]
    Public Property Let DotAll(ByVal pDotAll As Boolean)
        mDotAll = pDotAll
    End Property
    Public Property Get DotAll() As Boolean
        DotAll = mDotAll
    End Property
    
    [Description("If 'True', matches will be case-insensitive. If 'False', matches will be case-sensitive.")]
    Public Property Let IgnoreCase(ByVal pIgnoreCase As Boolean)
        If pIgnoreCase <> mIgnoreCase Then
            mIgnoreCase = pIgnoreCase
            mIsInitialized = False
        End If
    End Property
    Public Property Get IgnoreCase() As Boolean
        IgnoreCase = mIgnoreCase
    End Property
    
    [Description("The regular expression pattern.")]
    Public Property Let Pattern(ByVal pPattern As String)
        If pPattern <> mPattern Then
            mPattern = pPattern
            mIsInitialized = False
        End If
    End Property
    Public Property Get Pattern() As String
        Pattern = mPattern
    End Property
    
    [Description("Returns a MatchCollection. Uses the Pattern property to search the sourceString.")]
    Public Function Execute(ByVal sourceString As String) As MatchCollection
        Dim matcherState As StaticRegex.MatcherStateTy
        Dim oMatches As MatchCollection
        Dim oMatch As Match
        Dim i As Long
        Dim submatchString As String
        Dim matchStart As Long, matchLength As Long
        Dim colNamedKeyMap As New Collection
        
        If Not mIsInitialized Then
            StaticRegex.InitializeRegex regex, mPattern, mIgnoreCase
            mIsInitialized = True
        End If
    
        StaticRegex.InitializeMatcherState matcherState, Not mGlobal, mMultiLine, mDotAll
    
        Dim colNames As New Collection
        Dim colEntryPoints As New Collection
        
        getNamedCapturesInfo colNames, colEntryPoints
        
        Set oMatches = New MatchCollection
        
        Do While StaticRegex.MatchNext(matcherState, regex, sourceString)
            
            With matcherState.captures
                Set oMatch = New Match
                matchStart = .entireMatch.start
                matchLength = .entireMatch.Length
                If matchStart > 0 Then
                    oMatch.Value = Mid$(sourceString, matchStart, matchLength)
                    oMatch.FirstIndex = matchStart - 1 'to match VBScript_RegExp_55 zero-based
                    oMatch.Length = matchLength
                Else
                    oMatch.Value = vbNullString
                End If
                
                If .nNumberedCaptures > 0 Then
                    Dim keymap() As String
                    ReDim keymap(1 To .nNumberedCaptures)
                
                    If .nNamedCaptures > 0 Then
                        'build a key-position map into the numbered capture collection
                        Dim referenced As Long
                        For i = 1 To colNames.Count
                            referenced = .namedCaptures(colEntryPoints(i))
                            If referenced <> -1 Then keymap(referenced) = colNames(i)
                        Next i
                    End If
                
                    'add captures to submatch collection - note that numbered captures includes any named captures too
                    For i = 0 To .nNumberedCaptures - 1
                        matchStart = .numberedCaptures(i).start
                        matchLength = .numberedCaptures(i).Length
                        If matchStart > 0 Then
                            submatchString = Mid$(sourceString, matchStart, matchLength)
                        Else
                            submatchString = vbNullString
                        End If
                        If keymap(i + 1) = vbNullString Then
                            oMatch.SubMatches.Add submatchString
                        Else
                            'we have a named capture - use name as submatch key
                            oMatch.SubMatches.Add submatchString, keymap(i + 1)
                        End If
                    Next i
                End If

                oMatches.Add oMatch
            End With
        Loop

        Set Execute = oMatches
    End Function
    
    [Description("Returns 'True' if Pattern finds a match in sourceString, otherwise returns 'False'.")]
    Public Function Test(ByVal sourceString As String) As Boolean
        If Not mIsInitialized Then
            StaticRegex.InitializeRegex regex, mPattern, mIgnoreCase
            mIsInitialized = True
        End If
        Test = StaticRegex.Test(regex, sourceString, mMultiLine, mDotAll)
    End Function
    
    [Description("Replaces matches with replaceString and returns the String with replacements made.")]
    Public Function Replace(ByVal sourceString As String, ByVal replaceString As String) As String
        If Not mIsInitialized Then
            StaticRegex.InitializeRegex regex, mPattern, mIgnoreCase
            mIsInitialized = True
        End If
        Replace = StaticRegex.Replace(regex, replaceString, sourceString, Not mGlobal, mMultiLine, mDotAll)
    End Function
    
    [Description("Splits an input string into an array of substrings at the positions defined by a regular expression match.")]
    Public Function Split(ByVal sourceString As String) As Collection
        If Not mIsInitialized Then
            StaticRegex.InitializeRegex regex, mPattern, mIgnoreCase
            mIsInitialized = True
        End If
        Set Split = StaticRegex.SplitByRegex(regex, sourceString, Not mGlobal, mMultiLine, mDotAll)
    End Function
    
    Private Sub getNamedCapturesInfo(ByRef colNames As Collection, ByRef colEntryPoints As Collection)
        'modified from https://github.com/sihlfall/vba-regex/blob/master/stdvba_regex3/stdRegex3.cls
        Dim identifierMapEnd As Long
        Dim currentEntry As Long
        Dim identifier As String
        
        identifierMapEnd = BYTECODE_IDENTIFIER_MAP_BEGIN + _
            BYTECODE_IDENTIFIER_MAP_ENTRY_SIZE * regex.bytecode(BYTECODE_IDX_N_IDENTIFIERS)
        currentEntry = BYTECODE_IDENTIFIER_MAP_BEGIN

        Do While currentEntry < identifierMapEnd
            identifier = Mid$( _
                regex.pattern, _
                regex.bytecode(currentEntry + BYTECODE_IDENTIFIER_MAP_ENTRY_START_IN_PATTERN), _
                regex.bytecode(currentEntry + BYTECODE_IDENTIFIER_MAP_ENTRY_LENGTH_IN_PATTERN) _
            )
            colNames.Add(identifier)
            colEntryPoints.Add(regex.bytecode(currentEntry + BYTECODE_IDENTIFIER_MAP_ENTRY_ID))
            currentEntry = currentEntry + BYTECODE_IDENTIFIER_MAP_ENTRY_SIZE
        Loop
    End Sub
    
    Private Sub Class_Initialize()
        mGlobal = False 'StaticRegex defaults to True
        mMultiLine = False
        mIgnoreCase = False
        mDotAll = False
    End Sub

End Class

[COMCreatable(False)]
[PredeclaredId(False)]
[Hidden(True)]
[Description("This class represents the results from a single regular expression match.")]
Private Class Match
    Option Explicit
    
    Private oSubMatches As SubMatches
    Private mValue As String
    Private mFirstIndex As Long
    Private mLength As Long

    [Description("Returns the SubMatches collection of submatch (Group) strings.")]
    Public Property Get SubMatches() As SubMatches
        Set SubMatches = oSubMatches
    End Property
    
    [Description("Returns the entire matched string")]
    [DefaultMember]
    Public Property Get Value() As String
        Value = mValue
    End Property
    Friend Property Let Value(ByVal pValue As String)
        mValue = pValue
    End Property
    
    [Description("Returns the character index position associated with the start of the match string. Note that the index is zero-based.")]
    Public Property Get FirstIndex() As Long
        FirstIndex = mFirstIndex
    End Property
    Friend Property Let FirstIndex(ByVal pFirstIndex As Long)
        mFirstIndex = pFirstIndex
    End Property
    
    [Description("Returns the character length of the match string.")]
    Public Property Get Length() As Long
        Length = mLength
    End Property
    Friend Property Let Length(ByVal pLength As Long)
        mLength = pLength
    End Property
    
    Private Sub Class_Initialize()
        Set oSubMatches = New SubMatches
    End Sub
    
    Private Sub Class_Terminate()
        Set oSubMatches = Nothing
    End Sub

End Class

[COMCreatable(False)]
[PredeclaredId(False)]
[Hidden(True)]
[Description("This class represents a collection of match objects.")]
Private Class MatchCollection
    Option Explicit

    Private colMatches As Collection
    
    Friend Sub Add(obj As Match)
        colMatches.Add obj
    End Sub
    
    [Description("Returns the number of Match objects found in the source string.")]
    Public Property Get Count() As Long
       Count = colMatches.Count
    End Property
    
    [Description("Returns the Match object associated with the provided index")]
    [DefaultMember]
    Public Property Get Item(ByVal pItemIndex As Variant) As Match
        'VBS is zero-based, but Collection is 1-based
        If pItemIndex + 1 >= 1 And pItemIndex + 1 <= colMatches.Count Then
            Set Item = colMatches.Item(pItemIndex + 1)
        Else
            Err.Raise(vbObjectError + 9, , "Requested item not found in Matches collection")
        End If
    End Property

    [Hidden]
    [Enumerator]
    Public Function NewEnum() As IUnknown
        Set NewEnum = colMatches.[_NewEnum]
    End Function

    Private Sub Class_Terminate()
        Set colMatches = Nothing
    End Sub

    Private Sub Class_Initialize()
        Set colMatches = New Collection
    End Sub

End Class

[COMCreatable(False)]
[PredeclaredId(False)]
[Hidden(True)]
[Description("This class provides the means to access SubMatch (Group) values.")]
Private Class SubMatches
    Option Explicit

    Private colSubMatches As Collection
    
    Friend Sub Add(ByVal val As String, Optional ByVal key As String)
        If key <> vbNullString Then
            colSubMatches.Add val, key
        Else
            colSubMatches.Add val
        End If
    End Sub
    
    [Description("Returns the number of SubMatch objects found in the source string.")]
    Public Property Get Count() As Long
       Count = colSubMatches.Count
    End Property

    [Description("Returns the SubMatch string associated with the provided index. Named groups are allowed.")]
    [DefaultMember]
    Public Property Get Item(ByVal pItemIndex As Variant) As String
        If Not IsNumeric(pItemIndex) Then
            If colSubMatches.Exists(pItemIndex) Then
                Item = colSubMatches.Item(pItemIndex)
            Else
                'all we know here is that either the key does not exists or
                'it does exists and has an empty value - so we must exit without an error...
            End If
        Else
            'VBS is zero-based, but Collection is 1-based
            If pItemIndex + 1 >= 1 And pItemIndex + 1 <= colSubMatches.Count Then
                Item = colSubMatches.Item(pItemIndex + 1) 'to match VBScript_RegExp_55 zero-based
            Else
                Err.Raise(vbObjectError + 9, , "Requested item not found in SubMatches collection")
            End If
        End If
    End Property

    [Hidden]
    [Enumerator]
    Public Function NewEnum() As IUnknown
        Set NewEnum = colSubMatches.[_NewEnum]
    End Function

    Private Sub Class_Terminate()
        Set colSubMatches = Nothing
    End Sub

    Private Sub Class_Initialize()
        Set colSubMatches = New Collection
    End Sub

End Class