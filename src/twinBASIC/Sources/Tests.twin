Private Module Tests
    
    Sub test_error()
        Dim driver As SeleniumVBA.WebDriver
        Dim html As String
        Dim elem As SeleniumVBA.WebElement
    
        Set driver = SeleniumVBA.New_WebDriver
    
        driver.StartChrome
    
        On Error Resume Next
        driver.ImplicitMaxWait = 2000
        Debug.Assert Err.Description = "invalid session id"
        On Error GoTo 0
    
        driver.OpenBrowser
    
        On Error Resume Next
        driver.ImplicitMaxWait = -999
        Debug.Assert Left(Err.Description, 54) = "invalid argument: value must be a non-negative integer"
        On Error GoTo 0
    
        'create a radio button sample
        html = "<!DOCTYPE html><html><head><title>Test Radio Button</title></head><body>"
        html = html & "<h1>Display Radio Buttons</h1>"
        html = html & "<form action='/action_page.php'>"
        html = html & "  <p>Please select your favorite Web language:</p>"
        html = html & "  <input type='radio' id='html' name='fav_language' value='HTML'>"
        html = html & "  <label for='html'>HTML</label><br>"
        html = html & "  <input type='radio' id='css' name='fav_language' value='CSS'>"
        html = html & "  <label for='css'>CSS</label><br>"
        html = html & "  <input type='radio' id='javascript' name='fav_language' value='JavaScript'>"
        html = html & "  <label for='javascript'>JavaScript</label>"
        html = html & "</form>"
        html = html & "</body></html>"
    
        driver.NavigateToString html
        driver.ActiveWindow.Maximize
    
        driver.Wait 1000
    
        On Error Resume Next
        Set elem = driver.FindElement(By.ID, "css1")
        Debug.Assert Left(Err.Description, 93) = "no such element: Unable to locate element: {""method"":""css selector"",""selector"":""[id=""css1""]""}"
        On Error GoTo 0
        
        'this error shows "automation error" from compiled DLL
        'in 32-bit mode, the error shows 'Application-defined or object-defined error' from the IDE
        On Error Resume Next
        Set elem = driver.FindElement(By.ID, "css").FindElementByID("xxxx")
        Debug.Assert Left(Err.Description, 93) = "no such element: Unable to locate element: {""method"":""css selector"",""selector"":""[id=""xxxx""]""}"
        On Error GoTo 0
    
        driver.Wait 1000
    
        'this error shows "automation error" from compiled DLL
        On Error Resume Next
        driver.FindElement(By.ID, "css").Clear
        Debug.Assert Left(Err.Description, 21) = "invalid element state"
        On Error GoTo 0
        
        'this error shows "automation error" from compiled DLL
        On Error Resume Next
        Set elem = driver.FindElement(By.ID, "css")
        elem.Clear
        Debug.Assert Left(Err.Description, 21) = "invalid element state"
        On Error GoTo 0
    
        On Error Resume Next
        driver.NavigateTo "bad_url"
        Debug.Assert Left(Err.Description, 16) = "invalid argument"
        On Error GoTo 0
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_sendkeys()
        Dim driver As New WebDriver
        Dim input1 As WebElement
        Dim display_keys As WebElement
        Dim keys As New WebKeyboard
        Dim html As String

        driver.StartChrome
        driver.OpenBrowser
    
        html = "<html>" & vbCrLf
        html = html & "    <head>" & vbCrLf
        html = html & "        <title>Test SendKeys</title>" & vbCrLf
        html = html & "        <style>" & vbCrLf
        html = html & "            #display_keys {color: red;}" & vbCrLf
        html = html & "            #display_key {color: blue;}" & vbCrLf
        html = html & "            #display_keyCode {color: blue;}" & vbCrLf
        html = html & "            #display_code {color: blue;}" & vbCrLf
        html = html & "            #display_location {color: blue;}" & vbCrLf
        html = html & "            #display_ctrlKey {color: blue;}" & vbCrLf
        html = html & "            #display_shiftKey {color: blue;}" & vbCrLf
        html = html & "            #display_altKey {color: blue;}" & vbCrLf
        html = html & "            #display_metaKey {color: blue;}" & vbCrLf
        html = html & "        </style>" & vbCrLf
        html = html & "    </head>" & vbCrLf
        html = html & "    <body>" & vbCrLf
        html = html & "        <div><div>Type Keys and Hit Enter to Process:</div><input type='text' id='input1'>" & vbCrLf
        html = html & "        <div id='display_keys'></div></div>" & vbCrLf
        html = html & "        <p></p><p></p>" & vbCrLf
        html = html & "        <div><div>Type Single Key for Info:</div><input type='text' id='input2'></div>" & vbCrLf
        html = html & "        <div id='display_key'></div>" & vbCrLf
        html = html & "        <div id='display_code'></div>" & vbCrLf
        html = html & "        <div id='display_keyCode'></div>" & vbCrLf
        html = html & "        <div id='display_location'></div>" & vbCrLf
        html = html & "        <div id='display_ctrlKey'></div>" & vbCrLf
        html = html & "        <div id='display_shiftKey'></div>" & vbCrLf
        html = html & "        <div id='display_altKey'></div>" & vbCrLf
        html = html & "        <div id='display_metaKey'></div>" & vbCrLf
        html = html & "        <script>" & vbCrLf
        html = html & "            const input1 = document.getElementById('input1');" & vbCrLf
        html = html & "            const input2 = document.getElementById('input2');" & vbCrLf
        html = html & "            const display_keys = document.getElementById('display_keys');" & vbCrLf
        html = html & "            const display_key = document.getElementById('display_key');" & vbCrLf
        html = html & "            const display_code = document.getElementById('display_code');" & vbCrLf
        html = html & "            const display_keyCode = document.getElementById('display_keyCode');" & vbCrLf
        html = html & "            const display_location = document.getElementById('display_location');" & vbCrLf
        html = html & "            const display_ctrlKey = document.getElementById('display_ctrlKey');" & vbCrLf
        html = html & "            const display_shiftKey = document.getElementById('display_shiftKey');" & vbCrLf
        html = html & "            const display_altKey = document.getElementById('display_altKey');" & vbCrLf
        html = html & "            const display_metaKey = document.getElementById('display_metaKey');" & vbCrLf
        html = html & "            input1.addEventListener('keydown', function(event) {" & vbCrLf
        html = html & "                if (event.key === 'Enter') {" & vbCrLf
        html = html & "                    display_keys.textContent = input1.value;" & vbCrLf
        html = html & "                    input1.value = ''; // Clear the input field" & vbCrLf
        html = html & "                }" & vbCrLf
        html = html & "            });" & vbCrLf
        html = html & "            input2.addEventListener('keydown', function(event) {" & vbCrLf
        html = html & "                display_key.textContent = 'key: ' + event.key;" & vbCrLf
        html = html & "                display_code.textContent = 'code: ' + event.code;" & vbCrLf
        html = html & "                display_keyCode.textContent = 'keyCode: ' + event.keyCode;" & vbCrLf
        html = html & "                display_location.textContent = 'location: ' + event.location;" & vbCrLf
        html = html & "                display_ctrlKey.textContent = 'ctrlKey: ' + event.ctrlKey;" & vbCrLf
        html = html & "                display_shiftKey.textContent = 'shiftKey: ' + event.shiftKey;" & vbCrLf
        html = html & "                display_altKey.textContent = 'altKey: ' + event.altKey;" & vbCrLf
        html = html & "                display_metaKey.textContent = 'metaKey: ' + event.metaKey;" & vbCrLf
        html = html & "            });" & vbCrLf
        html = html & "        </script>" & vbCrLf
        html = html & "    </body>" & vbCrLf
        html = html & "</html>" & vbCrLf

        driver.NavigateToString html
        driver.Wait 1000
        Set input1 = driver.FindElementByID("input1")
        Set display_keys = driver.FindElementByID("display_keys")

        input1.SendKeys "abcdefghijklmnopqrstuvwxyz" & keys.EnterKey
        Debug.Assert display_keys.GetText = "abcdefghijklmnopqrstuvwxyz"
    
        driver.Wait 500
    
        input1.SendKeys "ABCDEFGHIJKLMNOPQRSTUVWXYZ" & keys.EnterKey
        Debug.Assert display_keys.GetText = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    
        driver.Wait 500
    
        input1.SendKeys "`1234567890-=[]\;',./" & keys.EnterKey
        Debug.Assert display_keys.GetText = "`1234567890-=[]\;',./"
    
        driver.Wait 500
    
        input1.SendKeys "~!@#$%^&*()_+{}|:""<>?" & keys.EnterKey
        Debug.Assert display_keys.GetText = "~!@#$%^&*()_+{}|:""<>?"
    
        driver.Wait 500
    
        input1.SendKeys keys.ShiftKey & "abcdefghijklmnopqrstuvwxyz" & keys.ShiftKey & keys.EnterKey
        Debug.Assert display_keys.GetText = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    
        driver.Wait 500
    
        input1.SendKeys keys.ShiftKey & "ABCDEFGHIJKLMNOPQRSTUVWXYZ" & keys.ShiftKey & keys.EnterKey
        Debug.Assert display_keys.GetText = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    
        driver.Wait 500

        input1.SendKeys keys.ShiftKey & "`1234567890-=[]\;',./" & keys.ShiftKey & keys.EnterKey
        Debug.Assert display_keys.GetText = "~!@#$%^&*()_+{}|:""<>?"
    
        driver.Wait 500
    
        input1.SendKeys keys.ShiftKey & "~!@#$%^&*()_+{}|:""<>?" & keys.ShiftKey & keys.EnterKey
        Debug.Assert display_keys.GetText = "~!@#$%^&*()_+{}|:""<>?"
    
        driver.Wait 500
    
        input1.SendKeys keys.ShiftKey & "this is" & keys.ShiftKey & " Mike" & keys.EnterKey
        Debug.Assert display_keys.GetText = "THIS IS Mike"
    
        driver.Wait 500
    
        input1.SendKeys "this is Mike" & keys.ShiftKey & keys.Repeat(keys.LeftKey, 5) & keys.ShiftKey & keys.DeleteKey & " Sally" & keys.EnterKey
        Debug.Assert display_keys.GetText = "this is Sally"
    
        driver.Wait 500
    
        input1.SendKeys "this is Mike" & keys.CtrlKey & "A" & keys.CtrlKey & keys.DeleteKey & "all clear" & keys.EnterKey
        Debug.Assert display_keys.GetText = "all clear"
    
        driver.Wait 500
    
        input1.SendKeys "this is Mike" & keys.CtrlKey & "a" & keys.CtrlKey & keys.DeleteKey & "all clear" & keys.EnterKey
        Debug.Assert display_keys.GetText = "all clear"
    
        driver.Wait 500
    
        input1.SendKeys keys.ShiftKey & "this is" & keys.NullKey & keys.ShiftKey & " Mike" & keys.EnterKey
        Debug.Assert display_keys.GetText = "THIS IS MIKE"
    
        driver.Wait 500
    
        input1.SendKeys "this is Mike" & keys.EnterKey
        Debug.Assert display_keys.GetText = "this is Mike"
    
        driver.Wait 500
    
        input1.SendKeys "this is Mike"
        input1.SendKeys keys.EnterKey, False
        Debug.Assert display_keys.GetText = "this is Mike"
    
        driver.Wait 500
    
        input1.SendKeys "this is Mike" & keys.CtrlKey & "a" & keys.CtrlKey & keys.CtrlKey & "c" & keys.CtrlKey & keys.DeleteKey & keys.EnterKey
        input1.SendKeys keys.CtrlKey & "v" & keys.CtrlKey & keys.EnterKey
        Debug.Assert display_keys.GetText = "this is Mike"
    
        driver.Wait 500
    
        input1.SendKeys "this is Mike" & keys.Chord(keys.CtrlKey, "a") & keys.Chord(keys.CtrlKey, "c") & keys.DeleteKey & keys.EnterKey()
        input1.SendKeys keys.Chord(keys.CtrlKey, "v") & keys.EnterKey
        Debug.Assert display_keys.GetText = "this is Mike"
    
        driver.Wait 500
    
        input1.SendKeys "this is Mike" & keys.Chord(keys.CtrlKey, "A") & keys.Chord(keys.CtrlKey, "C") & keys.DeleteKey & keys.EnterKey()
        input1.SendKeys keys.Chord(keys.CtrlKey, "V") & keys.EnterKey
        Debug.Assert display_keys.GetText = "this is Mike"
    
        driver.Wait 500
    
        Dim input2 As WebElement
        Dim display_key As WebElement
        Dim display_code As WebElement
        Dim display_keyCode As WebElement
        Dim display_location As WebElement
        Dim display_shiftKey As WebElement
        Dim display_ctrlKey As WebElement
        Dim display_altKey As WebElement
        Dim display_metaKey As WebElement
    
        Set input2 = driver.FindElementByID("input2")
        Set display_key = driver.FindElementByID("display_key")
        Set display_code = driver.FindElementByID("display_code")
        Set display_keyCode = driver.FindElementByID("display_keyCode")
        Set display_location = driver.FindElementByID("display_location")
        Set display_shiftKey = driver.FindElementByID("display_shiftKey")
        Set display_ctrlKey = driver.FindElementByID("display_ctrlKey")
        Set display_altKey = driver.FindElementByID("display_altKey")
        Set display_metaKey = driver.FindElementByID("display_metaKey")
    
        input2.SendKeys "a", True
        Debug.Assert display_key.GetText = "key: a"
        Debug.Assert display_code.GetText = "code: KeyA"
        Debug.Assert display_keyCode.GetText = "keyCode: 65"
        Debug.Assert display_location.GetText = "location: 0"
        Debug.Assert display_shiftKey.GetText = "shiftKey: false"
        Debug.Assert display_ctrlKey.GetText = "ctrlKey: false"
        Debug.Assert display_altKey.GetText = "altKey: false"
        Debug.Assert display_metaKey.GetText = "metaKey: false"
    
        driver.Wait 500
    
        input2.SendKeys "A", True
        Debug.Assert display_key.GetText = "key: A"
        Debug.Assert display_code.GetText = "code: KeyA"
        Debug.Assert display_keyCode.GetText = "keyCode: 65"
        Debug.Assert display_location.GetText = "location: 0"
        Debug.Assert display_shiftKey.GetText = "shiftKey: true"
        Debug.Assert display_ctrlKey.GetText = "ctrlKey: false"
        Debug.Assert display_altKey.GetText = "altKey: false"
        Debug.Assert display_metaKey.GetText = "metaKey: false"
    
        driver.Wait 500
    
        input2.SendKeys keys.ShiftKey & "a", True
        Debug.Assert display_key.GetText = "key: A"
        Debug.Assert display_code.GetText = "code: KeyA"
        Debug.Assert display_keyCode.GetText = "keyCode: 65"
        Debug.Assert display_location.GetText = "location: 0"
        Debug.Assert display_shiftKey.GetText = "shiftKey: true"
        Debug.Assert display_ctrlKey.GetText = "ctrlKey: false"
        Debug.Assert display_altKey.GetText = "altKey: false"
        Debug.Assert display_metaKey.GetText = "metaKey: false"
    
        driver.Wait 500
    
        input2.SendKeys keys.ShiftKey & "A", True
        Debug.Assert display_key.GetText = "key: A"
        Debug.Assert display_code.GetText = "code: KeyA"
        Debug.Assert display_keyCode.GetText = "keyCode: 65"
        Debug.Assert display_location.GetText = "location: 0"
        Debug.Assert display_shiftKey.GetText = "shiftKey: true"
        Debug.Assert display_ctrlKey.GetText = "ctrlKey: false"
        Debug.Assert display_altKey.GetText = "altKey: false"
        Debug.Assert display_metaKey.GetText = "metaKey: false"
    
        driver.Wait 500
    
        input2.SendKeys keys.CtrlKey & "a", True
        Debug.Assert display_key.GetText = "key: a"
        Debug.Assert display_code.GetText = "code: KeyA"
        Debug.Assert display_keyCode.GetText = "keyCode: 65"
        Debug.Assert display_location.GetText = "location: 0"
        Debug.Assert display_shiftKey.GetText = "shiftKey: false"
        Debug.Assert display_ctrlKey.GetText = "ctrlKey: true"
        Debug.Assert display_altKey.GetText = "altKey: false"
        Debug.Assert display_metaKey.GetText = "metaKey: false"
    
        driver.Wait 500
    
        input2.SendKeys keys.EnterKey, True
        Debug.Assert display_key.GetText = "key: Enter"
        Debug.Assert display_code.GetText = "code: Enter"
        Debug.Assert display_keyCode.GetText = "keyCode: 13"
        Debug.Assert display_location.GetText = "location: 0"
        Debug.Assert display_shiftKey.GetText = "shiftKey: false"
        Debug.Assert display_ctrlKey.GetText = "ctrlKey: false"
        Debug.Assert display_altKey.GetText = "altKey: false"
        Debug.Assert display_metaKey.GetText = "metaKey: false"
    
        driver.Wait 500
    
        input2.SendKeys keys.CtrlShiftKeys & keys.HomeKey, True
        Debug.Assert display_key.GetText = "key: Home"
        Debug.Assert display_code.GetText = "code: Home"
        Debug.Assert display_keyCode.GetText = "keyCode: 36"
        Debug.Assert display_location.GetText = "location: 0"
        Debug.Assert display_shiftKey.GetText = "shiftKey: true"
        Debug.Assert display_ctrlKey.GetText = "ctrlKey: true"
        Debug.Assert display_altKey.GetText = "altKey: false"
        Debug.Assert display_metaKey.GetText = "metaKey: false"

        driver.Wait 1000
        driver.Shutdown
    End Sub
    
    
    Sub test_session_cookie()
        Dim driver As SeleniumVBA.WebDriver
        Dim cks As SeleniumVBA.WebCookies
        Dim ck As SeleniumVBA.WebCookie
    
        Set driver = SeleniumVBA.New_WebDriver
    
        Set cks = driver.CreateCookies

        driver.StartEdge
        driver.OpenBrowser
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/sessionCookie.html"
        driver.Wait 500
    
        'this creates a cookie named bgcolor containing the background color as its value
        driver.FindElement(By.CssSelector, "#setcolorbutton").Click
        driver.Wait 500
    
        'get cookie for this domain and then save to file
        driver.GetAllCookies().SaveToFile "cookies.txt"
    
        'click to open the new window - this tries to set the background color through the passed cookie
        'but note that because the cookie was deleted, the background color does not get set
        driver.FindElement(By.CssSelector, "#openwindowbutton").Click
        driver.Wait 500
    
        driver.Windows.SwitchToByTitle "Session cookie destination*"
        Debug.Assert driver.ExecuteScript("return document.body.style.backgroundColor;") = "rgb(128, 255, 255)"
    
        driver.Wait 500
    
        driver.CloseBrowser
        driver.OpenBrowser
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/sessionCookie.html"
    
        'make sure all cookies are deleted from the session
        driver.DeleteAllCookies
    
        'load the cookies from previous session
        driver.SetCookies cks.LoadFromFile("cookies.txt")
    
        For Each ck In cks
            Debug.Assert ck.Name = "bgcolor"
            Debug.Assert ck.Value = "#80FFFF"
        Next ck
    
        'click to open the new window - this sets the background color through the loaded cookie
        driver.FindElement(By.CssSelector, "#openwindowbutton").Click
        driver.Wait 500
    
        driver.Windows.SwitchToByTitle "Session cookie destination*"
        Debug.Assert driver.ExecuteScript("return document.body.style.backgroundColor;") = "rgb(128, 255, 255)"
    
        driver.Wait 500
    
        driver.CloseBrowser
        driver.OpenBrowser
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/sessionCookie.html"
    
        'make sure all cookies are deleted from the session
        driver.DeleteAllCookies
    
        'change the value (background color) of the cookie from from previous session and set it
        cks(1).Value = "#8080ff"
        driver.SetCookie cks(1)
    
        'click to open the new window - this sets the background color through the loaded cookie
        driver.FindElement(By.CssSelector, "#openwindowbutton").Click
        driver.Wait 500
    
        driver.Windows.SwitchToByTitle "Session cookie destination*"
        Debug.Assert driver.ExecuteScript("return document.body.style.backgroundColor;") = "rgb(128, 128, 255)"
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    
    Sub test_DownloadResource()
        Dim driver As SeleniumVBA.WebDriver
        Dim element As SeleniumVBA.WebElement

        Set driver = SeleniumVBA.New_WebDriver

        driver.StartEdge
        driver.OpenBrowser
    
        driver.ImplicitMaxWait = 2000
    
        'img element with only src attribute
        driver.NavigateTo "https://github.com/GCuser99/SeleniumVBA/wiki"
        Set element = driver.FindElement(By.CssSelector, "img[alt='SeleniumVBA'")
        element.DownloadResource ("src")
    
        driver.ActiveWindow.Maximize

        'img element with srcset attribute
        driver.NavigateTo "https://mdn.github.io/learning-area/html/multimedia-and-embedding/responsive-images/responsive.html"
        Set element = driver.FindElement(By.CssSelector, "body > main > section > img")
        element.DownloadResource ("srcset")
    
        'download the default src attribute
        element.DownloadResource ("src")
    
        'source elements with srcset attributes
        Set element = driver.FindElement(By.CssSelector, "body > main > section > picture > source:nth-child(1)")
        element.DownloadResource ("srcset")
        Set element = driver.FindElement(By.CssSelector, "body > main > section > picture > source:nth-child(2)")
        element.DownloadResource ("srcset")
    
        'img element with only src attribute
        driver.NavigateTo "https://html.com/attributes/img-srcset/"
        Set element = driver.FindElement(By.CssSelector, "#post-1847 > div > div:nth-child(46) > img")
        element.DownloadResource ("src")
    
        'img element with srcset attribute
        driver.NavigateTo "https://webkit.org/demos/srcset/"
        Set element = driver.FindElement(By.CssSelector, "body > img")
        element.DownloadResource ("srcset")
    
        driver.DeleteFiles "image-4x.png", "flamingo-fallback.jpg", "elva-480w-close-portrait.jpg", "elva-800w.jpg", "elva-fairy-800w.jpg", "logo.png"
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_table_to_array_formatting()
        Dim driver As SeleniumVBA.WebDriver
        Dim elem As SeleniumVBA.WebElement
        Dim table() As Variant
        Dim html As String
    
        Set driver = SeleniumVBA.New_WebDriver

        driver.StartEdge
        driver.OpenBrowser
    
        html = "<html><body><table border='l' id='mytable'><tr><td>12/14/2024<br>12/15/2024</td><td>Hi,&nbsp;this&nbsp;is&nbsp;<p>Mike</p></td></tr></table></body></html>"
        
        driver.NavigateToString html
    
        driver.Wait 1500
    
        Set elem = driver.FindElementByCssSelector("#mytable")
    
        table = elem.TableToArray(ignoreCellFormatting:=False) 'default setting
    
        Debug.Assert table(1, 1) = "12/14/2024" & vbCrLf & "12/15/2024"
        Debug.Assert table(1, 2) = "Hi, this is " & vbCrLf & vbCrLf & "Mike"

        table = elem.TableToArray(ignoreCellFormatting:=True)
    
        Debug.Assert table(1, 1) = "12/14/202412/15/2024"
        Debug.Assert table(1, 2) = "Hi, this is Mike"

        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_table_to_array_giant()
        Dim driver As SeleniumVBA.WebDriver
        Dim table() As Variant

        Set driver = SeleniumVBA.New_WebDriver

        driver.StartEdge
        driver.OpenBrowser

        driver.ImplicitMaxWait = 2000

        driver.NavigateTo "https://www.federalreserve.gov/data/yield-curve-tables/feds200805_1.html"

        Dim tableElem As WebElement
        'Set tableElem = driver.FindElementByCssSelector("#content > div:nth-child(6) > table")
        Set tableElem = driver.FindElementByCssSelector("#content > div:nth-child(6) > table > tbody")
    
        table = driver.TableToArray(tableElem, False, False, False)

        Debug.Assert UBound(table, 1) = 501
        Debug.Assert UBound(table, 2) = 127
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_deep_scrollIntoView()
        Dim driver As SeleniumVBA.WebDriver
        Set driver = SeleniumVBA.New_WebDriver

        driver.StartChrome
        driver.OpenBrowser

        driver.NavigateTo "https://the-internet.herokuapp.com/large"
        driver.Wait 1000

        driver.FindElement(By.ID, "sibling-50.3").ScrollIntoView enSpeed:=jump_smooth, enAlign_horiz:=align_start
    
        driver.ScrollToTop
    
        driver.FindElement(By.ID, "sibling-50.3").ScrollIntoView enSpeed:=jump_smooth, enAlign_horiz:=align_start, xOffset:=-200
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_scrollIntoView()
        Dim driver As SeleniumVBA.WebDriver
        Dim elem As SeleniumVBA.WebElement
        Set driver = SeleniumVBA.New_WebDriver

        driver.StartChrome
        driver.OpenBrowser
    
        driver.ImplicitMaxWait = 2000
        driver.ActiveWindow.Maximize
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/scrolling_tests/page_with_scrolling_frame.html"
    
        driver.FindElement(By.Name, "scrolling_frame").SwitchToFrame
    
        Set elem = driver.FindElement(By.Name, "scroll_checkbox")
    
        elem.ScrollIntoView(jump_smooth).Click
    
        Debug.Assert elem.GetProperty("checked")
    
        elem.Click 'click off
        driver.ScrollToTop
    
        elem.ScrollIntoView().Click
    
        Debug.Assert elem.GetProperty("checked")
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/scrolling_tests/page_with_tall_frame.html"
    
        driver.FindElement(By.Name, "tall_frame").SwitchToFrame
    
        Set elem = driver.FindElement(By.Name, "checkbox")
    
        elem.ScrollIntoView jump_smooth
    
        elem.Click
    
        Debug.Assert elem.GetProperty("checked")
    
        elem.Click 'click off
        driver.ScrollToTop
    
        elem.ScrollIntoView().Click
    
        Debug.Assert elem.GetProperty("checked")
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/scrolling_tests/page_with_scrolling_frame_out_of_view.html"
    
        driver.FindElement(By.Name, "scrolling_frame").ScrollIntoView(jump_smooth).SwitchToFrame
    
        Set elem = driver.FindElement(By.Name, "scroll_checkbox")
    
        elem.ScrollIntoView(jump_smooth).Click
    
        Debug.Assert elem.GetProperty("checked")
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/scrolling_tests/page_with_nested_scrolling_frames.html"
    
        driver.FindElement(By.Name, "scrolling_frame").SwitchToFrame
        driver.FindElement(By.Name, "nested_scrolling_frame").ScrollIntoView(jump_smooth).SwitchToFrame
    
        Set elem = driver.FindElement(By.Name, "scroll_checkbox")
    
        elem.ScrollIntoView(jump_smooth).Click
    
        Debug.Assert elem.GetProperty("checked")
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/scrolling_tests/page_with_y_overflow_auto.html"
    
        Set elem = driver.FindElement(By.TagName, "a")
    
        elem.ScrollIntoView(jump_smooth).Click
    
        Debug.Assert driver.FindElementByTagName("h1").GetText = "Clicked Successfully!"
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/scroll.html"
    
        Set elem = driver.FindElement(By.ID, "line9")
    
        elem.ScrollIntoView(jump_smooth).Click
    
        Debug.Assert driver.FindElement(By.ID, "clicked").GetText = "line9"
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/scroll4.html"
    
        Set elem = driver.FindElement(By.ID, "radio")
    
        elem.ScrollIntoView(jump_smooth).Click
    
        Debug.Assert elem.IsSelected
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/overflow/x_auto_y_auto.html"
    
        Set elem = driver.FindElement(By.ID, "right")
        elem.ScrollIntoView(jump_smooth).Click
    
        Set elem = driver.FindElement(By.ID, "bottom-right")
        elem.ScrollIntoView(jump_smooth).Click
    
        Set elem = driver.FindElement(By.ID, "bottom")
        elem.ScrollIntoView(jump_smooth).Click 'this one fails in FF - element is hidden by scroll bar
    
        Debug.Assert driver.FindElement(By.ID, "right-clicked").GetText = "ok"
        Debug.Assert driver.FindElement(By.ID, "bottom-right-clicked").GetText = "ok"
        Debug.Assert driver.FindElement(By.ID, "bottom-clicked").GetText = "ok"
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/overflow/x_hidden_y_hidden.html"
    
        Set elem = driver.FindElement(By.ID, "right")
        elem.ScrollIntoView(jump_auto).Click
    
        Set elem = driver.FindElement(By.ID, "bottom-right")
        elem.ScrollIntoView(jump_auto).Click
    
        Set elem = driver.FindElement(By.ID, "bottom")
        elem.ScrollIntoView(jump_auto).Click 'this one fails in FF - element is hidden by scroll bar
    
        Debug.Assert driver.FindElement(By.ID, "right-clicked").ScrollIntoView(jump_instant).GetText = "ok"
        Debug.Assert driver.FindElement(By.ID, "bottom-right-clicked").GetText = "ok"
        Debug.Assert driver.FindElement(By.ID, "bottom-clicked").GetText = "ok"
        
        driver.Wait 1000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub

    Sub test_long_scroll()
        Dim driver As SeleniumVBA.WebDriver
        Dim endElem As SeleniumVBA.WebElement
        Dim html As String
        Dim i As Long

        Set driver = SeleniumVBA.New_WebDriver

        driver.StartEdge
        driver.OpenBrowser

        'create the test html doc - set the style attribute scroll-behavior to "smooth"
        'this will affect the default "auto" scroll behavior in the scroll methods tested below
        html = "<!DOCTYPE html><html style='scroll-behavior:smooth;'><body>"
        For i = 1 To 10000: html = html & "<div><p>" & i & "</p></div>": Next i
        html = html & "<div id='end'><p>end</p></div>"
        html = html & "</body></html>"

        driver.NavigateToString(html)
        driver.ActiveWindow.Maximize
        driver.Wait 1000

        Set endElem = driver.FindElement(By.ID, "end")

        'this will smooth scroll because the default "jump_auto" scroll mode
        'takes its value from scrolling container's CSS
        driver.ScrollIntoView endElem
    
        driver.ScrollToTop jump_instant
    
        driver.Wait 1000
    
        driver.ScrollIntoView endElem
    
        driver.ScrollToTop
    
        driver.ScrollTo , 30000
    
        driver.ScrollBy , -30000
    
        driver.ScrollToBottom
    
        driver.Wait 1000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub

    Sub test_element_scroll()
        Dim driver As SeleniumVBA.WebDriver
        Dim endElem As SeleniumVBA.WebElement
        Dim scrollContainer As SeleniumVBA.WebElement
        Dim html As String
        Dim i As Long

        Set driver = SeleniumVBA.New_WebDriver

        driver.StartEdge
        driver.OpenBrowser

        'create the test html doc - set the style attribute scroll-behavior to "smooth"
        'this will affect the default "auto" scroll behavior in the scroll methods tested below
        html = "<!DOCTYPE html><html><body>"
        html = html & "<div id='scroll' style='overflow-y:scroll; height:400px;scroll-behavior:smooth;'>"
        For i = 1 To 1000: html = html & "<div id='" & i & "'><p>" & i & "</p></div>": Next i
        html = html & "<div id='end'><p>end</p></div>"
        html = html & "</div>"
        html = html & "</body></html>"

        driver.NavigateToString(html)
        driver.ActiveWindow.Maximize
        driver.Wait 1000

        Set scrollContainer = driver.FindElement(By.ID, "scroll")
        Set endElem = driver.FindElement(By.ID, "end")

        'this will smooth scroll because the default "jump_auto" scroll mode
        'takes its value from scrolling container's CSS
        driver.ScrollIntoView endElem
    
        scrollContainer.ScrollToTop jump_instant
    
        driver.Wait 1000
    
        driver.ScrollIntoView endElem
    
        scrollContainer.ScrollToTop
    
        scrollContainer.ScrollTo , 30000
    
        scrollContainer.ScrollBy , -30000
    
        scrollContainer.ScrollToBottom
    
        driver.Wait 1000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_print()
        Dim driver As WebDriver
        Dim settings As WebPrintSettings
        Dim keys As WebKeyboard

        Set driver = New WebDriver
        Set settings = New WebPrintSettings
        Set keys = New WebKeyboard
    
        'driver.DefaultIOFolder = ThisWorkbook.path '(this is the default)

        driver.StartEdge
        driver.OpenBrowser
    
        driver.NavigateTo "https://www.wikipedia.org/"
        driver.Wait 1000
    
        driver.FindElement(By.ID, "searchInput").SendKeys "Leonardo da Vinci" & keys.EnterKey
    
        driver.Wait 1000
    
        settings.Units = svbaInches
        settings.MarginsAll = 0.4
        settings.Orientation = svbaPortrait
        settings.PrintScale = 1
        'settings.PageRanges "1-2"  'prints the first 2 pages
        'settings.PageRanges 1, 2   'prints the first 2 pages
        'settings.PageRanges 2       'prints only the 2nd page
    
        'prints pdf file to specified filePath parameter (defaults to .\printpage.pdf)
        driver.PrintToPDF , settings

        driver.Wait 1000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub

    Sub test_screenshot()
        Dim driver As WebDriver
    
        Set driver = New WebDriver
    
        'driver.DefaultIOFolder = ThisWorkbook.path '(this is the default)
    
        driver.StartChrome
        driver.OpenBrowser
    
        driver.NavigateTo "https://www.wikipedia.org/"
        driver.Wait 1000
    
        driver.SaveScreenshot

        driver.Wait 1000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    
    Sub test_InstallAddon()
        Dim driver As WebDriver
    
        Set driver = New WebDriver
    
        driver.StartFirefox
        driver.OpenBrowser
    
        'this is a Firefox browser only method - use AddExtensions method of WebCapabilities for Edge/Chrome
        driver.InstallAddon Environ("USERPROFILE") & "\Documents\SeleniumVBA\extensions\darkreader-4.9.94.xpi"

        driver.Wait 3000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_addExtensions()
        Dim driver As WebDriver
        Dim caps As WebCapabilities
    
        Set driver = New WebDriver
    
        driver.StartChrome
    
        Set caps = driver.CreateCapabilities()
    
        'this will add a local crx file extension(s)
        caps.AddExtensions Environ("USERPROFILE") & "\Documents\SeleniumVBA\extensions\" & "TickTick-Todo-Task-List-Chrome-Web-Store.crx"
    
        'use this alternative to add an extension from Chrome's User Data extensions directory
        'caps.AddArguments "--load-extension=" & Environ("LOCALAPPDATA") & "\Google\Chrome\User Data\Default\Extensions\abcdefghijklmnopqrstuvwxyzabcdef\2.3.1_0"

        driver.OpenBrowser caps
    
        driver.NavigateTo "https://www.wikipedia.org/"
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_url_encoding()
        Dim driver As WebDriver
        Dim urlEncoded As String
        Dim urlDecoded As String
    
        Set driver = New WebDriver
    
        driver.StartChrome
        driver.OpenBrowser
    
        driver.NavigateTo "https://www.mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"
    
        '****************************************************************************************************
        'test retrieving both the encoded and decoded version of the current url
        urlEncoded = driver.GetCurrentUrl()
        urlDecoded = driver.GetCurrentUrl(decode:=True)
    
        '****************************************************************************************************
        'test if IsPageFound is encoding agnostic
        Debug.Print "is page found using decoded url: " & driver.IsPageFound(urlDecoded)
        Debug.Print "is page found using encoded url: " & driver.IsPageFound(urlEncoded)
    
        '****************************************************************************************************
        'spawn a new window
        driver.Windows.SwitchToNew svbaTab

        Debug.Print "the active window's encoded url: " & driver.ActiveWindow.Url
    
        '****************************************************************************************************
        'test if SwitchToByUrl is encoding agnostic and test Window.Url method
        driver.Windows.SwitchToByUrl urlDecoded
    
        Debug.Print "the active window's encoded url: " & driver.ActiveWindow.Url()
        Debug.Print "the active window's decoded url: " & driver.ActiveWindow.Url(decode:=True)
    
        driver.Windows.SwitchToByUrl "about:blank"
        driver.Windows.SwitchToByUrl urlEncoded
    
        Debug.Print "the active window's encoded url: " & driver.ActiveWindow.Url()
        Debug.Print "the active window's decoded url: " & driver.ActiveWindow.Url(decode:=True)
    
        '****************************************************************************************************
        'test Windows.Urls method
        Dim urlCol As Collection, urlString As Variant
    
        Set urlCol = driver.Windows.Urls()
        For Each urlString In urlCol
            Debug.Print "encoded window url: " & urlString
        Next urlString
    
        Set urlCol = driver.Windows.Urls(decode:=True)
        For Each urlString In urlCol
            Debug.Print "decoded window url: " & urlString
        Next urlString
    
        driver.Shutdown
    End Sub
    
    Sub test_settings()
        Dim driver As SeleniumVBA.WebDriver
    
        Set driver = SeleniumVBA.New_WebDriver

        'this creates a new SeleniumVBA.ini file if one does not exist
        'or refreshes/updates while keeping valid entries of an existing one
        'to set the ini file entries to system default values, use keepExistingValues:=False
        driver.CreateSettingsFile keepExistingValues:=True
    End Sub
    
    Sub test_Authentication()
        Dim driver As SeleniumVBA.WebDriver
        Dim elem As SeleniumVBA.WebElement
        Dim creds As String
        Dim keys As SeleniumVBA.WebKeyboard
    
        Set driver = SeleniumVBA.New_WebDriver
        Set keys = SeleniumVBA.New_WebKeyboard
    
        driver.StartChrome
        driver.OpenBrowser
    
        driver.ImplicitMaxWait = 10000
    
        driver.NavigateTo "http://the-internet.herokuapp.com/basic_auth"
    
        'no need to run on a separate thread in this case as the login popup does
        'not block execution while waiting for user response...
        creds = "admin" & keys.TabKey & "admin" & keys.EnterKey 'username and password
        driver.SendKeysToOS _
            keyString:=creds, _
            timeDelayMS:=0, _
            windowTitle:="", _
            runOnSeparateThread:=False, _
            waitForWindow:=False
    
        If driver.IsPresent(By.CssSelector, "#content > div > p", elemFound:=elem) Then
            Debug.Print elem.GetText
        End If
  
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_table_to_array_large()
        Dim driver As WebDriver
        Dim table() As Variant
    
        Set driver = New WebDriver

        driver.StartEdge
        driver.OpenBrowser
    
        driver.ImplicitMaxWait = 2000
    
        driver.NavigateTo "https://the-internet.herokuapp.com/large"
    
        table = driver.FindElement(By.ID, "large-table").TableToArray(skipHeader:=True)
    
        Debug.Print "number of rows: " & UBound(table, 1), "number of columns: " & UBound(table, 2)

        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_updateDrivers()
        'this checks if driver is installed, or if installed driver is compatibile
        'with installed browser, and then if needed, installs an updated driver
        Dim mngr As WebDriverManager
    
        Set mngr = New WebDriverManager
    
        'mngr.DefaultDriverFolder = [your binary folder path here] 'defaults to Downloads dir
    
        MsgBox mngr.AlignEdgeDriverWithBrowser()
        MsgBox mngr.AlignChromeDriverWithBrowser()
        MsgBox mngr.AlignFirefoxDriverWithBrowser()
    End Sub
    
    Sub test_file_download()
        Dim driver As WebDriver
        Dim caps As WebCapabilities
    
        Set driver = New WebDriver
   
        driver.StartChrome
    
        'set the directory path for saving download to
        Set caps = driver.CreateCapabilities
        caps.SetDownloadPrefs downloadFolderPath:=".\"
        driver.OpenBrowser caps
    
        'delete legacy copy if it exists
        driver.DeleteFiles ".\test.pdf"
    
        driver.NavigateTo "https://github.com/GCuser99/SeleniumVBA/raw/main/dev/test_files/test.pdf"
    
        driver.WaitForDownload ".\test.pdf"
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_PageToHTMLMethods()
        Dim driver As WebDriver
        Dim htmlDoc As HTMLDocument, Url As String
    
        Set driver = New WebDriver
    
        driver.StartChrome
        driver.OpenBrowser
    
        Url = "https://it.wikipedia.org/wiki/Pagina_principale"
    
        driver.NavigateTo Url
        driver.Wait 1000
    
        'use DOM to parse htmlDocument here if desired....
        'html DOM can much faster than Selenium if complicated parse is needed
        Set htmlDoc = driver.PageToHTMLDoc(sanitize:=False)
        Debug.Print htmlDoc.body.ChildNodes.Length
    
        'save raw page to html file
        driver.PageToHTMLFile "source_raw.html", sanitize:=False
    
        'note that santization leaves DOM tree intact
        Set htmlDoc = driver.PageToHTMLDoc(sanitize:=True)
        Debug.Print htmlDoc.body.ChildNodes.Length
        
        'save sanitized page to html file
        driver.PageToHTMLFile "source_sanitized.html", sanitize:=True
        
        'this is much faster because santization disables "online" dynamic elements
        driver.NavigateToFile "source_sanitized.html"
        driver.Wait 1000
    
        'uncomment the following to see how long it takes to render unsanitized html file - be patient!
        'driver.NavigateToFile "source_raw.html"
        'driver.Wait 1000
    
        driver.Shutdown
    End Sub
    
    Sub test_Alerts()
        'NOTES: As of July 2023, Chrome and Edge have a ("WontFix") reported bug where sending text to
        'a prompt alert via SwitchToAlert.SendKeys does not display in the text input
        'field but otherwise does work as shown in this demo. It has been classified as a "display-only issue".
        'see https://bugs.chromium.org/p/chromedriver/issues/detail?id=1120#c11
    
        'Also be aware - the only WebDriver commands that should be executed between the show Alert event
        '(e.g. after Click) and SwitchToAlert.Accept/Dismiss are Wait, SwitchToAlert.GetAlertText, and
        'SwitchToAlert.SendKeys - other commands executed in the time interval while waiting for user
        'response could interfere with Alert interaction.
        '
        'The SwitchToAlert waits until the alert shows, up to a maximum time specified by the maxWaitTimeMS
        'argument (default 10000 ms). See slow alert test in this procedure below for an example.
        Dim driver As WebDriver
    
        Set driver = New WebDriver
    
        driver.StartChrome
        driver.OpenBrowser
    
        driver.ImplicitMaxWait = 10000
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/alerts.html"
    
        'standard alert 1
        driver.FindElement(By.ID, "alert").Click
        With driver.SwitchToAlert
            Debug.Print "Alert prompt 1: " & .GetText
            .Accept
        End With
        Debug.Print "standard alert found and accepted"
    
        'standard alert 2
        driver.FindElement(By.ID, "empty-alert").Click
        With driver.SwitchToAlert
            Debug.Print "Alert prompt 2: " & .GetText
            .Accept
        End With
        Debug.Print "empty alert found and accepted"
    
        'input prompt alert 3
        driver.FindElement(By.ID, "prompt").Click
        With driver.SwitchToAlert
            Debug.Print "Alert prompt 3: " & .GetText
            .SendKeys "here is my response text to prompt"
            .Accept
        End With
        Debug.Print driver.FindElement(By.ID, "text").GetText
    
        'input prompt alert 4
        driver.FindElement(By.ID, "prompt-with-default").Click
        With driver.SwitchToAlert
            Debug.Print "Alert prompt 4: " & .GetText
            .SendKeys "here is my response text to prompt with default"
            .Accept
        End With
        Debug.Print driver.FindElement(By.ID, "text").GetText
    
        'input double prompt alerts 5 and 6
        driver.FindElement(By.ID, "double-prompt").Click
        With driver.SwitchToAlert
            Debug.Print "Alert prompt 5: " & .GetText
            .SendKeys "here is my response text to first of double prompt"
            .Accept
        End With
        With driver.SwitchToAlert
            Debug.Print "Alert prompt 6: " & .GetText
            .SendKeys "here is my response text to second of double prompt"
            .Accept
        End With
        'note that this first GetText must be performed after the second alert above
        'so that it does not interfere with that alert!!
        Debug.Print driver.FindElement(By.ID, "text1").GetText
        Debug.Print driver.FindElement(By.ID, "text2").GetText
    
        'test for a delayed alert 7
        'without the non-zero max wait, this will throw an error
        driver.FindElement(By.ID, "slow-alert").Click
        With driver.SwitchToAlert
            Debug.Print "Alert prompt 7: " & .GetText
            .Accept
        End With
        Debug.Print "slow alert found and accepted"
    
        'a confirm alert 8
        driver.FindElement(By.ID, "confirm").Click
        With driver.SwitchToAlert
            Debug.Print "Alert prompt 8: " & .GetText
            .Dismiss
        End With
        Debug.Print "confirm alert found and dismissed"
    
        driver.Wait 1000
        driver.GoBack
        driver.Wait 1000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_windows_SwitchToNext()
        'this test uses SwitchToNext to shortcut the finding of the child window,
        'without having to enumerate the windows collection
        Dim driver As WebDriver
        Dim mainWindow As WebWindow
        Dim childWindow As WebWindow
    
        Set driver = New WebDriver
    
        driver.StartChrome
        driver.OpenBrowser
    
        driver.NavigateTo "http://the-internet.herokuapp.com/windows"
    
        'get the current active window
        Set mainWindow = driver.ActiveWindow
    
        'spawn a new window
        driver.FindElementByCssSelector("#content > div > a").Click
    
        'note here that main window is still the active one from Selenium's perspective!!
        Debug.Print driver.ActiveWindow.Title 'prints "The Internet"
    
        'switch to the next open window in the collection AFTER the current active window
        Set childWindow = driver.Windows.SwitchToNext
        Debug.Print driver.ActiveWindow.Title 'prints "New Window"
        Debug.Print childWindow.Title 'prints "New Window"
    
        driver.Shutdown
    End Sub
    Sub test_action_chain()
        Dim driver As SeleniumVBA.WebDriver, actions As SeleniumVBA.WebActionChain
        Dim left1 As SeleniumVBA.WebElement, right1 As SeleniumVBA.WebElement
        Dim left2 As SeleniumVBA.WebElement, right2 As SeleniumVBA.WebElement
        Dim left3 As SeleniumVBA.WebElement, right3 As SeleniumVBA.WebElement
        Dim left4 As SeleniumVBA.WebElement, right4 As SeleniumVBA.WebElement
        Dim left5 As SeleniumVBA.WebElement, right5 As SeleniumVBA.WebElement
        Dim list1 As SeleniumVBA.WebElement, list2 As SeleniumVBA.WebElement
    
        Set driver = SeleniumVBA.New_WebDriver
    
        driver.StartEdge
        driver.OpenBrowser
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/draggableLists.html"
    
        driver.Wait 500
    
        Set left1 = driver.FindElement(By.CssSelector, "#leftitem-1")
        Set left2 = driver.FindElement(By.CssSelector, "#leftitem-2")
        Set left3 = driver.FindElement(By.CssSelector, "#leftitem-3")
        Set left4 = driver.FindElement(By.CssSelector, "#leftitem-4")
        Set left5 = driver.FindElement(By.CssSelector, "#leftitem-5")
    
        Set right1 = driver.FindElement(By.CssSelector, "#rightitem-1")
        Set right2 = driver.FindElement(By.CssSelector, "#rightitem-2")
        Set right3 = driver.FindElement(By.CssSelector, "#rightitem-3")
        Set right4 = driver.FindElement(By.CssSelector, "#rightitem-4")
        Set right5 = driver.FindElement(By.CssSelector, "#rightitem-5")
    
        Set list1 = driver.FindElement(By.CssSelector, "#sortable1")
        Set list2 = driver.FindElement(By.CssSelector, "#sortable2")
    
        driver.Wait 500
    
        Set actions = driver.ActionChain
        actions.DragAndDrop left1, list2
        actions.DragAndDrop right1, list1
        actions.DragAndDrop left2, list2
        actions.DragAndDrop right2, list1
        actions.DragAndDrop left3, list2
        actions.DragAndDrop right3, list1
        actions.DragAndDrop left4, list2
        actions.DragAndDrop right4, list1
        actions.DragAndDrop left5, list2
        actions.DragAndDrop right5, list1
        actions.ClickAndHold(right3).MoveToElement(right5).ReleaseButton
        actions.ClickAndHold(right4).MoveToElement(right5).ReleaseButton
        actions.Perform 'do all the actions defined above
    
        driver.Wait 1000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub

    Sub test_action_chain_sendkeys()
        Dim driver As SeleniumVBA.WebDriver
        Dim keys As SeleniumVBA.WebKeyboard
        Dim actions As SeleniumVBA.WebActionChain
        Dim textBox As SeleniumVBA.WebElement
    
        Set driver = SeleniumVBA.New_WebDriver
        Set keys = SeleniumVBA.New_WebKeyboard
    
        driver.StartEdge
    
        driver.OpenBrowser
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/single_text_input.html"
        driver.Wait 500
    
        Set textBox = driver.FindElement(By.ID, "textInput")
    
        Set actions = driver.ActionChain
    
        'build the chain and then execute with Perform method
        actions.MoveToElement(textBox).Click
        actions.KeyDown(keys.ShiftKey).SendKeys("upper case").KeyUp (keys.ShiftKey)
        actions.Perform

        driver.Wait 2000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_cdp_enhanced_geolocation()
        'this demonstrates using the ExecuteCDP to manage geolocation with enhanced user control
        'even if the default profile is set to hide geolocation info, this will override that,
        'unlike SetGeolocation method of WebDriver class...
        Dim driver As WebDriver
        Dim params As New Dictionary
    
        Set driver = New WebDriver

        driver.StartChrome 'Chrome and Edge only
        driver.OpenBrowser
    
        driver.ImplicitMaxWait = 2000
    
        'https://chromedevtools.github.io/devtools-protocol/tot/Emulation/#method-setGeolocationOverride
        'https://chromedevtools.github.io/devtools-protocol/tot/Emulation/#method-clearGeolocationOverride
    
        'set the override location
        params.Add "latitude", 41.1621429
        params.Add "longitude", -8.6219537
        params.Add "accuracy", 100
    
        driver.ExecuteCDP "Emulation.setGeolocationOverride", params
  
        driver.NavigateTo "https://the-internet.herokuapp.com/geolocation"
    
        driver.FindElementByXPath("//*[@id='content']/div/button").Click
    
        Debug.Print driver.FindElementByID("lat-value").GetText, driver.FindElementByID("long-value").GetText
    
        driver.Wait 1000
    
        'now clear the override...
        driver.ExecuteCDP "Emulation.clearGeolocationOverride"
    
        'refresh the page...
        driver.Refresh
    
        driver.FindElementByXPath("//*[@id='content']/div/button").Click
    
        Debug.Print driver.FindElementByID("lat-value").GetText, driver.FindElementByID("long-value").GetText
    
        driver.Wait 2000
    
        driver.FindElementByXPath("//*[@id='map-link']/a").Click
    
        driver.Wait 5000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub

    
    Sub test_PageToXMLMethods()
        Dim driver As WebDriver
        Dim xmlDoc As DOMDocument60, Url As String

        Set driver = New WebDriver
    
        driver.StartEdge
        driver.OpenBrowser

        Url = "https://www.w3schools.com/xml/note.xml"

        driver.NavigateTo Url
        driver.Wait 500
    
        'save page to xml file
        driver.PageToXMLFile "test.xml", prettyPrint:=True
    
        'load up an xml document for further processing
        Set xmlDoc = driver.PageToXMLDoc
    
        Debug.Assert xmlDoc.selectSingleNode("//heading").text = "Reminder"
        
        'read the test file back into browser
        driver.NavigateToFile "test.xml"
    
        driver.Wait 1000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_PageToJSONMethods()
        Dim driver As WebDriver
        Dim json As Collection, Url As String

        Set driver = New WebDriver
    
        driver.StartEdge
        driver.OpenBrowser

        Url = "https://api.github.com/repos/gcuser99/seleniumVBA/releases"

        driver.NavigateTo Url
        driver.Wait 1000
    
        'save page to json file
        driver.PageToJSONFile "test.json"
    
        'load up a json object for further processing
        Set json = driver.PageToJSONObject
        Debug.Assert json(json.Count)("url") Like "https://api.github.com/repos/GCuser99/SeleniumVBA/releases/*"
        
        'read the test file back into browser
        driver.NavigateToFile "test.json"
    
        driver.Wait 2000
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_shadowroot()
        Dim driver As SeleniumVBA.WebDriver
        Dim shadowHost As SeleniumVBA.WebElement
        Dim shadowContent As SeleniumVBA.WebElement
        Dim shadowRootelem As SeleniumVBA.WebShadowRoot
    
        Set driver = SeleniumVBA.New_WebDriver
    
        driver.StartEdge
        driver.OpenBrowser
    
        driver.NavigateTo "https://www.selenium.dev/selenium/web/shadowRootPage.html"
    
        Set shadowHost = driver.FindElement(By.CssSelector, "body > div:nth-child(3) > custom-checkbox-element")
    
        Set shadowRootelem = shadowHost.GetShadowRoot()
    
        Set shadowContent = shadowRootelem.FindElement(By.CssSelector, "div > input[type=checkbox]")
    
        shadowContent.Click
    
        Debug.Assert shadowContent.GetProperty("checked")
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_IsPresent_wait()
        Dim driver As SeleniumVBA.WebDriver
        Dim html As String
        Dim timeDelay As Long
    
        Set driver = SeleniumVBA.New_WebDriver
    
        driver.StartChrome
        driver.OpenBrowser
    
        timeDelay = 3000

        'create an html that creates a new element after a specified time delay
        html = vbNullString
        html = html & "<!DOCTYPE html>" & vbCrLf
        html = html & "<html>" & vbCrLf
        html = html & "    <head>" & vbCrLf
        html = html & "        <title>Is Present?</title>" & vbCrLf
        html = html & "        <script>" & vbCrLf
        html = html & "            function insertDivWithDelay(delay, parentElementId) {" & vbCrLf
        html = html & "                setTimeout(function() {" & vbCrLf
        html = html & "                    const newDiv = document.createElement(""div"");" & vbCrLf
        html = html & "                    newDiv.id = 'new div';" & vbCrLf
        html = html & "                    newDiv.textContent = ""This div appeared after "" + delay / 1000 + "" seconds."";" & vbCrLf
        html = html & "                    newDiv.style.color = ""blue"";" & vbCrLf
        html = html & "                    const parentElement = document.getElementById(parentElementId);" & vbCrLf
        html = html & "                    if (parentElement) {" & vbCrLf
        html = html & "                        parentElement.append(newDiv);" & vbCrLf
        html = html & "                    } else {" & vbCrLf
        html = html & "                    }" & vbCrLf
        html = html & "                }, delay);" & vbCrLf
        html = html & "            }" & vbCrLf
        html = html & "        </script>" & vbCrLf
        html = html & "    </head>" & vbCrLf
        html = html & "    <body onLoad=""insertDivWithDelay(" & timeDelay & ", 'parent');"">" & vbCrLf
        html = html & "        <div id=""parent"">waiting for load...</div>" & vbCrLf
        html = html & "    </body>" & vbCrLf
        html = html & "</html>"

        driver.NavigateToString html

        'wait up to 20 secs for the new div is created
        Debug.Assert driver.IsPresent(By.ID, "new div", 20000)
    
        driver.Wait 1000

        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_WaitUntilNotPresent()
        Dim driver As SeleniumVBA.WebDriver
        Dim html As String
        Dim timeDelay As Long
    
        Set driver = SeleniumVBA.New_WebDriver
    
        driver.StartChrome
        driver.OpenBrowser
    
        timeDelay = 3000
    
        'create an html with an element of interest that is removed after a delay
        html = vbNullString
        html = html & "<!DOCTYPE html>" & vbCrLf
        html = html & "<html>" & vbCrLf
        html = html & "    <head>" & vbCrLf
        html = html & "        <title>Is Not Present?</title>" & vbCrLf
        html = html & "        <script>" & vbCrLf
        html = html & "            function removeElementWithDelay(delay, elementId) {" & vbCrLf
        html = html & "                setTimeout(function() {" & vbCrLf
        html = html & "                const elementToRemove = document.getElementById(elementId);" & vbCrLf
        html = html & "                if (elementToRemove) {" & vbCrLf
        html = html & "                    elementToRemove.remove();" & vbCrLf
        html = html & "                }" & vbCrLf
        html = html & "                }, delay);" & vbCrLf
        html = html & "            }" & vbCrLf
        html = html & "        </script>" & vbCrLf
        html = html & "    </head>" & vbCrLf
        html = html & "    <body onLoad=""removeElementWithDelay(" & timeDelay & ", 'div here');"">" & vbCrLf
        html = html & "        <div id=""div here"">I'm here...</div>" & vbCrLf
        html = html & "    </body>" & vbCrLf
        html = html & "</html>"

        driver.NavigateToString html
    
        'wait until the div is removed
        driver.WaitUntilNotPresent By.ID, "div here"

        driver.Wait 500
        
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_large_table_to_array()
        Dim driver As WebDriver
        Dim table() As Variant
        Dim html As String
        Dim i As Long, j As Long
    
        Set driver = New WebDriver

        driver.StartEdge
        driver.OpenBrowser
    
        'build the large table page (in this case having 20,000 cells)
        html = "<html><head><title>Test Table To Array</title></head><body><table border='1' id='mytable'><tbody>"
        For i = 1 To 200
            html = html & "<tr>"
            For j = 1 To 100
                html = html & "<td>" & i & "." & j & "</td>"
            Next j
            html = html & "</tr>"
        Next i
        html = html & "</tbody></table></body></html>"
        driver.NavigateToString html
    
        'this is super-fast due to generating the table in-browser using JavaScript
        table = driver.FindElement(By.ID, "mytable").TableToArray(createSpanData:=False)
    
        Debug.Assert table(7, 30) = "7.30"
        Debug.Assert table(99, 2) = "99.2"
    
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_Alerts2()
        Dim driver As SeleniumVBA.WebDriver
        Dim html As String
    
        Set driver = SeleniumVBA.New_WebDriver
        
        driver.StartChrome
        driver.OpenBrowser
    
        driver.ImplicitMaxWait = 2000
    
        html = "<html lang=""en"">" & vbCrLf
        html = html & "    <head>" & vbCrLf
        html = html & "        <title>Test Alerts</title>" & vbCrLf
        html = html & "    </head>" & vbCrLf
        html = html & "    <body>" & vbCrLf
        html = html & "        <div><div></div></div>" & vbCrLf
        html = html & "        <div>" & vbCrLf
        html = html & "            <div id=""content"">" & vbCrLf
        html = html & "                <script>" & vbCrLf
        html = html & "                    function jsAlert() {" & vbCrLf
        html = html & "                        alert('I am a JS Alert');" & vbCrLf
        html = html & "                        log('You successfully clicked an alert');" & vbCrLf
        html = html & "                    }" & vbCrLf
        html = html & "                    function jsConfirm() {" & vbCrLf
        html = html & "                        var c = confirm('I am a JS Confirm');" & vbCrLf
        html = html & "                        var result = c === true ? 'Ok' : 'Cancel';" & vbCrLf
        html = html & "                        log('You clicked: ' + result);" & vbCrLf
        html = html & "                    }" & vbCrLf
        html = html & "                    function jsPrompt() {" & vbCrLf
        html = html & "                        var p = prompt('I am a JS prompt');" & vbCrLf
        html = html & "                        log('You entered: ' + p);" & vbCrLf
        html = html & "                    }" & vbCrLf
        html = html & "                    function log(msg) {" & vbCrLf
        html = html & "                        var result = document.getElementById('result');" & vbCrLf
        html = html & "                        result.innerHTML = msg;" & vbCrLf
        html = html & "                    }" & vbCrLf
        html = html & "                </script>" & vbCrLf
        html = html & "                <div class=""example"">" & vbCrLf
        html = html & "                    <h3>JavaScript Alerts</h3>" & vbCrLf
        html = html & "                    <p>Here are some examples of different JavaScript alerts which can be troublesome for automation</p>" & vbCrLf
        html = html & "                    <ul style=""list-style-type: none;"">" & vbCrLf
        html = html & "                        <li><button onclick=""jsAlert()"">Click for JS Alert</button></li>" & vbCrLf
        html = html & "                        <li><button onclick=""jsConfirm()"">Click for JS Confirm</button></li>" & vbCrLf
        html = html & "                        <li><button onclick=""jsPrompt()"">Click for JS Prompt</button></li>" & vbCrLf
        html = html & "                    </ul>" & vbCrLf
        html = html & "                    <h4>Result:</h4>" & vbCrLf
        html = html & "                    <p id=""result"" style=""color:green"">You entered:</p>" & vbCrLf
        html = html & "                </div>" & vbCrLf
        html = html & "            </div>" & vbCrLf
        html = html & "        </div>" & vbCrLf
        html = html & "    </body>" & vbCrLf
        html = html & "</html>"


        driver.NavigateToString html
    
        'find and then click on an element that throws a prompt-type alert
        driver.FindElement(By.XPath, "//*[@id='content']/div/ul/li[3]/button").Click
        
        'SwitchToAlert waits up to a user-specified max time (default = 10 secs)
        'for alert to show, and then returns a WebAlert object for interaction
        driver.SwitchToAlert.SendKeys("hola mi nombre es Jose").Accept
    
        Debug.Assert driver.FindElementByID("result").GetText = "You entered: hola mi nombre es Jose"
        
        driver.CloseBrowser
        driver.Shutdown
    End Sub
    
    Sub test_replace()
        Dim regex As StaticRegex.RegexTy

        StaticRegex.InitializeRegex regex, pattern:="(\d+)(\D+)"
        Debug.Assert StaticRegex.Replace(regex, replacer:="$1", haystack:="123abc", localMatch:=True) = "123"
    
        StaticRegex.InitializeRegex regex, pattern:="(\d+)(\D+)"
        Debug.Assert StaticRegex.Replace(regex, replacer:="$1", haystack:="123abc", localMatch:=False) = "123"
    
        StaticRegex.InitializeRegex regex, pattern:="(\d*)(\D*)"
        Debug.Assert StaticRegex.Replace(regex, replacer:="$1", haystack:="123abc", localMatch:=True) = "123"
    
        StaticRegex.InitializeRegex regex, pattern:="(\d*)(\D*)"
        Debug.Assert StaticRegex.Replace(regex, replacer:="$1", haystack:="123abc", localMatch:=False) = "123"
        
        StaticRegex.InitializeRegex regex, pattern:="(\d*)(\D?)"
        Debug.Assert StaticRegex.Replace(regex, replacer:="$1", haystack:="123abc", localMatch:=False) = "123"
    End Sub
    
      
End Module
