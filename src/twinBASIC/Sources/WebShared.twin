Private Module WebShared

    ' ==========================================================================
    ' SeleniumVBA v6.7
    '
    ' A Selenium wrapper for browser automation developed for MS Office VBA
    '
    ' https://github.com/GCuser99/SeleniumVBA/tree/main
    '
    ' Contact Info:
    '
    ' https://github.com/6DiegoDiego9
    ' https://github.com/GCUser99
    ' ==========================================================================
    ' MIT License
    '
    ' Copyright (c) 2023-2025, GCUser99 and 6DiegoDiego9 (https://github.com/GCuser99/SeleniumVBA)
    '
    ' Permission is hereby granted, free of charge, to any person obtaining a copy
    ' of this software and associated documentation files (the "Software"), to deal
    ' in the Software without restriction, including without limitation the rights
    ' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    ' copies of the Software, and to permit persons to whom the Software is
    ' furnished to do so, subject to the following conditions:
    '
    ' The above copyright notice and this permission notice shall be included in all
    ' copies or substantial portions of the Software.
    '
    ' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    ' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    ' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    ' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    ' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    ' SOFTWARE.
    ' ==========================================================================
    ' For more info:
    ' https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats
    ' http://vbnet.mvps.org/index.html?code/fileapi/pathisrelative.htm
    ' https://stackoverflow.com/questions/57475738/ (for use of SetCurrentDirectory)
    ' https://stackoverflow.com/a/72736800/11738627 (handling of OneDrive/SharePoint cloud urls)

    Option Explicit
    Option Private Module

    'these are WDL compliant but use aliases
    Public Declare PtrSafe Sub SleepWinAPI Lib "kernel32" Alias "Sleep" (ByVal dwMilliseconds As Long)
    Public Declare PtrSafe Function GetFrequency Lib "kernel32" Alias "QueryPerformanceFrequency" (lpFrequency As LongLong) As BOOL
    Public Declare PtrSafe Function GetTime Lib "kernel32" Alias "QueryPerformanceCounter" (lpPerformanceCount As LongLong) As BOOL

    'Windows Dev Library Declarations (not needed if using reference to WDL Package)
    '/*
    Private DeclareWide PtrSafe Function SetCurrentDirectory Lib "kernel32" Alias "SetCurrentDirectoryW" (ByVal lpPathName As String) As BOOL
    Private DeclareWide PtrSafe Function PathIsRelative Lib "shlwapi" Alias "PathIsRelativeW" (ByVal pszPath As String) As BOOL
    Private DeclareWide PtrSafe Function PathIsURL Lib "shlwapi" Alias "PathIsURLW" (ByVal pszPath As String) As BOOL

    Private DeclareWide PtrSafe Function GetWindowText Lib "user32" Alias "GetWindowTextW" (ByVal hWnd As LongPtr, ByVal lpString As String, ByVal nMaxCount As Long) As Long
    Private Declare PtrSafe Function GetForegroundWindow Lib "user32" () As LongPtr
    Private DeclareWide PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringW" (ByVal lpAppName As String, ByVal lpKeyName As String, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
    Public DeclareWide PtrSafe Function UrlDownloadToFile Lib "urlmon" Alias "URLDownloadToFileW" (ByVal pCaller As stdole.IUnknown, ByVal szURL As String, ByVal szFile As String, ByVal dwReserved As Long, ByVal lpfnCB As stdole.IUnknown) As Long

    Public Enum BOOL
        CFALSE
        CTRUE
    End Enum
    '*/

    Public Function getFullLocalPath(ByVal inputPath As String, Optional ByVal basePath As String = vbNullString, Optional ByVal targetExists As Boolean = True) As String
        'Returns an absolute path from a relative path and a fully qualified base path.
        'basePath defaults to the folder path of the document that holds the Active VBA Project
        'fso.GetAbsolutePathName interprets a url as a relative path, so must avoid for url's

        Dim fso As New FileSystemObject
        Dim savePath As String
        Dim parentFolder As String
        Dim pathSep As String

        'make sure no rogue beginning or ending spaces and expand "%[Environ Variable]%" if in the path
        inputPath = expandEnvironVariable(VBA.Trim$(inputPath))

        If isPathRelative(inputPath) Then
            'convert relative path to absolute
            If basePath = vbNullString Then
                basePath = activeVBAProjectFolderPath
            Else
                'make sure no unintended beginning or ending spaces
                basePath = expandEnvironVariable(VBA.Trim$(basePath))
                'it's possible that user specified a relative reference folder path - convert it to absolute relative to
                'the folder path of the document that holds the Active VBA Project
                If isPathRelative(basePath) Then basePath = getFullLocalPath(basePath, activeVBAProjectFolderPath, True)
            End If

            'convert OneDrive path if needed
            If isPathHTTPS(basePath) Then
                basePath = getLocalOneDrivePath(basePath) 'assumes basePath exists
            End If
            
            'check that reference path exists and notify user if not
            If Not fso.FolderExists(basePath) Then
                If Not isPathHTTPS(basePath) Then 'its a url which fso doesn't support - must trust that it exists (@6DiegoDiego9)
                    Err.Raise 1, "WebShared", "Reference folder basePath does not exist." & vbNewLine & vbNewLine & basePath & vbNewLine & vbNewLine & "Please specify a valid folder path."
                End If
            End If
            
            'employ fso to make the conversion of relative path to absolute
            savePath = CurDir$()
            SetCurrentDirectory basePath
            getFullLocalPath = fso.GetAbsolutePathName(inputPath)
            SetCurrentDirectory savePath
        Else
            'its an absolute path
            'just in case OneDrive/SharePoint user has specified a path built with ThisWorkbook.Path...
            If isPathHTTPS(inputPath) Then
                If targetExists Then
                    inputPath = getLocalOneDrivePath(inputPath) 'assumes target exists
                Else
                    'target does not exist, so resolve the parent folder instead, and then rebuild path
                    parentFolder = getLocalOneDrivePath(fso.GetParentFolderName(inputPath))
                    If InStr(parentFolder, "\") Then pathSep = "\" Else pathSep = "/"
                    inputPath = parentFolder & pathSep & fso.GetFileName(inputPath)
                End If
            End If
        
            'normalize the path if its not a url - this insures that path separators are correct, and
            'if a folder, has no ending separator
            If Not isPathUrl(inputPath) Then inputPath = fso.GetAbsolutePathName(inputPath)
        
            getFullLocalPath = inputPath
        End If
    End Function

    Private Function getLocalOneDrivePath(ByVal targetPath As String) As String
        'for more info, see https://stackoverflow.com/a/72736800/11738627 post by Guido Witt-Dorring
        'this function returns the original/local disk path associated with a synched OneDrive or SharePoint cloud url
        'this function assumes that the specified path exists
        Dim origPath As String: origPath = targetPath '(@6DiegoDiego9)

        Const HKCU = &H80000001
        Dim objReg As Object, rPath As String, subKeys() As Variant, subKey As Variant
        Dim urlNamespace As String, mountPoint As String, secPart As String
        Set objReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\." & "\root\default:StdRegProv")
        rPath = "Software\SyncEngines\Providers\OneDrive\"
        objReg.EnumKey HKCU, rPath, subKeys
        For Each subKey In subKeys
            objReg.GetStringValue HKCU, rPath & subKey, "UrlNamespace", urlNamespace
            If urlNamespace <> "" And InStr(targetPath & "/", urlNamespace) > 0 Then
                objReg.GetStringValue HKCU, rPath & subKey, "MountPoint", mountPoint
                secPart = VBA.Replace$(Mid$(targetPath, Len(urlNamespace) + 1), "/", "\")
                Dim firstSecPart As String: firstSecPart = secPart
                targetPath = mountPoint & secPart
                Do Until Dir(targetPath, vbDirectory) <> "" Or InStr(2, secPart, "\") = 0
                    secPart = Mid$(secPart, InStr(2, secPart, "\"))
                    targetPath = mountPoint & secPart
                Loop
                Exit For
            End If
        Next subKey
        If firstSecPart = secPart Then targetPath = mountPoint 'OneDrivePersonal root folder
    
        Dim fso As New FileSystemObject
        If Not (fso.FileExists(targetPath) Or fso.FolderExists(targetPath)) Then
            targetPath = origPath 'fallback to original path if it's online-only (excluded from sync) (@6DiegoDiego9)
        End If
        getLocalOneDrivePath = targetPath
    End Function

    Private Function isPathRelative(ByVal sPath As String) As Boolean
        'PathIsRelative interprets a properly formed url as relative, so add a check for url too
        isPathRelative = (PathIsRelative(sPath) = CTRUE AndAlso PathIsURL(sPath) = CFALSE)
    End Function

    Private Function isPathHTTPS(ByVal sPath As String) As Boolean
        isPathHTTPS = (VBA.Left$(sPath, 8) = "https://")
    End Function

    Private Function isPathUrl(ByVal sPath As String) As Boolean
        isPathUrl = (PathIsURL(sPath) = CTRUE)
    End Function

    Public Function getBrowserNameString(ByVal browser As svbaBrowser) As String
        Select Case browser
        Case svbaBrowser.Chrome
            getBrowserNameString = "chrome"
        Case svbaBrowser.Edge
            getBrowserNameString = "msedge"
        Case svbaBrowser.Firefox
            getBrowserNameString = "firefox"
        End Select
    End Function

    Private Function expandEnvironVariable(ByVal inputPath As String) As String
        'this searches input path for %[Environ Variable]% pattern and if found, then replaces with the path equivalent
        Dim wsh As New IWshRuntimeLibrary.WshShell
        expandEnvironVariable = wsh.ExpandEnvironmentStrings(inputPath)
    End Function

    Public Function readIniFileEntry(ByVal filePath As String, ByVal section As String, ByVal keyName As String, Optional ByVal defaultValue As Variant = vbNullString, Optional ByVal useDefaultValue As Boolean = False) As String
        'reads a single settings file entry
        Const lenBuffer = 512
        Dim outputLen As Long
        Dim fso As FileSystemObject
        Dim buffer As String = String$(lenBuffer, Chr$(0&))
    
        If useDefaultValue Then 'quick escape!
            readIniFileEntry = defaultValue
            Exit Function
        End If
    
        'check if optional settings file exists - if not then use default and exit
        Set fso = New FileSystemObject
        If Not fso.FileExists(filePath) Then
            readIniFileEntry = defaultValue
            Exit Function
        End If
    
        'try to read and return the section/keyName value - if not then use default and exit
        outputLen = GetPrivateProfileString(section, keyName, vbNullString, buffer, lenBuffer, filePath)
                    
        If outputLen Then
            readIniFileEntry = Left$(buffer, outputLen)
        Else
            readIniFileEntry = defaultValue
        End If
    End Function

    Public Function enumTextToValue(ByVal enumText As String) As Long
        'this function converts an enum string read from the settings file to it's corresponding enum value
        enumText = Trim$(enumText)
        If IsNumeric(enumText) Then
            enumTextToValue = VBA.Val(enumText)
            Exit Function
        End If
        Select Case LCase$(enumText)
        Case "svbanotcompatible": enumTextToValue = svbaCompatibility.svbaNotCompatible
        Case "svbamajor": enumTextToValue = svbaCompatibility.svbaMajor
        Case "svbaminor": enumTextToValue = svbaCompatibility.svbaMinor
        Case "svbabuildmajor": enumTextToValue = svbaCompatibility.svbaBuildMajor
        Case "svbaexactmatch": enumTextToValue = svbaCompatibility.svbaExactMatch
        Case "vbhide": enumTextToValue = VbAppWinStyle.vbHide
        Case "vbmaximizedfocus": enumTextToValue = VbAppWinStyle.vbMaximizedFocus
        Case "vbminimizedfocus": enumTextToValue = VbAppWinStyle.vbMinimizedFocus
        Case "vbminimizednofocus": enumTextToValue = VbAppWinStyle.vbMinimizedNoFocus
        Case "vbnormalfocus": enumTextToValue = VbAppWinStyle.vbNormalFocus
        Case "vbnormalnofocus": enumTextToValue = VbAppWinStyle.vbNormalNoFocus
        Case "svbalandscape": enumTextToValue = svbaOrientation.svbaLandscape
        Case "svbaportrait": enumTextToValue = svbaOrientation.svbaPortrait
        Case "svbacentimeters": enumTextToValue = svbaUnits.svbaCentimeters
        Case "svbainches": enumTextToValue = svbaUnits.svbaInches
        Case Else: Err.Raise 1, "WebShared", "Settings file enum value " & enumText & " not recognized"
        End Select
    End Function

    Public Sub sleep(ByVal ms As LongLong)
        'Enhanced sleep proc. featuring <0.0% CPU usage, DoEvents, precision +-<10ms
        'Better Sleep proc. featuring <0.0% CPU usage, DoEvents, precision +-<10ms
        'Note: VBA.Timer ( + VBA.Date for midnight adjustment) and VBA.Now avoided for accuracy issues (10-15ms and occasionally even worse? see https://stackoverflow.com/questions/68767198/is-this-unstable-vba-timer-behavior-real-or-am-i-doing-something-wrong)
        Dim timeStart As LongLong, timeEnd As LongLong
        Dim timeElapsed As LongLong, timeTarget As LongLong
        Dim approxDelay As LongLong
    
        GetTime timeStart
    
        Static perSecond As LongLong
        If perSecond = 0 Then GetFrequency perSecond
        timeTarget = ms * (perSecond / 1000)
    
        If ms <= 25 Then
            'empty loop for improved accuracy (SleepWinAPI alone costs 2-15ms and DoEvents 2-8ms)
            Do
                GetTime timeEnd
            Loop Until timeEnd - timeStart >= timeTarget
            Exit Sub
        Else 'fully featured loop
            SleepWinAPI 5 '"WaitMessage" avoided because it costs 0.0* to 2**(!) ms
            DoEvents
            GetTime timeEnd
            approxDelay = (timeEnd - timeStart) / 2
        
            timeTarget = timeTarget - approxDelay
            Do While (timeEnd - timeStart) < timeTarget
                SleepWinAPI 1
                DoEvents
                GetTime timeEnd
            Loop
        End If
    End Sub

    Public Function Max(ParamArray numberList() As Variant) As Variant
        Dim i As Long
        Max = numberList(LBound(numberList))
        For i = LBound(numberList) + 1 To UBound(numberList)
            If numberList(i) > Max Then Max = numberList(i)
        Next i
    End Function

    Public Function AppActivate(ByVal partialWindowText As String, Optional ByVal Wait As Boolean = False) As Boolean
        'The VBA.AppActivate throws an error if a match is not found
        'This function wraps VBA's AppActivate but returns a boolean signifying whether the match was found
        'which allows for looping until found
        On Error GoTo winNotFound
        VBA.AppActivate partialWindowText, Wait
        AppActivate = True
        Exit Function
    winNotFound:
        AppActivate = False
    End Function

    Public Function IsActiveWindowVBIDE() As Boolean
        'determines whether the VBDIDE is the active window or not
        Dim winTitle As String
        winTitle = String$(200, vbNullChar)
        GetWindowText GetForegroundWindow(), winTitle, 200
        IsActiveWindowVBIDE = Left$(winTitle, InStr(winTitle, vbNullChar) - 1) Like "Microsoft Visual Basic for Applications -*"
    End Function

    Public Function splitKeyString(ByVal keys As String) As Collection
        'splits the input string into a collection of individual characters
        Dim i As Long
        Dim chars As New Collection
        For i = 1 To Len(keys)
            chars.Add Mid$(keys, i, 1)
        Next i
        Set splitKeyString = chars
    End Function

    Public Function getResponseErrorMessage(resp As Dictionary) As String
        If TypeName(resp("value")) = "Dictionary" AndAlso resp("value").Exists("error") Then
            getResponseErrorMessage = resp("value")("message")
        End If
    End Function

    Public Function isResponseError(resp As Dictionary) As Boolean
        If TypeName(resp("value")) = "Dictionary" Then isResponseError = resp("value").Exists("error")
    End Function

    'this is used to convert an escaped unicode string (e.g. "\u00A9") into the
    'single (wide) character equiv. This conversion is required by WebJsonConverter.
    Public Function unEscapeUnicode(ByRef keyString As Variant) As String
        Dim oRegExp As New RegExp
        Dim matches As MatchCollection
        Dim match As Match
        Dim unEscapedValue As String
    
        oRegExp.Global = True

        'process escaped unicode
        oRegExp.Pattern = "\\u([0-9a-fA-F]{4})"
        Set matches = oRegExp.Execute(keyString)
        If matches.Count > 0 Then
            For Each match In matches
                unEscapedValue = ChrW$(Val("&H" & match.SubMatches(0)))
                'replace match with unescaped value
                keyString = VBA.Replace$(keyString, match.Value, unEscapedValue, Count:=1)
            Next match
        End If
        unEscapeUnicode = keyString
    End Function

    'this is to replace AscW which outputs negative ascii code for unicode due to its integer return value
    Public Function AscWL(ByVal s As String) As Long
        AscWL = CLng(AscW(s)) And &HFFFF&
    End Function
    
End Module
